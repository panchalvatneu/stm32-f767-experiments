
EchoDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c4c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004e44  08004e44  00005e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e64  08004e64  0000614c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e64  08004e64  00005e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e6c  08004e6c  0000614c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e6c  08004e6c  00005e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e70  08004e70  00005e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004e74  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004e80  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08004f20  000060ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000740  2000014c  08004fc0  0000614c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000088c  08004fc0  0000688c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000614c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012697  00000000  00000000  0000617a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027ca  00000000  00000000  00018811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dc8  00000000  00000000  0001afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a98  00000000  00000000  0001bda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000286d7  00000000  00000000  0001c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011009  00000000  00000000  00044f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f9288  00000000  00000000  00055f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014f1a8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003944  00000000  00000000  0014f1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  00152b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004e2c 	.word	0x08004e2c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08004e2c 	.word	0x08004e2c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a08      	ldr	r2, [pc, #32]	@ (8000594 <HAL_UART_RxCpltCallback+0x30>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d109      	bne.n	800058a <HAL_UART_RxCpltCallback+0x26>
    {
        // Echo back what was received
        HAL_UART_Transmit_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 8000576:	2205      	movs	r2, #5
 8000578:	4907      	ldr	r1, [pc, #28]	@ (8000598 <HAL_UART_RxCpltCallback+0x34>)
 800057a:	4808      	ldr	r0, [pc, #32]	@ (800059c <HAL_UART_RxCpltCallback+0x38>)
 800057c:	f003 f9b4 	bl	80038e8 <HAL_UART_Transmit_DMA>

        // Restart DMA Receive for next message
        HAL_UART_Receive_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 8000580:	2205      	movs	r2, #5
 8000582:	4905      	ldr	r1, [pc, #20]	@ (8000598 <HAL_UART_RxCpltCallback+0x34>)
 8000584:	4805      	ldr	r0, [pc, #20]	@ (800059c <HAL_UART_RxCpltCallback+0x38>)
 8000586:	f003 fa2b 	bl	80039e0 <HAL_UART_Receive_DMA>
    }
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40004800 	.word	0x40004800
 8000598:	20000878 	.word	0x20000878
 800059c:	20000250 	.word	0x20000250

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fc9d 	bl	8000ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f816 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f958 	bl	8000860 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f000 f930 	bl	8000814 <MX_DMA_Init>
  MX_ETH_Init();
 80005b4:	f000 f882 	bl	80006bc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005b8:	f000 f8ce 	bl	8000758 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005bc:	f000 f8fc 	bl	80007b8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart3, rxBuffer, sizeof(rxBuffer));
 80005c0:	2205      	movs	r2, #5
 80005c2:	4903      	ldr	r1, [pc, #12]	@ (80005d0 <main+0x30>)
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <main+0x34>)
 80005c6:	f003 fa0b 	bl	80039e0 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <main+0x2a>
 80005ce:	bf00      	nop
 80005d0:	20000878 	.word	0x20000878
 80005d4:	20000250 	.word	0x20000250

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	@ 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 fbf3 	bl	8004dd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005fc:	f001 ffca 	bl	8002594 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	4b2c      	ldr	r3, [pc, #176]	@ (80006b4 <SystemClock_Config+0xdc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a2b      	ldr	r2, [pc, #172]	@ (80006b4 <SystemClock_Config+0xdc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <SystemClock_Config+0xdc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <SystemClock_Config+0xe0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000620:	4a25      	ldr	r2, [pc, #148]	@ (80006b8 <SystemClock_Config+0xe0>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <SystemClock_Config+0xe0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000638:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800063c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000646:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800064c:	2360      	movs	r3, #96	@ 0x60
 800064e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fff7 	bl	8002654 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800066c:	f000 f99a 	bl	80009a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000670:	f001 ffa0 	bl	80025b4 <HAL_PWREx_EnableOverDrive>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800067a:	f000 f993 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2103      	movs	r1, #3
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fa88 	bl	8002bb0 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006a6:	f000 f97d 	bl	80009a4 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	@ 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <MX_ETH_Init+0x84>)
 80006c2:	4a20      	ldr	r2, [pc, #128]	@ (8000744 <MX_ETH_Init+0x88>)
 80006c4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006c6:	4b20      	ldr	r3, [pc, #128]	@ (8000748 <MX_ETH_Init+0x8c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <MX_ETH_Init+0x8c>)
 80006ce:	2280      	movs	r2, #128	@ 0x80
 80006d0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_ETH_Init+0x8c>)
 80006d4:	22e1      	movs	r2, #225	@ 0xe1
 80006d6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <MX_ETH_Init+0x8c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006de:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <MX_ETH_Init+0x8c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006e4:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <MX_ETH_Init+0x8c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ea:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <MX_ETH_Init+0x84>)
 80006ec:	4a16      	ldr	r2, [pc, #88]	@ (8000748 <MX_ETH_Init+0x8c>)
 80006ee:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006f0:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <MX_ETH_Init+0x84>)
 80006f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006f6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_ETH_Init+0x84>)
 80006fa:	4a14      	ldr	r2, [pc, #80]	@ (800074c <MX_ETH_Init+0x90>)
 80006fc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <MX_ETH_Init+0x84>)
 8000700:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_ETH_Init+0x94>)
 8000702:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <MX_ETH_Init+0x84>)
 8000706:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800070a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800070c:	480c      	ldr	r0, [pc, #48]	@ (8000740 <MX_ETH_Init+0x84>)
 800070e:	f001 f8f3 	bl	80018f8 <HAL_ETH_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f944 	bl	80009a4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800071c:	2238      	movs	r2, #56	@ 0x38
 800071e:	2100      	movs	r1, #0
 8000720:	480c      	ldr	r0, [pc, #48]	@ (8000754 <MX_ETH_Init+0x98>)
 8000722:	f004 fb56 	bl	8004dd2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_ETH_Init+0x98>)
 8000728:	2221      	movs	r2, #33	@ 0x21
 800072a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_ETH_Init+0x98>)
 800072e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000732:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <MX_ETH_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200001a0 	.word	0x200001a0
 8000744:	40028000 	.word	0x40028000
 8000748:	20000880 	.word	0x20000880
 800074c:	200000ac 	.word	0x200000ac
 8000750:	2000000c 	.word	0x2000000c
 8000754:	20000168 	.word	0x20000168

08000758 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_USART3_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	@ (80007b4 <MX_USART3_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_USART3_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_USART3_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_USART3_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_USART3_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_USART3_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_USART3_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_USART3_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_USART3_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_USART3_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_USART3_UART_Init+0x58>)
 800079c:	f003 f856 	bl	800384c <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f8fd 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000250 	.word	0x20000250
 80007b4:	40004800 	.word	0x40004800

080007b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007bc:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c6:	2206      	movs	r2, #6
 80007c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	2202      	movs	r2, #2
 80007da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2201      	movs	r2, #1
 80007e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fc:	f001 fd8f 	bl	800231e <HAL_PCD_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000806:	f000 f8cd 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000398 	.word	0x20000398

08000814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <MX_DMA_Init+0x48>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a0f      	ldr	r2, [pc, #60]	@ (800085c <MX_DMA_Init+0x48>)
 8000820:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <MX_DMA_Init+0x48>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	200c      	movs	r0, #12
 8000838:	f000 fcaf 	bl	800119a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800083c:	200c      	movs	r0, #12
 800083e:	f000 fcc8 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	200e      	movs	r0, #14
 8000848:	f000 fca7 	bl	800119a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800084c:	200e      	movs	r0, #14
 800084e:	f000 fcc0 	bl	80011d2 <HAL_NVIC_EnableIRQ>

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	@ 0x30
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	4b47      	ldr	r3, [pc, #284]	@ (8000994 <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a46      	ldr	r2, [pc, #280]	@ (8000994 <MX_GPIO_Init+0x134>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b44      	ldr	r3, [pc, #272]	@ (8000994 <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	4b41      	ldr	r3, [pc, #260]	@ (8000994 <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a40      	ldr	r2, [pc, #256]	@ (8000994 <MX_GPIO_Init+0x134>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b3e      	ldr	r3, [pc, #248]	@ (8000994 <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a3a      	ldr	r2, [pc, #232]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b38      	ldr	r3, [pc, #224]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b35      	ldr	r3, [pc, #212]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a34      	ldr	r2, [pc, #208]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b32      	ldr	r3, [pc, #200]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a2e      	ldr	r2, [pc, #184]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ee:	4b29      	ldr	r3, [pc, #164]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a28      	ldr	r2, [pc, #160]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f244 0181 	movw	r1, #16513	@ 0x4081
 800090c:	4822      	ldr	r0, [pc, #136]	@ (8000998 <MX_GPIO_Init+0x138>)
 800090e:	f001 fced 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2140      	movs	r1, #64	@ 0x40
 8000916:	4821      	ldr	r0, [pc, #132]	@ (800099c <MX_GPIO_Init+0x13c>)
 8000918:	f001 fce8 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000922:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	481b      	ldr	r0, [pc, #108]	@ (80009a0 <MX_GPIO_Init+0x140>)
 8000934:	f001 fb2e 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000938:	f244 0381 	movw	r3, #16513	@ 0x4081
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4811      	ldr	r0, [pc, #68]	@ (8000998 <MX_GPIO_Init+0x138>)
 8000952:	f001 fb1f 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000956:	2340      	movs	r3, #64	@ 0x40
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	480b      	ldr	r0, [pc, #44]	@ (800099c <MX_GPIO_Init+0x13c>)
 800096e:	f001 fb11 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000972:	2380      	movs	r3, #128	@ 0x80
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_GPIO_Init+0x13c>)
 8000986:	f001 fb05 	bl	8001f94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	bf00      	nop
 800098c:	3730      	adds	r7, #48	@ 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40020400 	.word	0x40020400
 800099c:	40021800 	.word	0x40021800
 80009a0:	40020800 	.word	0x40020800

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <Error_Handler+0x8>

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <HAL_MspInit+0x44>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	4a0e      	ldr	r2, [pc, #56]	@ (80009f4 <HAL_MspInit+0x44>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <HAL_MspInit+0x44>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <HAL_MspInit+0x44>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <HAL_MspInit+0x44>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_MspInit+0x44>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	@ 0x38
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a4e      	ldr	r2, [pc, #312]	@ (8000b50 <HAL_ETH_MspInit+0x158>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	f040 8096 	bne.w	8000b48 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a20:	4a4c      	ldr	r2, [pc, #304]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a28:	4b4a      	ldr	r3, [pc, #296]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a30:	623b      	str	r3, [r7, #32]
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	4b47      	ldr	r3, [pc, #284]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a38:	4a46      	ldr	r2, [pc, #280]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a40:	4b44      	ldr	r3, [pc, #272]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a48:	61fb      	str	r3, [r7, #28]
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	4b41      	ldr	r3, [pc, #260]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a50:	4a40      	ldr	r2, [pc, #256]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a58:	4b3e      	ldr	r3, [pc, #248]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a64:	4b3b      	ldr	r3, [pc, #236]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a68:	4a3a      	ldr	r2, [pc, #232]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a70:	4b38      	ldr	r3, [pc, #224]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b35      	ldr	r3, [pc, #212]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	4a34      	ldr	r2, [pc, #208]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a88:	4b32      	ldr	r3, [pc, #200]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a94:	4b2f      	ldr	r3, [pc, #188]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	4a2e      	ldr	r2, [pc, #184]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aac:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	4a28      	ldr	r2, [pc, #160]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab8:	4b26      	ldr	r3, [pc, #152]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ac4:	2332      	movs	r3, #50	@ 0x32
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad4:	230b      	movs	r3, #11
 8000ad6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	481e      	ldr	r0, [pc, #120]	@ (8000b58 <HAL_ETH_MspInit+0x160>)
 8000ae0:	f001 fa58 	bl	8001f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ae4:	2386      	movs	r3, #134	@ 0x86
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af4:	230b      	movs	r3, #11
 8000af6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	4817      	ldr	r0, [pc, #92]	@ (8000b5c <HAL_ETH_MspInit+0x164>)
 8000b00:	f001 fa48 	bl	8001f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b16:	230b      	movs	r3, #11
 8000b18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480f      	ldr	r0, [pc, #60]	@ (8000b60 <HAL_ETH_MspInit+0x168>)
 8000b22:	f001 fa37 	bl	8001f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b26:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b38:	230b      	movs	r3, #11
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	4808      	ldr	r0, [pc, #32]	@ (8000b64 <HAL_ETH_MspInit+0x16c>)
 8000b44:	f001 fa26 	bl	8001f94 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000b48:	bf00      	nop
 8000b4a:	3738      	adds	r7, #56	@ 0x38
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40028000 	.word	0x40028000
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020400 	.word	0x40020400
 8000b64:	40021800 	.word	0x40021800

08000b68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2290      	movs	r2, #144	@ 0x90
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f004 f922 	bl	8004dd2 <memset>
  if(huart->Instance==USART3)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a50      	ldr	r2, [pc, #320]	@ (8000cd4 <HAL_UART_MspInit+0x16c>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	f040 8099 	bne.w	8000ccc <HAL_UART_MspInit+0x164>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 fa27 	bl	8002ffc <HAL_RCCEx_PeriphCLKConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000bb4:	f7ff fef6 	bl	80009a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bb8:	4b47      	ldr	r3, [pc, #284]	@ (8000cd8 <HAL_UART_MspInit+0x170>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	4a46      	ldr	r2, [pc, #280]	@ (8000cd8 <HAL_UART_MspInit+0x170>)
 8000bbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc4:	4b44      	ldr	r3, [pc, #272]	@ (8000cd8 <HAL_UART_MspInit+0x170>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd0:	4b41      	ldr	r3, [pc, #260]	@ (8000cd8 <HAL_UART_MspInit+0x170>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd4:	4a40      	ldr	r2, [pc, #256]	@ (8000cd8 <HAL_UART_MspInit+0x170>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bdc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cd8 <HAL_UART_MspInit+0x170>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be0:	f003 0308 	and.w	r3, r3, #8
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000be8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c02:	2307      	movs	r3, #7
 8000c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4833      	ldr	r0, [pc, #204]	@ (8000cdc <HAL_UART_MspInit+0x174>)
 8000c10:	f001 f9c0 	bl	8001f94 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000c14:	4b32      	ldr	r3, [pc, #200]	@ (8000ce0 <HAL_UART_MspInit+0x178>)
 8000c16:	4a33      	ldr	r2, [pc, #204]	@ (8000ce4 <HAL_UART_MspInit+0x17c>)
 8000c18:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000c1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ce0 <HAL_UART_MspInit+0x178>)
 8000c1c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c20:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <HAL_UART_MspInit+0x178>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce0 <HAL_UART_MspInit+0x178>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <HAL_UART_MspInit+0x178>)
 8000c30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c34:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <HAL_UART_MspInit+0x178>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <HAL_UART_MspInit+0x178>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000c42:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <HAL_UART_MspInit+0x178>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c48:	4b25      	ldr	r3, [pc, #148]	@ (8000ce0 <HAL_UART_MspInit+0x178>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <HAL_UART_MspInit+0x178>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000c54:	4822      	ldr	r0, [pc, #136]	@ (8000ce0 <HAL_UART_MspInit+0x178>)
 8000c56:	f000 fad7 	bl	8001208 <HAL_DMA_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8000c60:	f7ff fea0 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a1e      	ldr	r2, [pc, #120]	@ (8000ce0 <HAL_UART_MspInit+0x178>)
 8000c68:	675a      	str	r2, [r3, #116]	@ 0x74
 8000c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce0 <HAL_UART_MspInit+0x178>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <HAL_UART_MspInit+0x180>)
 8000c72:	4a1e      	ldr	r2, [pc, #120]	@ (8000cec <HAL_UART_MspInit+0x184>)
 8000c74:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <HAL_UART_MspInit+0x180>)
 8000c78:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c7c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <HAL_UART_MspInit+0x180>)
 8000c80:	2240      	movs	r2, #64	@ 0x40
 8000c82:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <HAL_UART_MspInit+0x180>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <HAL_UART_MspInit+0x180>)
 8000c8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c90:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <HAL_UART_MspInit+0x180>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c98:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <HAL_UART_MspInit+0x180>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000c9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <HAL_UART_MspInit+0x180>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <HAL_UART_MspInit+0x180>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <HAL_UART_MspInit+0x180>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <HAL_UART_MspInit+0x180>)
 8000cb2:	f000 faa9 	bl	8001208 <HAL_DMA_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8000cbc:	f7ff fe72 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a09      	ldr	r2, [pc, #36]	@ (8000ce8 <HAL_UART_MspInit+0x180>)
 8000cc4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000cc6:	4a08      	ldr	r2, [pc, #32]	@ (8000ce8 <HAL_UART_MspInit+0x180>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000ccc:	bf00      	nop
 8000cce:	37b8      	adds	r7, #184	@ 0xb8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40004800 	.word	0x40004800
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020c00 	.word	0x40020c00
 8000ce0:	200002d8 	.word	0x200002d8
 8000ce4:	40026028 	.word	0x40026028
 8000ce8:	20000338 	.word	0x20000338
 8000cec:	40026058 	.word	0x40026058

08000cf0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0ae      	sub	sp, #184	@ 0xb8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2290      	movs	r2, #144	@ 0x90
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 f85e 	bl	8004dd2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d1e:	d159      	bne.n	8000dd4 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d20:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000d24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4618      	mov	r0, r3
 8000d32:	f002 f963 	bl	8002ffc <HAL_RCCEx_PeriphCLKConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d3c:	f7ff fe32 	bl	80009a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b26      	ldr	r3, [pc, #152]	@ (8000ddc <HAL_PCD_MspInit+0xec>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d44:	4a25      	ldr	r2, [pc, #148]	@ (8000ddc <HAL_PCD_MspInit+0xec>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4c:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <HAL_PCD_MspInit+0xec>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d58:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d72:	230a      	movs	r3, #10
 8000d74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4818      	ldr	r0, [pc, #96]	@ (8000de0 <HAL_PCD_MspInit+0xf0>)
 8000d80:	f001 f908 	bl	8001f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4810      	ldr	r0, [pc, #64]	@ (8000de0 <HAL_PCD_MspInit+0xf0>)
 8000da0:	f001 f8f8 	bl	8001f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <HAL_PCD_MspInit+0xec>)
 8000da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000da8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ddc <HAL_PCD_MspInit+0xec>)
 8000daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dae:	6353      	str	r3, [r2, #52]	@ 0x34
 8000db0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_PCD_MspInit+0xec>)
 8000db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <HAL_PCD_MspInit+0xec>)
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc0:	4a06      	ldr	r2, [pc, #24]	@ (8000ddc <HAL_PCD_MspInit+0xec>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <HAL_PCD_MspInit+0xec>)
 8000dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000dd4:	bf00      	nop
 8000dd6:	37b8      	adds	r7, #184	@ 0xb8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <NMI_Handler+0x4>

08000dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3a:	f000 f88f 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <DMA1_Stream1_IRQHandler+0x10>)
 8000e4a:	f000 faeb 	bl	8001424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200002d8 	.word	0x200002d8

08000e58 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000e5c:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <DMA1_Stream3_IRQHandler+0x10>)
 8000e5e:	f000 fae1 	bl	8001424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000338 	.word	0x20000338

08000e6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e94:	f7ff ffea 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	@ (8000ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f003 ff91 	bl	8004de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fb6d 	bl	80005a0 <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ed4:	08004e74 	.word	0x08004e74
  ldr r2, =_sbss
 8000ed8:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000edc:	2000088c 	.word	0x2000088c

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>

08000ee2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f000 f94c 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 f805 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef2:	f7ff fd5d 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f967 	bl	80011ee <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 f92f 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	@ (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000888 	.word	0x20000888

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000888 	.word	0x20000888

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff ffee 	bl	8000f84 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffde 	bl	8000f84 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	4313      	orrs	r3, r2
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <__NVIC_SetPriorityGrouping+0x40>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00
 8001028:	05fa0000 	.word	0x05fa0000

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4907      	ldr	r1, [pc, #28]	@ (8001080 <__NVIC_EnableIRQ+0x38>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	@ (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	@ (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	@ 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	@ 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff8e 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff29 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff3e 	bl	800102c <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff8e 	bl	80010d8 <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5d 	bl	8001084 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff31 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffa2 	bl	8001140 <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff feb6 	bl	8000f84 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e099      	b.n	8001358 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2202      	movs	r2, #2
 8001228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001244:	e00f      	b.n	8001266 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001246:	f7ff fe9d 	bl	8000f84 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b05      	cmp	r3, #5
 8001252:	d908      	bls.n	8001266 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2220      	movs	r2, #32
 8001258:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2203      	movs	r2, #3
 800125e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e078      	b.n	8001358 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e8      	bne.n	8001246 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	4b38      	ldr	r3, [pc, #224]	@ (8001360 <HAL_DMA_Init+0x158>)
 8001280:	4013      	ands	r3, r2
 8001282:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001292:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800129e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d107      	bne.n	80012d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	4313      	orrs	r3, r2
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f023 0307 	bic.w	r3, r3, #7
 80012e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d117      	bne.n	800132a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4313      	orrs	r3, r2
 8001302:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00e      	beq.n	800132a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fa77 	bl	8001800 <DMA_CheckFifoParam>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d008      	beq.n	800132a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2240      	movs	r2, #64	@ 0x40
 800131c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001326:	2301      	movs	r3, #1
 8001328:	e016      	b.n	8001358 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fa2e 	bl	8001794 <DMA_CalcBaseAndBitshift>
 8001338:	4603      	mov	r3, r0
 800133a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001340:	223f      	movs	r2, #63	@ 0x3f
 8001342:	409a      	lsls	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	e010803f 	.word	0xe010803f

08001364 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_DMA_Start_IT+0x26>
 8001386:	2302      	movs	r3, #2
 8001388:	e048      	b.n	800141c <HAL_DMA_Start_IT+0xb8>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d137      	bne.n	800140e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2202      	movs	r2, #2
 80013a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f9c0 	bl	8001738 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013bc:	223f      	movs	r2, #63	@ 0x3f
 80013be:	409a      	lsls	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0216 	orr.w	r2, r2, #22
 80013d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013e2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d007      	beq.n	80013fc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0208 	orr.w	r2, r2, #8
 80013fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e005      	b.n	800141a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001416:	2302      	movs	r3, #2
 8001418:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800141a:	7dfb      	ldrb	r3, [r7, #23]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001430:	4b8e      	ldr	r3, [pc, #568]	@ (800166c <HAL_DMA_IRQHandler+0x248>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a8e      	ldr	r2, [pc, #568]	@ (8001670 <HAL_DMA_IRQHandler+0x24c>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	0a9b      	lsrs	r3, r3, #10
 800143c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144e:	2208      	movs	r2, #8
 8001450:	409a      	lsls	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d01a      	beq.n	8001490 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0204 	bic.w	r2, r2, #4
 8001476:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800147c:	2208      	movs	r2, #8
 800147e:	409a      	lsls	r2, r3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001488:	f043 0201 	orr.w	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001494:	2201      	movs	r2, #1
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d012      	beq.n	80014c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b2:	2201      	movs	r2, #1
 80014b4:	409a      	lsls	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014be:	f043 0202 	orr.w	r2, r3, #2
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ca:	2204      	movs	r2, #4
 80014cc:	409a      	lsls	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d012      	beq.n	80014fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00b      	beq.n	80014fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e8:	2204      	movs	r2, #4
 80014ea:	409a      	lsls	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f4:	f043 0204 	orr.w	r2, r3, #4
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001500:	2210      	movs	r2, #16
 8001502:	409a      	lsls	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d043      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d03c      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800151e:	2210      	movs	r2, #16
 8001520:	409a      	lsls	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d018      	beq.n	8001566 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d108      	bne.n	8001554 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	2b00      	cmp	r3, #0
 8001548:	d024      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4798      	blx	r3
 8001552:	e01f      	b.n	8001594 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001558:	2b00      	cmp	r3, #0
 800155a:	d01b      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	4798      	blx	r3
 8001564:	e016      	b.n	8001594 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d107      	bne.n	8001584 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0208 	bic.w	r2, r2, #8
 8001582:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001598:	2220      	movs	r2, #32
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 808f 	beq.w	80016c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 8087 	beq.w	80016c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ba:	2220      	movs	r2, #32
 80015bc:	409a      	lsls	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d136      	bne.n	800163c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0216 	bic.w	r2, r2, #22
 80015dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d103      	bne.n	80015fe <HAL_DMA_IRQHandler+0x1da>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0208 	bic.w	r2, r2, #8
 800160c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001612:	223f      	movs	r2, #63	@ 0x3f
 8001614:	409a      	lsls	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800162e:	2b00      	cmp	r3, #0
 8001630:	d07e      	beq.n	8001730 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	4798      	blx	r3
        }
        return;
 800163a:	e079      	b.n	8001730 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d01d      	beq.n	8001686 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10d      	bne.n	8001674 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165c:	2b00      	cmp	r3, #0
 800165e:	d031      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	4798      	blx	r3
 8001668:	e02c      	b.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
 800166a:	bf00      	nop
 800166c:	20000000 	.word	0x20000000
 8001670:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001678:	2b00      	cmp	r3, #0
 800167a:	d023      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	4798      	blx	r3
 8001684:	e01e      	b.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10f      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0210 	bic.w	r2, r2, #16
 80016a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d032      	beq.n	8001732 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d022      	beq.n	800171e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2205      	movs	r2, #5
 80016dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3301      	adds	r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d307      	bcc.n	800170c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f2      	bne.n	80016f0 <HAL_DMA_IRQHandler+0x2cc>
 800170a:	e000      	b.n	800170e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800170c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	4798      	blx	r3
 800172e:	e000      	b.n	8001732 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001730:	bf00      	nop
    }
  }
}
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001754:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b40      	cmp	r3, #64	@ 0x40
 8001764:	d108      	bne.n	8001778 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001776:	e007      	b.n	8001788 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	60da      	str	r2, [r3, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3b10      	subs	r3, #16
 80017a4:	4a13      	ldr	r2, [pc, #76]	@ (80017f4 <DMA_CalcBaseAndBitshift+0x60>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <DMA_CalcBaseAndBitshift+0x64>)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d908      	bls.n	80017d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <DMA_CalcBaseAndBitshift+0x68>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	1d1a      	adds	r2, r3, #4
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80017d2:	e006      	b.n	80017e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <DMA_CalcBaseAndBitshift+0x68>)
 80017dc:	4013      	ands	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	aaaaaaab 	.word	0xaaaaaaab
 80017f8:	08004e5c 	.word	0x08004e5c
 80017fc:	fffffc00 	.word	0xfffffc00

08001800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d11f      	bne.n	800185a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d856      	bhi.n	80018ce <DMA_CheckFifoParam+0xce>
 8001820:	a201      	add	r2, pc, #4	@ (adr r2, 8001828 <DMA_CheckFifoParam+0x28>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	08001839 	.word	0x08001839
 800182c:	0800184b 	.word	0x0800184b
 8001830:	08001839 	.word	0x08001839
 8001834:	080018cf 	.word	0x080018cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d046      	beq.n	80018d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001848:	e043      	b.n	80018d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001852:	d140      	bne.n	80018d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001858:	e03d      	b.n	80018d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001862:	d121      	bne.n	80018a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d837      	bhi.n	80018da <DMA_CheckFifoParam+0xda>
 800186a:	a201      	add	r2, pc, #4	@ (adr r2, 8001870 <DMA_CheckFifoParam+0x70>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	08001881 	.word	0x08001881
 8001874:	08001887 	.word	0x08001887
 8001878:	08001881 	.word	0x08001881
 800187c:	08001899 	.word	0x08001899
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
      break;
 8001884:	e030      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d025      	beq.n	80018de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001896:	e022      	b.n	80018de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80018a0:	d11f      	bne.n	80018e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018a6:	e01c      	b.n	80018e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d903      	bls.n	80018b6 <DMA_CheckFifoParam+0xb6>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d003      	beq.n	80018bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018b4:	e018      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
      break;
 80018ba:	e015      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00e      	beq.n	80018e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
      break;
 80018cc:	e00b      	b.n	80018e6 <DMA_CheckFifoParam+0xe6>
      break;
 80018ce:	bf00      	nop
 80018d0:	e00a      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018d2:	bf00      	nop
 80018d4:	e008      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018d6:	bf00      	nop
 80018d8:	e006      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018da:	bf00      	nop
 80018dc:	e004      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018de:	bf00      	nop
 80018e0:	e002      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80018e2:	bf00      	nop
 80018e4:	e000      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018e6:	bf00      	nop
    }
  } 
  
  return status; 
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e086      	b.n	8001a18 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001910:	2b00      	cmp	r3, #0
 8001912:	d106      	bne.n	8001922 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2223      	movs	r2, #35	@ 0x23
 8001918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff f86b 	bl	80009f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	4b3f      	ldr	r3, [pc, #252]	@ (8001a20 <HAL_ETH_Init+0x128>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	4a3e      	ldr	r2, [pc, #248]	@ (8001a20 <HAL_ETH_Init+0x128>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800192c:	6453      	str	r3, [r2, #68]	@ 0x44
 800192e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a20 <HAL_ETH_Init+0x128>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800193a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a24 <HAL_ETH_Init+0x12c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4a39      	ldr	r2, [pc, #228]	@ (8001a24 <HAL_ETH_Init+0x12c>)
 8001940:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001944:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001946:	4b37      	ldr	r3, [pc, #220]	@ (8001a24 <HAL_ETH_Init+0x12c>)
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	4935      	ldr	r1, [pc, #212]	@ (8001a24 <HAL_ETH_Init+0x12c>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001954:	4b33      	ldr	r3, [pc, #204]	@ (8001a24 <HAL_ETH_Init+0x12c>)
 8001956:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800196e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001970:	f7ff fb08 	bl	8000f84 <HAL_GetTick>
 8001974:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001976:	e011      	b.n	800199c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001978:	f7ff fb04 	bl	8000f84 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001986:	d909      	bls.n	800199c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2204      	movs	r2, #4
 800198c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	22e0      	movs	r2, #224	@ 0xe0
 8001994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e03d      	b.n	8001a18 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1e4      	bne.n	8001978 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f97a 	bl	8001ca8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fa25 	bl	8001e04 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fa7b 	bl	8001eb6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	461a      	mov	r2, r3
 80019c6:	2100      	movs	r1, #0
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f9e3 	bl	8001d94 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80019dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <HAL_ETH_Init+0x130>)
 80019ec:	430b      	orrs	r3, r1
 80019ee:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001a02:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2210      	movs	r2, #16
 8001a12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40013800 	.word	0x40013800
 8001a28:	00020060 	.word	0x00020060

08001a2c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4b53      	ldr	r3, [pc, #332]	@ (8001b90 <ETH_SetMACConfig+0x164>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	7b9b      	ldrb	r3, [r3, #14]
 8001a4a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	7c12      	ldrb	r2, [r2, #16]
 8001a50:	2a00      	cmp	r2, #0
 8001a52:	d102      	bne.n	8001a5a <ETH_SetMACConfig+0x2e>
 8001a54:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a58:	e000      	b.n	8001a5c <ETH_SetMACConfig+0x30>
 8001a5a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001a5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	7c52      	ldrb	r2, [r2, #17]
 8001a62:	2a00      	cmp	r2, #0
 8001a64:	d102      	bne.n	8001a6c <ETH_SetMACConfig+0x40>
 8001a66:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001a6a:	e000      	b.n	8001a6e <ETH_SetMACConfig+0x42>
 8001a6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a6e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	7fdb      	ldrb	r3, [r3, #31]
 8001a7a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001a7c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001a82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	7f92      	ldrb	r2, [r2, #30]
 8001a88:	2a00      	cmp	r2, #0
 8001a8a:	d102      	bne.n	8001a92 <ETH_SetMACConfig+0x66>
 8001a8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a90:	e000      	b.n	8001a94 <ETH_SetMACConfig+0x68>
 8001a92:	2200      	movs	r2, #0
                        macconf->Speed |
 8001a94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	7f1b      	ldrb	r3, [r3, #28]
 8001a9a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a9c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001aa2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	791b      	ldrb	r3, [r3, #4]
 8001aa8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001aaa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ab2:	2a00      	cmp	r2, #0
 8001ab4:	d102      	bne.n	8001abc <ETH_SetMACConfig+0x90>
 8001ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aba:	e000      	b.n	8001abe <ETH_SetMACConfig+0x92>
 8001abc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001abe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	7bdb      	ldrb	r3, [r3, #15]
 8001ac4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ac6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001acc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ad4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff fa54 	bl	8000f9c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b12:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d101      	bne.n	8001b22 <ETH_SetMACConfig+0xf6>
 8001b1e:	2280      	movs	r2, #128	@ 0x80
 8001b20:	e000      	b.n	8001b24 <ETH_SetMACConfig+0xf8>
 8001b22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b24:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001b32:	2a01      	cmp	r2, #1
 8001b34:	d101      	bne.n	8001b3a <ETH_SetMACConfig+0x10e>
 8001b36:	2208      	movs	r2, #8
 8001b38:	e000      	b.n	8001b3c <ETH_SetMACConfig+0x110>
 8001b3a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001b3c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001b44:	2a01      	cmp	r2, #1
 8001b46:	d101      	bne.n	8001b4c <ETH_SetMACConfig+0x120>
 8001b48:	2204      	movs	r2, #4
 8001b4a:	e000      	b.n	8001b4e <ETH_SetMACConfig+0x122>
 8001b4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001b56:	2a01      	cmp	r2, #1
 8001b58:	d101      	bne.n	8001b5e <ETH_SetMACConfig+0x132>
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	e000      	b.n	8001b60 <ETH_SetMACConfig+0x134>
 8001b5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b60:	4313      	orrs	r3, r2
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f7ff fa0f 	bl	8000f9c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	619a      	str	r2, [r3, #24]
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	fd20810f 	.word	0xfd20810f

08001b94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca4 <ETH_SetDMAConfig+0x110>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	7b1b      	ldrb	r3, [r3, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <ETH_SetDMAConfig+0x2c>
 8001bba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001bbe:	e000      	b.n	8001bc2 <ETH_SetDMAConfig+0x2e>
 8001bc0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	7b5b      	ldrb	r3, [r3, #13]
 8001bc6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bc8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	7f52      	ldrb	r2, [r2, #29]
 8001bce:	2a00      	cmp	r2, #0
 8001bd0:	d102      	bne.n	8001bd8 <ETH_SetDMAConfig+0x44>
 8001bd2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001bd6:	e000      	b.n	8001bda <ETH_SetDMAConfig+0x46>
 8001bd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bda:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	7b9b      	ldrb	r3, [r3, #14]
 8001be0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001be2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001be8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	7f1b      	ldrb	r3, [r3, #28]
 8001bee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001bf0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	7f9b      	ldrb	r3, [r3, #30]
 8001bf6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001bf8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001bfe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c06:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff f9b6 	bl	8000f9c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	791b      	ldrb	r3, [r3, #4]
 8001c42:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c48:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c4e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c54:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c5c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c5e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c64:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c66:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c6c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c7a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f7ff f987 	bl	8000f9c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	f8de3f23 	.word	0xf8de3f23

08001ca8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0a6      	sub	sp, #152	@ 0x98
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cea:	2300      	movs	r3, #0
 8001cec:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d14:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fe7f 	bl	8001a2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d32:	2301      	movs	r3, #1
 8001d34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d62:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d64:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d68:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d6e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001d70:	2301      	movs	r3, #1
 8001d72:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	4619      	mov	r1, r3
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff05 	bl	8001b94 <ETH_SetDMAConfig>
}
 8001d8a:	bf00      	nop
 8001d8c:	3798      	adds	r7, #152	@ 0x98
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3305      	adds	r3, #5
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	3204      	adds	r2, #4
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <ETH_MACAddressConfig+0x68>)
 8001db6:	4413      	add	r3, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3303      	adds	r3, #3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	061a      	lsls	r2, r3, #24
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3302      	adds	r3, #2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	041b      	lsls	r3, r3, #16
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <ETH_MACAddressConfig+0x6c>)
 8001de6:	4413      	add	r3, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	6013      	str	r3, [r2, #0]
}
 8001dee:	bf00      	nop
 8001df0:	371c      	adds	r7, #28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40028040 	.word	0x40028040
 8001e00:	40028044 	.word	0x40028044

08001e04 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	e03e      	b.n	8001e90 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68d9      	ldr	r1, [r3, #12]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	3206      	adds	r2, #6
 8001e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d80c      	bhi.n	8001e74 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68d9      	ldr	r1, [r3, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	440b      	add	r3, r1
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	e004      	b.n	8001e7e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d9bd      	bls.n	8001e12 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea8:	611a      	str	r2, [r3, #16]
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b085      	sub	sp, #20
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e048      	b.n	8001f56 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6919      	ldr	r1, [r3, #16]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001f00:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	3212      	adds	r2, #18
 8001f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d80c      	bhi.n	8001f46 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6919      	ldr	r1, [r3, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	e004      	b.n	8001f50 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3301      	adds	r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d9b3      	bls.n	8001ec4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f86:	60da      	str	r2, [r3, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	@ 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e175      	b.n	80022a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f040 8164 	bne.w	800229a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d005      	beq.n	8001fea <HAL_GPIO_Init+0x56>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d130      	bne.n	800204c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002020:	2201      	movs	r2, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 0201 	and.w	r2, r3, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b03      	cmp	r3, #3
 8002056:	d017      	beq.n	8002088 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d123      	bne.n	80020dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	220f      	movs	r2, #15
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3208      	adds	r2, #8
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0203 	and.w	r2, r3, #3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80be 	beq.w	800229a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	4b66      	ldr	r3, [pc, #408]	@ (80022b8 <HAL_GPIO_Init+0x324>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	4a65      	ldr	r2, [pc, #404]	@ (80022b8 <HAL_GPIO_Init+0x324>)
 8002124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002128:	6453      	str	r3, [r2, #68]	@ 0x44
 800212a:	4b63      	ldr	r3, [pc, #396]	@ (80022b8 <HAL_GPIO_Init+0x324>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002136:	4a61      	ldr	r2, [pc, #388]	@ (80022bc <HAL_GPIO_Init+0x328>)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	3302      	adds	r3, #2
 800213e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	220f      	movs	r2, #15
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a58      	ldr	r2, [pc, #352]	@ (80022c0 <HAL_GPIO_Init+0x32c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d037      	beq.n	80021d2 <HAL_GPIO_Init+0x23e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a57      	ldr	r2, [pc, #348]	@ (80022c4 <HAL_GPIO_Init+0x330>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d031      	beq.n	80021ce <HAL_GPIO_Init+0x23a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a56      	ldr	r2, [pc, #344]	@ (80022c8 <HAL_GPIO_Init+0x334>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d02b      	beq.n	80021ca <HAL_GPIO_Init+0x236>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a55      	ldr	r2, [pc, #340]	@ (80022cc <HAL_GPIO_Init+0x338>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d025      	beq.n	80021c6 <HAL_GPIO_Init+0x232>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a54      	ldr	r2, [pc, #336]	@ (80022d0 <HAL_GPIO_Init+0x33c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01f      	beq.n	80021c2 <HAL_GPIO_Init+0x22e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a53      	ldr	r2, [pc, #332]	@ (80022d4 <HAL_GPIO_Init+0x340>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d019      	beq.n	80021be <HAL_GPIO_Init+0x22a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a52      	ldr	r2, [pc, #328]	@ (80022d8 <HAL_GPIO_Init+0x344>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0x226>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a51      	ldr	r2, [pc, #324]	@ (80022dc <HAL_GPIO_Init+0x348>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00d      	beq.n	80021b6 <HAL_GPIO_Init+0x222>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a50      	ldr	r2, [pc, #320]	@ (80022e0 <HAL_GPIO_Init+0x34c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x21e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4f      	ldr	r2, [pc, #316]	@ (80022e4 <HAL_GPIO_Init+0x350>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_GPIO_Init+0x21a>
 80021aa:	2309      	movs	r3, #9
 80021ac:	e012      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021ae:	230a      	movs	r3, #10
 80021b0:	e010      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021b2:	2308      	movs	r3, #8
 80021b4:	e00e      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021b6:	2307      	movs	r3, #7
 80021b8:	e00c      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021ba:	2306      	movs	r3, #6
 80021bc:	e00a      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021be:	2305      	movs	r3, #5
 80021c0:	e008      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021c2:	2304      	movs	r3, #4
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e004      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x240>
 80021d2:	2300      	movs	r3, #0
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	f002 0203 	and.w	r2, r2, #3
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	4093      	lsls	r3, r2
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021e4:	4935      	ldr	r1, [pc, #212]	@ (80022bc <HAL_GPIO_Init+0x328>)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f2:	4b3d      	ldr	r3, [pc, #244]	@ (80022e8 <HAL_GPIO_Init+0x354>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002216:	4a34      	ldr	r2, [pc, #208]	@ (80022e8 <HAL_GPIO_Init+0x354>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800221c:	4b32      	ldr	r3, [pc, #200]	@ (80022e8 <HAL_GPIO_Init+0x354>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002240:	4a29      	ldr	r2, [pc, #164]	@ (80022e8 <HAL_GPIO_Init+0x354>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002246:	4b28      	ldr	r3, [pc, #160]	@ (80022e8 <HAL_GPIO_Init+0x354>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226a:	4a1f      	ldr	r2, [pc, #124]	@ (80022e8 <HAL_GPIO_Init+0x354>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002270:	4b1d      	ldr	r3, [pc, #116]	@ (80022e8 <HAL_GPIO_Init+0x354>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002294:	4a14      	ldr	r2, [pc, #80]	@ (80022e8 <HAL_GPIO_Init+0x354>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3301      	adds	r3, #1
 800229e:	61fb      	str	r3, [r7, #28]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	2b0f      	cmp	r3, #15
 80022a4:	f67f ae86 	bls.w	8001fb4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3724      	adds	r7, #36	@ 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40013800 	.word	0x40013800
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020c00 	.word	0x40020c00
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40021400 	.word	0x40021400
 80022d8:	40021800 	.word	0x40021800
 80022dc:	40021c00 	.word	0x40021c00
 80022e0:	40022000 	.word	0x40022000
 80022e4:	40022400 	.word	0x40022400
 80022e8:	40013c00 	.word	0x40013c00

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002308:	e003      	b.n	8002312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af02      	add	r7, sp, #8
 8002324:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e108      	b.n	8002542 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe fcd0 	bl	8000cf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2203      	movs	r2, #3
 8002354:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800235e:	d102      	bne.n	8002366 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f002 fa9c 	bl	80048a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7c1a      	ldrb	r2, [r3, #16]
 8002378:	f88d 2000 	strb.w	r2, [sp]
 800237c:	3304      	adds	r3, #4
 800237e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002380:	f002 fa38 	bl	80047f4 <USB_CoreInit>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0d5      	b.n	8002542 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f002 fa94 	bl	80048ca <USB_SetCurrentMode>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0c6      	b.n	8002542 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e04a      	b.n	8002450 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	3315      	adds	r3, #21
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3314      	adds	r3, #20
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	b298      	uxth	r0, r3
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	332e      	adds	r3, #46	@ 0x2e
 80023f6:	4602      	mov	r2, r0
 80023f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	3318      	adds	r3, #24
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	331c      	adds	r3, #28
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3320      	adds	r3, #32
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	3324      	adds	r3, #36	@ 0x24
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	3301      	adds	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	791b      	ldrb	r3, [r3, #4]
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	429a      	cmp	r2, r3
 8002458:	d3af      	bcc.n	80023ba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e044      	b.n	80024ea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	3301      	adds	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	791b      	ldrb	r3, [r3, #4]
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d3b5      	bcc.n	8002460 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7c1a      	ldrb	r2, [r3, #16]
 80024fc:	f88d 2000 	strb.w	r2, [sp]
 8002500:	3304      	adds	r3, #4
 8002502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002504:	f002 fa2e 	bl	8004964 <USB_DevInit>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2202      	movs	r2, #2
 8002512:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e013      	b.n	8002542 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7b1b      	ldrb	r3, [r3, #12]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d102      	bne.n	8002536 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f80b 	bl	800254c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f002 fbe9 	bl	8004d12 <USB_DevDisconnect>

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800257a:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <HAL_PCDEx_ActivateLPM+0x44>)
 800257c:	4313      	orrs	r3, r2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	10000003 	.word	0x10000003

08002594 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002598:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a04      	ldr	r2, [pc, #16]	@ (80025b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800259e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40007000 	.word	0x40007000

080025b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	4b23      	ldr	r3, [pc, #140]	@ (800264c <HAL_PWREx_EnableOverDrive+0x98>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	4a22      	ldr	r2, [pc, #136]	@ (800264c <HAL_PWREx_EnableOverDrive+0x98>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ca:	4b20      	ldr	r3, [pc, #128]	@ (800264c <HAL_PWREx_EnableOverDrive+0x98>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a1d      	ldr	r2, [pc, #116]	@ (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e2:	f7fe fccf 	bl	8000f84 <HAL_GetTick>
 80025e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025e8:	e009      	b.n	80025fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025ea:	f7fe fccb 	bl	8000f84 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025f8:	d901      	bls.n	80025fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e022      	b.n	8002644 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025fe:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260a:	d1ee      	bne.n	80025ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800260c:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0f      	ldr	r2, [pc, #60]	@ (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002616:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002618:	f7fe fcb4 	bl	8000f84 <HAL_GetTick>
 800261c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800261e:	e009      	b.n	8002634 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002620:	f7fe fcb0 	bl	8000f84 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800262e:	d901      	bls.n	8002634 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e007      	b.n	8002644 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002634:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002640:	d1ee      	bne.n	8002620 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	40007000 	.word	0x40007000

08002654 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800265c:	2300      	movs	r3, #0
 800265e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e29b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8087 	beq.w	8002786 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002678:	4b96      	ldr	r3, [pc, #600]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b04      	cmp	r3, #4
 8002682:	d00c      	beq.n	800269e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002684:	4b93      	ldr	r3, [pc, #588]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d112      	bne.n	80026b6 <HAL_RCC_OscConfig+0x62>
 8002690:	4b90      	ldr	r3, [pc, #576]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800269c:	d10b      	bne.n	80026b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269e:	4b8d      	ldr	r3, [pc, #564]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d06c      	beq.n	8002784 <HAL_RCC_OscConfig+0x130>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d168      	bne.n	8002784 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e275      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x7a>
 80026c0:	4b84      	ldr	r3, [pc, #528]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a83      	ldr	r2, [pc, #524]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	e02e      	b.n	800272c <HAL_RCC_OscConfig+0xd8>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x9c>
 80026d6:	4b7f      	ldr	r3, [pc, #508]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7e      	ldr	r2, [pc, #504]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b7c      	ldr	r3, [pc, #496]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a7b      	ldr	r2, [pc, #492]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e01d      	b.n	800272c <HAL_RCC_OscConfig+0xd8>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0xc0>
 80026fa:	4b76      	ldr	r3, [pc, #472]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a75      	ldr	r2, [pc, #468]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b73      	ldr	r3, [pc, #460]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a72      	ldr	r2, [pc, #456]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0xd8>
 8002714:	4b6f      	ldr	r3, [pc, #444]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a6e      	ldr	r2, [pc, #440]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800271a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b6c      	ldr	r3, [pc, #432]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a6b      	ldr	r2, [pc, #428]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800272a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7fe fc26 	bl	8000f84 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800273c:	f7fe fc22 	bl	8000f84 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	@ 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e229      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b61      	ldr	r3, [pc, #388]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0xe8>
 800275a:	e014      	b.n	8002786 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fc12 	bl	8000f84 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002764:	f7fe fc0e 	bl	8000f84 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	@ 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e215      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	4b57      	ldr	r3, [pc, #348]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x110>
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d069      	beq.n	8002866 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002792:	4b50      	ldr	r3, [pc, #320]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279e:	4b4d      	ldr	r3, [pc, #308]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d11c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x190>
 80027aa:	4b4a      	ldr	r3, [pc, #296]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d116      	bne.n	80027e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	4b47      	ldr	r3, [pc, #284]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x17a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e1e9      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b41      	ldr	r3, [pc, #260]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	493d      	ldr	r1, [pc, #244]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	e040      	b.n	8002866 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d023      	beq.n	8002834 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ec:	4b39      	ldr	r3, [pc, #228]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a38      	ldr	r2, [pc, #224]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fbc4 	bl	8000f84 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002800:	f7fe fbc0 	bl	8000f84 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1c7      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b30      	ldr	r3, [pc, #192]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b2d      	ldr	r3, [pc, #180]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4929      	ldr	r1, [pc, #164]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
 8002832:	e018      	b.n	8002866 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002834:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a26      	ldr	r2, [pc, #152]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fba0 	bl	8000f84 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002848:	f7fe fb9c 	bl	8000f84 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1a3      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	4b1e      	ldr	r3, [pc, #120]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d038      	beq.n	80028e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d019      	beq.n	80028ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287a:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 800287c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287e:	4a15      	ldr	r2, [pc, #84]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fb7d 	bl	8000f84 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288e:	f7fe fb79 	bl	8000f84 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e180      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a0:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80028a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x23a>
 80028ac:	e01a      	b.n	80028e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ae:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80028b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b2:	4a08      	ldr	r2, [pc, #32]	@ (80028d4 <HAL_RCC_OscConfig+0x280>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7fe fb63 	bl	8000f84 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c2:	f7fe fb5f 	bl	8000f84 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d903      	bls.n	80028d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e166      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
 80028d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b92      	ldr	r3, [pc, #584]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80028da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ee      	bne.n	80028c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a4 	beq.w	8002a3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f2:	4b8c      	ldr	r3, [pc, #560]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10d      	bne.n	800291a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	4b89      	ldr	r3, [pc, #548]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	4a88      	ldr	r2, [pc, #544]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002908:	6413      	str	r3, [r2, #64]	@ 0x40
 800290a:	4b86      	ldr	r3, [pc, #536]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800291a:	4b83      	ldr	r3, [pc, #524]	@ (8002b28 <HAL_RCC_OscConfig+0x4d4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002926:	4b80      	ldr	r3, [pc, #512]	@ (8002b28 <HAL_RCC_OscConfig+0x4d4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a7f      	ldr	r2, [pc, #508]	@ (8002b28 <HAL_RCC_OscConfig+0x4d4>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7fe fb27 	bl	8000f84 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7fe fb23 	bl	8000f84 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	@ 0x64
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e12a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294c:	4b76      	ldr	r3, [pc, #472]	@ (8002b28 <HAL_RCC_OscConfig+0x4d4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x31a>
 8002960:	4b70      	ldr	r3, [pc, #448]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002964:	4a6f      	ldr	r2, [pc, #444]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6713      	str	r3, [r2, #112]	@ 0x70
 800296c:	e02d      	b.n	80029ca <HAL_RCC_OscConfig+0x376>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x33c>
 8002976:	4b6b      	ldr	r3, [pc, #428]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	4a6a      	ldr	r2, [pc, #424]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	@ 0x70
 8002982:	4b68      	ldr	r3, [pc, #416]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	4a67      	ldr	r2, [pc, #412]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6713      	str	r3, [r2, #112]	@ 0x70
 800298e:	e01c      	b.n	80029ca <HAL_RCC_OscConfig+0x376>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d10c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x35e>
 8002998:	4b62      	ldr	r3, [pc, #392]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a61      	ldr	r2, [pc, #388]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	4a5e      	ldr	r2, [pc, #376]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b0:	e00b      	b.n	80029ca <HAL_RCC_OscConfig+0x376>
 80029b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029be:	4b59      	ldr	r3, [pc, #356]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c2:	4a58      	ldr	r2, [pc, #352]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7fe fad7 	bl	8000f84 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7fe fad3 	bl	8000f84 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e0d8      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ee      	beq.n	80029da <HAL_RCC_OscConfig+0x386>
 80029fc:	e014      	b.n	8002a28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe fac1 	bl	8000f84 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe fabd 	bl	8000f84 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0c2      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	4b41      	ldr	r3, [pc, #260]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	4a3c      	ldr	r2, [pc, #240]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80ae 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a44:	4b37      	ldr	r3, [pc, #220]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d06d      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d14b      	bne.n	8002af0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a58:	4b32      	ldr	r3, [pc, #200]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a31      	ldr	r2, [pc, #196]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fa8e 	bl	8000f84 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe fa8a 	bl	8000f84 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e091      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	4b29      	ldr	r3, [pc, #164]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	019b      	lsls	r3, r3, #6
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa0:	085b      	lsrs	r3, r3, #1
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	041b      	lsls	r3, r3, #16
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab4:	071b      	lsls	r3, r3, #28
 8002ab6:	491b      	ldr	r1, [pc, #108]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a18      	ldr	r2, [pc, #96]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fa5c 	bl	8000f84 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fa58 	bl	8000f84 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e05f      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae2:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x47c>
 8002aee:	e057      	b.n	8002ba0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0b      	ldr	r2, [pc, #44]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002af6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fa42 	bl	8000f84 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe fa3e 	bl	8000f84 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e045      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	4b03      	ldr	r3, [pc, #12]	@ (8002b24 <HAL_RCC_OscConfig+0x4d0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4b0>
 8002b22:	e03d      	b.n	8002ba0 <HAL_RCC_OscConfig+0x54c>
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bac <HAL_RCC_OscConfig+0x558>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d030      	beq.n	8002b9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d129      	bne.n	8002b9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d122      	bne.n	8002b9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d119      	bne.n	8002b9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	3b01      	subs	r3, #1
 8002b76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d10f      	bne.n	8002b9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d107      	bne.n	8002b9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800

08002bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0d0      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d910      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b67      	ldr	r3, [pc, #412]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 020f 	bic.w	r2, r3, #15
 8002bde:	4965      	ldr	r1, [pc, #404]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b63      	ldr	r3, [pc, #396]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b8      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c10:	4b59      	ldr	r3, [pc, #356]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a58      	ldr	r2, [pc, #352]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c28:	4b53      	ldr	r3, [pc, #332]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4b50      	ldr	r3, [pc, #320]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	494d      	ldr	r1, [pc, #308]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d040      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b47      	ldr	r3, [pc, #284]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d115      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c72:	4b41      	ldr	r3, [pc, #260]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e073      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c82:	4b3d      	ldr	r3, [pc, #244]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06b      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c92:	4b39      	ldr	r3, [pc, #228]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f023 0203 	bic.w	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4936      	ldr	r1, [pc, #216]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca4:	f7fe f96e 	bl	8000f84 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cac:	f7fe f96a 	bl	8000f84 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e053      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 020c 	and.w	r2, r3, #12
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d1eb      	bne.n	8002cac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b27      	ldr	r3, [pc, #156]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d210      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b24      	ldr	r3, [pc, #144]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 020f 	bic.w	r2, r3, #15
 8002cea:	4922      	ldr	r1, [pc, #136]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b20      	ldr	r3, [pc, #128]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e032      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d10:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4916      	ldr	r1, [pc, #88]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d2e:	4b12      	ldr	r3, [pc, #72]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	490e      	ldr	r1, [pc, #56]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d42:	f000 f821 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002d46:	4602      	mov	r2, r0
 8002d48:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	490a      	ldr	r1, [pc, #40]	@ (8002d7c <HAL_RCC_ClockConfig+0x1cc>)
 8002d54:	5ccb      	ldrb	r3, [r1, r3]
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	4a09      	ldr	r2, [pc, #36]	@ (8002d80 <HAL_RCC_ClockConfig+0x1d0>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d5e:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <HAL_RCC_ClockConfig+0x1d4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe f8ca 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40023c00 	.word	0x40023c00
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	08004e44 	.word	0x08004e44
 8002d80:	20000000 	.word	0x20000000
 8002d84:	20000004 	.word	0x20000004

08002d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d8c:	b094      	sub	sp, #80	@ 0x50
 8002d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d94:	2300      	movs	r3, #0
 8002d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d98:	2300      	movs	r3, #0
 8002d9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da0:	4b79      	ldr	r3, [pc, #484]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d00d      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	f200 80e1 	bhi.w	8002f74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x34>
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dba:	e0db      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dbc:	4b73      	ldr	r3, [pc, #460]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dc0:	e0db      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dc2:	4b73      	ldr	r3, [pc, #460]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dc6:	e0d8      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d063      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dde:	4b6a      	ldr	r3, [pc, #424]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	099b      	lsrs	r3, r3, #6
 8002de4:	2200      	movs	r2, #0
 8002de6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002de8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002df2:	2300      	movs	r3, #0
 8002df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002df6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	f04f 0000 	mov.w	r0, #0
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	0159      	lsls	r1, r3, #5
 8002e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0c:	0150      	lsls	r0, r2, #5
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4621      	mov	r1, r4
 8002e14:	1a51      	subs	r1, r2, r1
 8002e16:	6139      	str	r1, [r7, #16]
 8002e18:	4629      	mov	r1, r5
 8002e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	018b      	lsls	r3, r1, #6
 8002e30:	4651      	mov	r1, sl
 8002e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e36:	4651      	mov	r1, sl
 8002e38:	018a      	lsls	r2, r1, #6
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	ebb2 0801 	subs.w	r8, r2, r1
 8002e40:	4659      	mov	r1, fp
 8002e42:	eb63 0901 	sbc.w	r9, r3, r1
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e5a:	4690      	mov	r8, r2
 8002e5c:	4699      	mov	r9, r3
 8002e5e:	4623      	mov	r3, r4
 8002e60:	eb18 0303 	adds.w	r3, r8, r3
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	462b      	mov	r3, r5
 8002e68:	eb49 0303 	adc.w	r3, r9, r3
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	024b      	lsls	r3, r1, #9
 8002e7e:	4621      	mov	r1, r4
 8002e80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e84:	4621      	mov	r1, r4
 8002e86:	024a      	lsls	r2, r1, #9
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e8e:	2200      	movs	r2, #0
 8002e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e98:	f7fd f9ce 	bl	8000238 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ea4:	e058      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea6:	4b38      	ldr	r3, [pc, #224]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	2200      	movs	r2, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ebc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	f04f 0000 	mov.w	r0, #0
 8002ec8:	f04f 0100 	mov.w	r1, #0
 8002ecc:	0159      	lsls	r1, r3, #5
 8002ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed2:	0150      	lsls	r0, r2, #5
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ede:	4649      	mov	r1, r9
 8002ee0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ef0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ef4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ef8:	ebb2 040a 	subs.w	r4, r2, sl
 8002efc:	eb63 050b 	sbc.w	r5, r3, fp
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	00eb      	lsls	r3, r5, #3
 8002f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f0e:	00e2      	lsls	r2, r4, #3
 8002f10:	4614      	mov	r4, r2
 8002f12:	461d      	mov	r5, r3
 8002f14:	4643      	mov	r3, r8
 8002f16:	18e3      	adds	r3, r4, r3
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	eb45 0303 	adc.w	r3, r5, r3
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f2e:	4629      	mov	r1, r5
 8002f30:	028b      	lsls	r3, r1, #10
 8002f32:	4621      	mov	r1, r4
 8002f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f38:	4621      	mov	r1, r4
 8002f3a:	028a      	lsls	r2, r1, #10
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f42:	2200      	movs	r2, #0
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	61fa      	str	r2, [r7, #28]
 8002f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f4c:	f7fd f974 	bl	8000238 <__aeabi_uldivmod>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4613      	mov	r3, r2
 8002f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	0c1b      	lsrs	r3, r3, #16
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	3301      	adds	r3, #1
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f72:	e002      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f74:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3750      	adds	r7, #80	@ 0x50
 8002f80:	46bd      	mov	sp, r7
 8002f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f86:	bf00      	nop
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	00f42400 	.word	0x00f42400
 8002f90:	007a1200 	.word	0x007a1200

08002f94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f98:	4b03      	ldr	r3, [pc, #12]	@ (8002fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000000 	.word	0x20000000

08002fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb0:	f7ff fff0 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	0a9b      	lsrs	r3, r3, #10
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4903      	ldr	r1, [pc, #12]	@ (8002fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	08004e54 	.word	0x08004e54

08002fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fd8:	f7ff ffdc 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	0b5b      	lsrs	r3, r3, #13
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	4903      	ldr	r1, [pc, #12]	@ (8002ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	08004e54 	.word	0x08004e54

08002ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d012      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003024:	4b69      	ldr	r3, [pc, #420]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a68      	ldr	r2, [pc, #416]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800302e:	6093      	str	r3, [r2, #8]
 8003030:	4b66      	ldr	r3, [pc, #408]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003038:	4964      	ldr	r1, [pc, #400]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003046:	2301      	movs	r3, #1
 8003048:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d017      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003056:	4b5d      	ldr	r3, [pc, #372]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800305c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003064:	4959      	ldr	r1, [pc, #356]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003070:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003074:	d101      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003076:	2301      	movs	r3, #1
 8003078:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003082:	2301      	movs	r3, #1
 8003084:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d017      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003092:	4b4e      	ldr	r3, [pc, #312]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003098:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	494a      	ldr	r1, [pc, #296]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030b0:	d101      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80030b2:	2301      	movs	r3, #1
 80030b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80030be:	2301      	movs	r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 808b 	beq.w	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	4b3a      	ldr	r3, [pc, #232]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	4a39      	ldr	r2, [pc, #228]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ec:	4b37      	ldr	r3, [pc, #220]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030f8:	4b35      	ldr	r3, [pc, #212]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a34      	ldr	r2, [pc, #208]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003104:	f7fd ff3e 	bl	8000f84 <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7fd ff3a 	bl	8000f84 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	@ 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e38f      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800311e:	4b2c      	ldr	r3, [pc, #176]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800312a:	4b28      	ldr	r3, [pc, #160]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003132:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d035      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	429a      	cmp	r2, r3
 8003146:	d02e      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003148:	4b20      	ldr	r3, [pc, #128]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003150:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003152:	4b1e      	ldr	r3, [pc, #120]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003156:	4a1d      	ldr	r2, [pc, #116]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800315c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800315e:	4b1b      	ldr	r3, [pc, #108]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003162:	4a1a      	ldr	r2, [pc, #104]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003164:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003168:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800316a:	4a18      	ldr	r2, [pc, #96]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003170:	4b16      	ldr	r3, [pc, #88]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d114      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fd ff02 	bl	8000f84 <HAL_GetTick>
 8003180:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003182:	e00a      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fd fefe 	bl	8000f84 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e351      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319a:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0ee      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031b2:	d111      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80031b4:	4b05      	ldr	r3, [pc, #20]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031c0:	4b04      	ldr	r3, [pc, #16]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031c2:	400b      	ands	r3, r1
 80031c4:	4901      	ldr	r1, [pc, #4]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40007000 	.word	0x40007000
 80031d4:	0ffffcff 	.word	0x0ffffcff
 80031d8:	4bac      	ldr	r3, [pc, #688]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4aab      	ldr	r2, [pc, #684]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031de:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80031e2:	6093      	str	r3, [r2, #8]
 80031e4:	4ba9      	ldr	r3, [pc, #676]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f0:	49a6      	ldr	r1, [pc, #664]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d010      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003202:	4ba2      	ldr	r3, [pc, #648]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003208:	4aa0      	ldr	r2, [pc, #640]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800320e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003212:	4b9e      	ldr	r3, [pc, #632]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003214:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321c:	499b      	ldr	r1, [pc, #620]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003230:	4b96      	ldr	r3, [pc, #600]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003236:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800323e:	4993      	ldr	r1, [pc, #588]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003252:	4b8e      	ldr	r3, [pc, #568]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003258:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003260:	498a      	ldr	r1, [pc, #552]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003274:	4b85      	ldr	r3, [pc, #532]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003282:	4982      	ldr	r1, [pc, #520]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003296:	4b7d      	ldr	r3, [pc, #500]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a4:	4979      	ldr	r1, [pc, #484]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032b8:	4b74      	ldr	r3, [pc, #464]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c6:	4971      	ldr	r1, [pc, #452]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032da:	4b6c      	ldr	r3, [pc, #432]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e0:	f023 020c 	bic.w	r2, r3, #12
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e8:	4968      	ldr	r1, [pc, #416]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032fc:	4b63      	ldr	r3, [pc, #396]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003302:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330a:	4960      	ldr	r1, [pc, #384]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800331e:	4b5b      	ldr	r3, [pc, #364]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003324:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332c:	4957      	ldr	r1, [pc, #348]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003340:	4b52      	ldr	r3, [pc, #328]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003346:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334e:	494f      	ldr	r1, [pc, #316]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003362:	4b4a      	ldr	r3, [pc, #296]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003368:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003370:	4946      	ldr	r1, [pc, #280]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003384:	4b41      	ldr	r3, [pc, #260]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003392:	493e      	ldr	r1, [pc, #248]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033a6:	4b39      	ldr	r3, [pc, #228]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b4:	4935      	ldr	r1, [pc, #212]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033c8:	4b30      	ldr	r3, [pc, #192]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033d6:	492d      	ldr	r1, [pc, #180]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d011      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033ea:	4b28      	ldr	r3, [pc, #160]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033f8:	4924      	ldr	r1, [pc, #144]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003404:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003408:	d101      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800340a:	2301      	movs	r3, #1
 800340c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800341a:	2301      	movs	r3, #1
 800341c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800342a:	4b18      	ldr	r3, [pc, #96]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003430:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003438:	4914      	ldr	r1, [pc, #80]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800344c:	4b0f      	ldr	r3, [pc, #60]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003452:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800345c:	490b      	ldr	r1, [pc, #44]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00f      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003476:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003480:	4902      	ldr	r1, [pc, #8]	@ (800348c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003488:	e002      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00b      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800349c:	4b8a      	ldr	r3, [pc, #552]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800349e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ac:	4986      	ldr	r1, [pc, #536]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00b      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80034c0:	4b81      	ldr	r3, [pc, #516]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034c6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034d0:	497d      	ldr	r1, [pc, #500]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d006      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80d6 	beq.w	8003698 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034ec:	4b76      	ldr	r3, [pc, #472]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a75      	ldr	r2, [pc, #468]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f8:	f7fd fd44 	bl	8000f84 <HAL_GetTick>
 80034fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003500:	f7fd fd40 	bl	8000f84 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	@ 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e195      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003512:	4b6d      	ldr	r3, [pc, #436]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d021      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003532:	4b65      	ldr	r3, [pc, #404]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003540:	4b61      	ldr	r3, [pc, #388]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003546:	0e1b      	lsrs	r3, r3, #24
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	019a      	lsls	r2, r3, #6
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	041b      	lsls	r3, r3, #16
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	061b      	lsls	r3, r3, #24
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	071b      	lsls	r3, r3, #28
 8003566:	4958      	ldr	r1, [pc, #352]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800358c:	2b00      	cmp	r3, #0
 800358e:	d02e      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003598:	d129      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800359a:	4b4b      	ldr	r3, [pc, #300]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800359c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035a0:	0c1b      	lsrs	r3, r3, #16
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035a8:	4b47      	ldr	r3, [pc, #284]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ae:	0f1b      	lsrs	r3, r3, #28
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	019a      	lsls	r2, r3, #6
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	041b      	lsls	r3, r3, #16
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	061b      	lsls	r3, r3, #24
 80035c8:	431a      	orrs	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	071b      	lsls	r3, r3, #28
 80035ce:	493e      	ldr	r1, [pc, #248]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035d6:	4b3c      	ldr	r3, [pc, #240]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035dc:	f023 021f 	bic.w	r2, r3, #31
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	3b01      	subs	r3, #1
 80035e6:	4938      	ldr	r1, [pc, #224]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01d      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035fa:	4b33      	ldr	r3, [pc, #204]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003600:	0e1b      	lsrs	r3, r3, #24
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003608:	4b2f      	ldr	r3, [pc, #188]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800360a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800360e:	0f1b      	lsrs	r3, r3, #28
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	019a      	lsls	r2, r3, #6
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	041b      	lsls	r3, r3, #16
 8003622:	431a      	orrs	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	431a      	orrs	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	071b      	lsls	r3, r3, #28
 800362e:	4926      	ldr	r1, [pc, #152]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d011      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	019a      	lsls	r2, r3, #6
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	041b      	lsls	r3, r3, #16
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	071b      	lsls	r3, r3, #28
 800365e:	491a      	ldr	r1, [pc, #104]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003666:	4b18      	ldr	r3, [pc, #96]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a17      	ldr	r2, [pc, #92]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800366c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003672:	f7fd fc87 	bl	8000f84 <HAL_GetTick>
 8003676:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800367a:	f7fd fc83 	bl	8000f84 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b64      	cmp	r3, #100	@ 0x64
 8003686:	d901      	bls.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e0d8      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800368c:	4b0e      	ldr	r3, [pc, #56]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b01      	cmp	r3, #1
 800369c:	f040 80ce 	bne.w	800383c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036a0:	4b09      	ldr	r3, [pc, #36]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a08      	ldr	r2, [pc, #32]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ac:	f7fd fc6a 	bl	8000f84 <HAL_GetTick>
 80036b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036b2:	e00b      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036b4:	f7fd fc66 	bl	8000f84 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	@ 0x64
 80036c0:	d904      	bls.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0bb      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036d8:	d0ec      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d02e      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d12a      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003702:	4b51      	ldr	r3, [pc, #324]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003710:	4b4d      	ldr	r3, [pc, #308]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003716:	0f1b      	lsrs	r3, r3, #28
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	019a      	lsls	r2, r3, #6
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	071b      	lsls	r3, r3, #28
 8003736:	4944      	ldr	r1, [pc, #272]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800373e:	4b42      	ldr	r3, [pc, #264]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003744:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374c:	3b01      	subs	r3, #1
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	493d      	ldr	r1, [pc, #244]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d022      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800376c:	d11d      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800376e:	4b36      	ldr	r3, [pc, #216]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003774:	0e1b      	lsrs	r3, r3, #24
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800377c:	4b32      	ldr	r3, [pc, #200]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003782:	0f1b      	lsrs	r3, r3, #28
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	019a      	lsls	r2, r3, #6
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	041b      	lsls	r3, r3, #16
 8003796:	431a      	orrs	r2, r3
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	061b      	lsls	r3, r3, #24
 800379c:	431a      	orrs	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	071b      	lsls	r3, r3, #28
 80037a2:	4929      	ldr	r1, [pc, #164]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d028      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037b6:	4b24      	ldr	r3, [pc, #144]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037bc:	0e1b      	lsrs	r3, r3, #24
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037c4:	4b20      	ldr	r3, [pc, #128]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	019a      	lsls	r2, r3, #6
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	041b      	lsls	r3, r3, #16
 80037dc:	431a      	orrs	r2, r3
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	061b      	lsls	r3, r3, #24
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	071b      	lsls	r3, r3, #28
 80037ea:	4917      	ldr	r1, [pc, #92]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037f2:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	4911      	ldr	r1, [pc, #68]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003808:	4b0f      	ldr	r3, [pc, #60]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0e      	ldr	r2, [pc, #56]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800380e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003814:	f7fd fbb6 	bl	8000f84 <HAL_GetTick>
 8003818:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800381c:	f7fd fbb2 	bl	8000f84 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	@ 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e007      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800382e:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800383a:	d1ef      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800

0800384c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e040      	b.n	80038e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd f97a 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	@ 0x24
 8003878:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fb80 	bl	8003f98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f919 	bl	8003ad0 <UART_SetConfig>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e01b      	b.n	80038e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fbff 	bl	80040dc <UART_CheckIdleState>
 80038de:	4603      	mov	r3, r0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	@ 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d165      	bne.n	80039ca <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_UART_Transmit_DMA+0x22>
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e05e      	b.n	80039cc <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	88fa      	ldrh	r2, [r7, #6]
 8003918:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2221      	movs	r2, #33	@ 0x21
 8003930:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	2b00      	cmp	r3, #0
 8003938:	d027      	beq.n	800398a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393e:	4a25      	ldr	r2, [pc, #148]	@ (80039d4 <HAL_UART_Transmit_DMA+0xec>)
 8003940:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003946:	4a24      	ldr	r2, [pc, #144]	@ (80039d8 <HAL_UART_Transmit_DMA+0xf0>)
 8003948:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394e:	4a23      	ldr	r2, [pc, #140]	@ (80039dc <HAL_UART_Transmit_DMA+0xf4>)
 8003950:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	2200      	movs	r2, #0
 8003958:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003962:	4619      	mov	r1, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3328      	adds	r3, #40	@ 0x28
 800396a:	461a      	mov	r2, r3
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	f7fd fcf9 	bl	8001364 <HAL_DMA_Start_IT>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2210      	movs	r2, #16
 800397c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e020      	b.n	80039cc <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2240      	movs	r2, #64	@ 0x40
 8003990:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3308      	adds	r3, #8
 8003998:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	613b      	str	r3, [r7, #16]
   return(result);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3308      	adds	r3, #8
 80039b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b2:	623a      	str	r2, [r7, #32]
 80039b4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	69f9      	ldr	r1, [r7, #28]
 80039b8:	6a3a      	ldr	r2, [r7, #32]
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	61bb      	str	r3, [r7, #24]
   return(result);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e5      	bne.n	8003992 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	e000      	b.n	80039cc <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80039ca:	2302      	movs	r3, #2
  }
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3728      	adds	r7, #40	@ 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	0800455d 	.word	0x0800455d
 80039d8:	080045f3 	.word	0x080045f3
 80039dc:	08004775 	.word	0x08004775

080039e0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	@ 0x28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d132      	bne.n	8003a5e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_UART_Receive_DMA+0x24>
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e02b      	b.n	8003a60 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d018      	beq.n	8003a4e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	613b      	str	r3, [r7, #16]
   return(result);
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	623b      	str	r3, [r7, #32]
 8003a3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	69f9      	ldr	r1, [r7, #28]
 8003a40:	6a3a      	ldr	r2, [r7, #32]
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e6      	bne.n	8003a1c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	461a      	mov	r2, r3
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 fc57 	bl	8004308 <UART_Start_Receive_DMA>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	e000      	b.n	8003a60 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3728      	adds	r7, #40	@ 0x28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4ba6      	ldr	r3, [pc, #664]	@ (8003d94 <UART_SetConfig+0x2c4>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	6979      	ldr	r1, [r7, #20]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a94      	ldr	r2, [pc, #592]	@ (8003d98 <UART_SetConfig+0x2c8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d120      	bne.n	8003b8e <UART_SetConfig+0xbe>
 8003b4c:	4b93      	ldr	r3, [pc, #588]	@ (8003d9c <UART_SetConfig+0x2cc>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d816      	bhi.n	8003b88 <UART_SetConfig+0xb8>
 8003b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <UART_SetConfig+0x90>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b71 	.word	0x08003b71
 8003b64:	08003b7d 	.word	0x08003b7d
 8003b68:	08003b77 	.word	0x08003b77
 8003b6c:	08003b83 	.word	0x08003b83
 8003b70:	2301      	movs	r3, #1
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e150      	b.n	8003e18 <UART_SetConfig+0x348>
 8003b76:	2302      	movs	r3, #2
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	e14d      	b.n	8003e18 <UART_SetConfig+0x348>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	e14a      	b.n	8003e18 <UART_SetConfig+0x348>
 8003b82:	2308      	movs	r3, #8
 8003b84:	77fb      	strb	r3, [r7, #31]
 8003b86:	e147      	b.n	8003e18 <UART_SetConfig+0x348>
 8003b88:	2310      	movs	r3, #16
 8003b8a:	77fb      	strb	r3, [r7, #31]
 8003b8c:	e144      	b.n	8003e18 <UART_SetConfig+0x348>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a83      	ldr	r2, [pc, #524]	@ (8003da0 <UART_SetConfig+0x2d0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d132      	bne.n	8003bfe <UART_SetConfig+0x12e>
 8003b98:	4b80      	ldr	r3, [pc, #512]	@ (8003d9c <UART_SetConfig+0x2cc>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d828      	bhi.n	8003bf8 <UART_SetConfig+0x128>
 8003ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bac <UART_SetConfig+0xdc>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003be1 	.word	0x08003be1
 8003bb0:	08003bf9 	.word	0x08003bf9
 8003bb4:	08003bf9 	.word	0x08003bf9
 8003bb8:	08003bf9 	.word	0x08003bf9
 8003bbc:	08003bed 	.word	0x08003bed
 8003bc0:	08003bf9 	.word	0x08003bf9
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003bf9 	.word	0x08003bf9
 8003bcc:	08003be7 	.word	0x08003be7
 8003bd0:	08003bf9 	.word	0x08003bf9
 8003bd4:	08003bf9 	.word	0x08003bf9
 8003bd8:	08003bf9 	.word	0x08003bf9
 8003bdc:	08003bf3 	.word	0x08003bf3
 8003be0:	2300      	movs	r3, #0
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e118      	b.n	8003e18 <UART_SetConfig+0x348>
 8003be6:	2302      	movs	r3, #2
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e115      	b.n	8003e18 <UART_SetConfig+0x348>
 8003bec:	2304      	movs	r3, #4
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e112      	b.n	8003e18 <UART_SetConfig+0x348>
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e10f      	b.n	8003e18 <UART_SetConfig+0x348>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e10c      	b.n	8003e18 <UART_SetConfig+0x348>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a68      	ldr	r2, [pc, #416]	@ (8003da4 <UART_SetConfig+0x2d4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d120      	bne.n	8003c4a <UART_SetConfig+0x17a>
 8003c08:	4b64      	ldr	r3, [pc, #400]	@ (8003d9c <UART_SetConfig+0x2cc>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c12:	2b30      	cmp	r3, #48	@ 0x30
 8003c14:	d013      	beq.n	8003c3e <UART_SetConfig+0x16e>
 8003c16:	2b30      	cmp	r3, #48	@ 0x30
 8003c18:	d814      	bhi.n	8003c44 <UART_SetConfig+0x174>
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d009      	beq.n	8003c32 <UART_SetConfig+0x162>
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d810      	bhi.n	8003c44 <UART_SetConfig+0x174>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <UART_SetConfig+0x15c>
 8003c26:	2b10      	cmp	r3, #16
 8003c28:	d006      	beq.n	8003c38 <UART_SetConfig+0x168>
 8003c2a:	e00b      	b.n	8003c44 <UART_SetConfig+0x174>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	77fb      	strb	r3, [r7, #31]
 8003c30:	e0f2      	b.n	8003e18 <UART_SetConfig+0x348>
 8003c32:	2302      	movs	r3, #2
 8003c34:	77fb      	strb	r3, [r7, #31]
 8003c36:	e0ef      	b.n	8003e18 <UART_SetConfig+0x348>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	77fb      	strb	r3, [r7, #31]
 8003c3c:	e0ec      	b.n	8003e18 <UART_SetConfig+0x348>
 8003c3e:	2308      	movs	r3, #8
 8003c40:	77fb      	strb	r3, [r7, #31]
 8003c42:	e0e9      	b.n	8003e18 <UART_SetConfig+0x348>
 8003c44:	2310      	movs	r3, #16
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	e0e6      	b.n	8003e18 <UART_SetConfig+0x348>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a56      	ldr	r2, [pc, #344]	@ (8003da8 <UART_SetConfig+0x2d8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d120      	bne.n	8003c96 <UART_SetConfig+0x1c6>
 8003c54:	4b51      	ldr	r3, [pc, #324]	@ (8003d9c <UART_SetConfig+0x2cc>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c60:	d013      	beq.n	8003c8a <UART_SetConfig+0x1ba>
 8003c62:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c64:	d814      	bhi.n	8003c90 <UART_SetConfig+0x1c0>
 8003c66:	2b80      	cmp	r3, #128	@ 0x80
 8003c68:	d009      	beq.n	8003c7e <UART_SetConfig+0x1ae>
 8003c6a:	2b80      	cmp	r3, #128	@ 0x80
 8003c6c:	d810      	bhi.n	8003c90 <UART_SetConfig+0x1c0>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <UART_SetConfig+0x1a8>
 8003c72:	2b40      	cmp	r3, #64	@ 0x40
 8003c74:	d006      	beq.n	8003c84 <UART_SetConfig+0x1b4>
 8003c76:	e00b      	b.n	8003c90 <UART_SetConfig+0x1c0>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e0cc      	b.n	8003e18 <UART_SetConfig+0x348>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e0c9      	b.n	8003e18 <UART_SetConfig+0x348>
 8003c84:	2304      	movs	r3, #4
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e0c6      	b.n	8003e18 <UART_SetConfig+0x348>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e0c3      	b.n	8003e18 <UART_SetConfig+0x348>
 8003c90:	2310      	movs	r3, #16
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e0c0      	b.n	8003e18 <UART_SetConfig+0x348>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a44      	ldr	r2, [pc, #272]	@ (8003dac <UART_SetConfig+0x2dc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d125      	bne.n	8003cec <UART_SetConfig+0x21c>
 8003ca0:	4b3e      	ldr	r3, [pc, #248]	@ (8003d9c <UART_SetConfig+0x2cc>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cae:	d017      	beq.n	8003ce0 <UART_SetConfig+0x210>
 8003cb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cb4:	d817      	bhi.n	8003ce6 <UART_SetConfig+0x216>
 8003cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cba:	d00b      	beq.n	8003cd4 <UART_SetConfig+0x204>
 8003cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cc0:	d811      	bhi.n	8003ce6 <UART_SetConfig+0x216>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <UART_SetConfig+0x1fe>
 8003cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cca:	d006      	beq.n	8003cda <UART_SetConfig+0x20a>
 8003ccc:	e00b      	b.n	8003ce6 <UART_SetConfig+0x216>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	e0a1      	b.n	8003e18 <UART_SetConfig+0x348>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	e09e      	b.n	8003e18 <UART_SetConfig+0x348>
 8003cda:	2304      	movs	r3, #4
 8003cdc:	77fb      	strb	r3, [r7, #31]
 8003cde:	e09b      	b.n	8003e18 <UART_SetConfig+0x348>
 8003ce0:	2308      	movs	r3, #8
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e098      	b.n	8003e18 <UART_SetConfig+0x348>
 8003ce6:	2310      	movs	r3, #16
 8003ce8:	77fb      	strb	r3, [r7, #31]
 8003cea:	e095      	b.n	8003e18 <UART_SetConfig+0x348>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a2f      	ldr	r2, [pc, #188]	@ (8003db0 <UART_SetConfig+0x2e0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d125      	bne.n	8003d42 <UART_SetConfig+0x272>
 8003cf6:	4b29      	ldr	r3, [pc, #164]	@ (8003d9c <UART_SetConfig+0x2cc>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d04:	d017      	beq.n	8003d36 <UART_SetConfig+0x266>
 8003d06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d0a:	d817      	bhi.n	8003d3c <UART_SetConfig+0x26c>
 8003d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d10:	d00b      	beq.n	8003d2a <UART_SetConfig+0x25a>
 8003d12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d16:	d811      	bhi.n	8003d3c <UART_SetConfig+0x26c>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <UART_SetConfig+0x254>
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d20:	d006      	beq.n	8003d30 <UART_SetConfig+0x260>
 8003d22:	e00b      	b.n	8003d3c <UART_SetConfig+0x26c>
 8003d24:	2301      	movs	r3, #1
 8003d26:	77fb      	strb	r3, [r7, #31]
 8003d28:	e076      	b.n	8003e18 <UART_SetConfig+0x348>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e073      	b.n	8003e18 <UART_SetConfig+0x348>
 8003d30:	2304      	movs	r3, #4
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e070      	b.n	8003e18 <UART_SetConfig+0x348>
 8003d36:	2308      	movs	r3, #8
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e06d      	b.n	8003e18 <UART_SetConfig+0x348>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e06a      	b.n	8003e18 <UART_SetConfig+0x348>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1b      	ldr	r2, [pc, #108]	@ (8003db4 <UART_SetConfig+0x2e4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d138      	bne.n	8003dbe <UART_SetConfig+0x2ee>
 8003d4c:	4b13      	ldr	r3, [pc, #76]	@ (8003d9c <UART_SetConfig+0x2cc>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d52:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d5a:	d017      	beq.n	8003d8c <UART_SetConfig+0x2bc>
 8003d5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d60:	d82a      	bhi.n	8003db8 <UART_SetConfig+0x2e8>
 8003d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d66:	d00b      	beq.n	8003d80 <UART_SetConfig+0x2b0>
 8003d68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d6c:	d824      	bhi.n	8003db8 <UART_SetConfig+0x2e8>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <UART_SetConfig+0x2aa>
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d76:	d006      	beq.n	8003d86 <UART_SetConfig+0x2b6>
 8003d78:	e01e      	b.n	8003db8 <UART_SetConfig+0x2e8>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	77fb      	strb	r3, [r7, #31]
 8003d7e:	e04b      	b.n	8003e18 <UART_SetConfig+0x348>
 8003d80:	2302      	movs	r3, #2
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	e048      	b.n	8003e18 <UART_SetConfig+0x348>
 8003d86:	2304      	movs	r3, #4
 8003d88:	77fb      	strb	r3, [r7, #31]
 8003d8a:	e045      	b.n	8003e18 <UART_SetConfig+0x348>
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e042      	b.n	8003e18 <UART_SetConfig+0x348>
 8003d92:	bf00      	nop
 8003d94:	efff69f3 	.word	0xefff69f3
 8003d98:	40011000 	.word	0x40011000
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40004400 	.word	0x40004400
 8003da4:	40004800 	.word	0x40004800
 8003da8:	40004c00 	.word	0x40004c00
 8003dac:	40005000 	.word	0x40005000
 8003db0:	40011400 	.word	0x40011400
 8003db4:	40007800 	.word	0x40007800
 8003db8:	2310      	movs	r3, #16
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e02c      	b.n	8003e18 <UART_SetConfig+0x348>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a72      	ldr	r2, [pc, #456]	@ (8003f8c <UART_SetConfig+0x4bc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d125      	bne.n	8003e14 <UART_SetConfig+0x344>
 8003dc8:	4b71      	ldr	r3, [pc, #452]	@ (8003f90 <UART_SetConfig+0x4c0>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003dd2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003dd6:	d017      	beq.n	8003e08 <UART_SetConfig+0x338>
 8003dd8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ddc:	d817      	bhi.n	8003e0e <UART_SetConfig+0x33e>
 8003dde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de2:	d00b      	beq.n	8003dfc <UART_SetConfig+0x32c>
 8003de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de8:	d811      	bhi.n	8003e0e <UART_SetConfig+0x33e>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <UART_SetConfig+0x326>
 8003dee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003df2:	d006      	beq.n	8003e02 <UART_SetConfig+0x332>
 8003df4:	e00b      	b.n	8003e0e <UART_SetConfig+0x33e>
 8003df6:	2300      	movs	r3, #0
 8003df8:	77fb      	strb	r3, [r7, #31]
 8003dfa:	e00d      	b.n	8003e18 <UART_SetConfig+0x348>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e00a      	b.n	8003e18 <UART_SetConfig+0x348>
 8003e02:	2304      	movs	r3, #4
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e007      	b.n	8003e18 <UART_SetConfig+0x348>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e004      	b.n	8003e18 <UART_SetConfig+0x348>
 8003e0e:	2310      	movs	r3, #16
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e001      	b.n	8003e18 <UART_SetConfig+0x348>
 8003e14:	2310      	movs	r3, #16
 8003e16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e20:	d15b      	bne.n	8003eda <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e22:	7ffb      	ldrb	r3, [r7, #31]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d828      	bhi.n	8003e7a <UART_SetConfig+0x3aa>
 8003e28:	a201      	add	r2, pc, #4	@ (adr r2, 8003e30 <UART_SetConfig+0x360>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e55 	.word	0x08003e55
 8003e34:	08003e5d 	.word	0x08003e5d
 8003e38:	08003e65 	.word	0x08003e65
 8003e3c:	08003e7b 	.word	0x08003e7b
 8003e40:	08003e6b 	.word	0x08003e6b
 8003e44:	08003e7b 	.word	0x08003e7b
 8003e48:	08003e7b 	.word	0x08003e7b
 8003e4c:	08003e7b 	.word	0x08003e7b
 8003e50:	08003e73 	.word	0x08003e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e54:	f7ff f8aa 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8003e58:	61b8      	str	r0, [r7, #24]
        break;
 8003e5a:	e013      	b.n	8003e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e5c:	f7ff f8ba 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 8003e60:	61b8      	str	r0, [r7, #24]
        break;
 8003e62:	e00f      	b.n	8003e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e64:	4b4b      	ldr	r3, [pc, #300]	@ (8003f94 <UART_SetConfig+0x4c4>)
 8003e66:	61bb      	str	r3, [r7, #24]
        break;
 8003e68:	e00c      	b.n	8003e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6a:	f7fe ff8d 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8003e6e:	61b8      	str	r0, [r7, #24]
        break;
 8003e70:	e008      	b.n	8003e84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e76:	61bb      	str	r3, [r7, #24]
        break;
 8003e78:	e004      	b.n	8003e84 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	77bb      	strb	r3, [r7, #30]
        break;
 8003e82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d074      	beq.n	8003f74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	005a      	lsls	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	085b      	lsrs	r3, r3, #1
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b0f      	cmp	r3, #15
 8003ea4:	d916      	bls.n	8003ed4 <UART_SetConfig+0x404>
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eac:	d212      	bcs.n	8003ed4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	f023 030f 	bic.w	r3, r3, #15
 8003eb6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	89fb      	ldrh	r3, [r7, #14]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	89fa      	ldrh	r2, [r7, #14]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	e04f      	b.n	8003f74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	77bb      	strb	r3, [r7, #30]
 8003ed8:	e04c      	b.n	8003f74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eda:	7ffb      	ldrb	r3, [r7, #31]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d828      	bhi.n	8003f32 <UART_SetConfig+0x462>
 8003ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee8 <UART_SetConfig+0x418>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	08003f15 	.word	0x08003f15
 8003ef0:	08003f1d 	.word	0x08003f1d
 8003ef4:	08003f33 	.word	0x08003f33
 8003ef8:	08003f23 	.word	0x08003f23
 8003efc:	08003f33 	.word	0x08003f33
 8003f00:	08003f33 	.word	0x08003f33
 8003f04:	08003f33 	.word	0x08003f33
 8003f08:	08003f2b 	.word	0x08003f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f0c:	f7ff f84e 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8003f10:	61b8      	str	r0, [r7, #24]
        break;
 8003f12:	e013      	b.n	8003f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f14:	f7ff f85e 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 8003f18:	61b8      	str	r0, [r7, #24]
        break;
 8003f1a:	e00f      	b.n	8003f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f94 <UART_SetConfig+0x4c4>)
 8003f1e:	61bb      	str	r3, [r7, #24]
        break;
 8003f20:	e00c      	b.n	8003f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f22:	f7fe ff31 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8003f26:	61b8      	str	r0, [r7, #24]
        break;
 8003f28:	e008      	b.n	8003f3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f2e:	61bb      	str	r3, [r7, #24]
        break;
 8003f30:	e004      	b.n	8003f3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	77bb      	strb	r3, [r7, #30]
        break;
 8003f3a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d018      	beq.n	8003f74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	085a      	lsrs	r2, r3, #1
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	441a      	add	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b0f      	cmp	r3, #15
 8003f5a:	d909      	bls.n	8003f70 <UART_SetConfig+0x4a0>
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f62:	d205      	bcs.n	8003f70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60da      	str	r2, [r3, #12]
 8003f6e:	e001      	b.n	8003f74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f80:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40007c00 	.word	0x40007c00
 8003f90:	40023800 	.word	0x40023800
 8003f94:	00f42400 	.word	0x00f42400

08003f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01a      	beq.n	80040ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004096:	d10a      	bne.n	80040ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b098      	sub	sp, #96	@ 0x60
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040ec:	f7fc ff4a 	bl	8000f84 <HAL_GetTick>
 80040f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d12e      	bne.n	800415e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004100:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004108:	2200      	movs	r2, #0
 800410a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f88c 	bl	800422c <UART_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d021      	beq.n	800415e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800412a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800412e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004138:	647b      	str	r3, [r7, #68]	@ 0x44
 800413a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800413e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e6      	bne.n	800411a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e062      	b.n	8004224 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b04      	cmp	r3, #4
 800416a:	d149      	bne.n	8004200 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004174:	2200      	movs	r2, #0
 8004176:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f856 	bl	800422c <UART_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d03c      	beq.n	8004200 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	e853 3f00 	ldrex	r3, [r3]
 8004192:	623b      	str	r3, [r7, #32]
   return(result);
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800419a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80041a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ac:	e841 2300 	strex	r3, r2, [r1]
 80041b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e6      	bne.n	8004186 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3308      	adds	r3, #8
 80041be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0301 	bic.w	r3, r3, #1
 80041ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3308      	adds	r3, #8
 80041d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041d8:	61fa      	str	r2, [r7, #28]
 80041da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	69b9      	ldr	r1, [r7, #24]
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	617b      	str	r3, [r7, #20]
   return(result);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e5      	bne.n	80041b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e011      	b.n	8004224 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3758      	adds	r7, #88	@ 0x58
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423c:	e04f      	b.n	80042de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004244:	d04b      	beq.n	80042de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004246:	f7fc fe9d 	bl	8000f84 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	429a      	cmp	r2, r3
 8004254:	d302      	bcc.n	800425c <UART_WaitOnFlagUntilTimeout+0x30>
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e04e      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	d037      	beq.n	80042de <UART_WaitOnFlagUntilTimeout+0xb2>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b80      	cmp	r3, #128	@ 0x80
 8004272:	d034      	beq.n	80042de <UART_WaitOnFlagUntilTimeout+0xb2>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b40      	cmp	r3, #64	@ 0x40
 8004278:	d031      	beq.n	80042de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b08      	cmp	r3, #8
 8004286:	d110      	bne.n	80042aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2208      	movs	r2, #8
 800428e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f8ff 	bl	8004494 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2208      	movs	r2, #8
 800429a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e029      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042b8:	d111      	bne.n	80042de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f8e5 	bl	8004494 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e00f      	b.n	80042fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d0a0      	beq.n	800423e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b096      	sub	sp, #88	@ 0x58
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	4613      	mov	r3, r2
 8004314:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	88fa      	ldrh	r2, [r7, #6]
 8004320:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2222      	movs	r2, #34	@ 0x22
 8004330:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004338:	2b00      	cmp	r3, #0
 800433a:	d028      	beq.n	800438e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004340:	4a3e      	ldr	r2, [pc, #248]	@ (800443c <UART_Start_Receive_DMA+0x134>)
 8004342:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004348:	4a3d      	ldr	r2, [pc, #244]	@ (8004440 <UART_Start_Receive_DMA+0x138>)
 800434a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004350:	4a3c      	ldr	r2, [pc, #240]	@ (8004444 <UART_Start_Receive_DMA+0x13c>)
 8004352:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004358:	2200      	movs	r2, #0
 800435a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3324      	adds	r3, #36	@ 0x24
 8004366:	4619      	mov	r1, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436c:	461a      	mov	r2, r3
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	f7fc fff8 	bl	8001364 <HAL_DMA_Start_IT>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2210      	movs	r2, #16
 800437e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e051      	b.n	8004432 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d018      	beq.n	80043c8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043b6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80043ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043bc:	e841 2300 	strex	r3, r2, [r1]
 80043c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80043c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e6      	bne.n	8004396 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3308      	adds	r3, #8
 80043ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	653b      	str	r3, [r7, #80]	@ 0x50
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3308      	adds	r3, #8
 80043e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80043e8:	637a      	str	r2, [r7, #52]	@ 0x34
 80043ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80043f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e5      	bne.n	80043c8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3308      	adds	r3, #8
 8004402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	613b      	str	r3, [r7, #16]
   return(result);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3308      	adds	r3, #8
 800441a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800441c:	623a      	str	r2, [r7, #32]
 800441e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	69f9      	ldr	r1, [r7, #28]
 8004422:	6a3a      	ldr	r2, [r7, #32]
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	61bb      	str	r3, [r7, #24]
   return(result);
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e5      	bne.n	80043fc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3758      	adds	r7, #88	@ 0x58
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	0800460f 	.word	0x0800460f
 8004440:	08004737 	.word	0x08004737
 8004444:	08004775 	.word	0x08004775

08004448 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	@ 0x24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	60bb      	str	r3, [r7, #8]
   return(result);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	6979      	ldr	r1, [r7, #20]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	613b      	str	r3, [r7, #16]
   return(result);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e6      	bne.n	8004450 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004488:	bf00      	nop
 800448a:	3724      	adds	r7, #36	@ 0x24
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004494:	b480      	push	{r7}
 8004496:	b095      	sub	sp, #84	@ 0x54
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80044bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e6      	bne.n	800449c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3308      	adds	r3, #8
 80044d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3308      	adds	r3, #8
 80044ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e5      	bne.n	80044ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004506:	2b01      	cmp	r3, #1
 8004508:	d118      	bne.n	800453c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	60bb      	str	r3, [r7, #8]
   return(result);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f023 0310 	bic.w	r3, r3, #16
 800451e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6979      	ldr	r1, [r7, #20]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	613b      	str	r3, [r7, #16]
   return(result);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e6      	bne.n	800450a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004550:	bf00      	nop
 8004552:	3754      	adds	r7, #84	@ 0x54
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b090      	sub	sp, #64	@ 0x40
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004568:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004572:	d037      	beq.n	80045e4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8004574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004576:	2200      	movs	r2, #0
 8004578:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800457c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3308      	adds	r3, #8
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	623b      	str	r3, [r7, #32]
   return(result);
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004592:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3308      	adds	r3, #8
 800459a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800459c:	633a      	str	r2, [r7, #48]	@ 0x30
 800459e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e5      	bne.n	800457c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ce:	61fb      	str	r3, [r7, #28]
 80045d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	69b9      	ldr	r1, [r7, #24]
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	617b      	str	r3, [r7, #20]
   return(result);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e6      	bne.n	80045b0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045e2:	e002      	b.n	80045ea <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80045e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80045e6:	f7ff fa3f 	bl	8003a68 <HAL_UART_TxCpltCallback>
}
 80045ea:	bf00      	nop
 80045ec:	3740      	adds	r7, #64	@ 0x40
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff fa3b 	bl	8003a7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004606:	bf00      	nop
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b09c      	sub	sp, #112	@ 0x70
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004624:	d071      	beq.n	800470a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8004626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004628:	2200      	movs	r2, #0
 800462a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800462e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800463c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800463e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004642:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800464c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800464e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004652:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800465a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e6      	bne.n	800462e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3308      	adds	r3, #8
 8004666:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	667b      	str	r3, [r7, #100]	@ 0x64
 8004678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3308      	adds	r3, #8
 800467e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004680:	647a      	str	r2, [r7, #68]	@ 0x44
 8004682:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004686:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800468e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e5      	bne.n	8004660 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3308      	adds	r3, #8
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	623b      	str	r3, [r7, #32]
   return(result);
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80046ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3308      	adds	r3, #8
 80046b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80046b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80046b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e5      	bne.n	8004694 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ca:	2220      	movs	r2, #32
 80046cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d118      	bne.n	800470a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f023 0310 	bic.w	r3, r3, #16
 80046ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	69b9      	ldr	r1, [r7, #24]
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	617b      	str	r3, [r7, #20]
   return(result);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e6      	bne.n	80046d8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800470a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800470c:	2200      	movs	r2, #0
 800470e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004714:	2b01      	cmp	r3, #1
 8004716:	d107      	bne.n	8004728 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800471a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800471e:	4619      	mov	r1, r3
 8004720:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004722:	f7ff f9c9 	bl	8003ab8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004726:	e002      	b.n	800472e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8004728:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800472a:	f7fb ff1b 	bl	8000564 <HAL_UART_RxCpltCallback>
}
 800472e:	bf00      	nop
 8004730:	3770      	adds	r7, #112	@ 0x70
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004742:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474e:	2b01      	cmp	r3, #1
 8004750:	d109      	bne.n	8004766 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	b29b      	uxth	r3, r3
 800475c:	4619      	mov	r1, r3
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7ff f9aa 	bl	8003ab8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004764:	e002      	b.n	800476c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff f992 	bl	8003a90 <HAL_UART_RxHalfCpltCallback>
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004780:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004786:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800478e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800479a:	2b80      	cmp	r3, #128	@ 0x80
 800479c:	d109      	bne.n	80047b2 <UART_DMAError+0x3e>
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b21      	cmp	r3, #33	@ 0x21
 80047a2:	d106      	bne.n	80047b2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80047ac:	6978      	ldr	r0, [r7, #20]
 80047ae:	f7ff fe4b 	bl	8004448 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d109      	bne.n	80047d4 <UART_DMAError+0x60>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b22      	cmp	r3, #34	@ 0x22
 80047c4:	d106      	bne.n	80047d4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80047ce:	6978      	ldr	r0, [r7, #20]
 80047d0:	f7ff fe60 	bl	8004494 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047da:	f043 0210 	orr.w	r2, r3, #16
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e4:	6978      	ldr	r0, [r7, #20]
 80047e6:	f7ff f95d 	bl	8003aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ea:	bf00      	nop
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047f4:	b084      	sub	sp, #16
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	f107 001c 	add.w	r0, r7, #28
 8004802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004806:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800480a:	2b01      	cmp	r3, #1
 800480c:	d121      	bne.n	8004852 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004812:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	4b21      	ldr	r3, [pc, #132]	@ (80048a4 <USB_CoreInit+0xb0>)
 8004820:	4013      	ands	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004832:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa92 	bl	8004d70 <USB_CoreReset>
 800484c:	4603      	mov	r3, r0
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e010      	b.n	8004874 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fa86 	bl	8004d70 <USB_CoreReset>
 8004864:	4603      	mov	r3, r0
 8004866:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004874:	7fbb      	ldrb	r3, [r7, #30]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d10b      	bne.n	8004892 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f043 0206 	orr.w	r2, r3, #6
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004892:	7bfb      	ldrb	r3, [r7, #15]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800489e:	b004      	add	sp, #16
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	ffbdffbf 	.word	0xffbdffbf

080048a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f023 0201 	bic.w	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d115      	bne.n	8004918 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80048f8:	200a      	movs	r0, #10
 80048fa:	f7fc fb4f 	bl	8000f9c <HAL_Delay>
      ms += 10U;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	330a      	adds	r3, #10
 8004902:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fa25 	bl	8004d54 <USB_GetMode>
 800490a:	4603      	mov	r3, r0
 800490c:	2b01      	cmp	r3, #1
 800490e:	d01e      	beq.n	800494e <USB_SetCurrentMode+0x84>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2bc7      	cmp	r3, #199	@ 0xc7
 8004914:	d9f0      	bls.n	80048f8 <USB_SetCurrentMode+0x2e>
 8004916:	e01a      	b.n	800494e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d115      	bne.n	800494a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800492a:	200a      	movs	r0, #10
 800492c:	f7fc fb36 	bl	8000f9c <HAL_Delay>
      ms += 10U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	330a      	adds	r3, #10
 8004934:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa0c 	bl	8004d54 <USB_GetMode>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <USB_SetCurrentMode+0x84>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2bc7      	cmp	r3, #199	@ 0xc7
 8004946:	d9f0      	bls.n	800492a <USB_SetCurrentMode+0x60>
 8004948:	e001      	b.n	800494e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e005      	b.n	800495a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2bc8      	cmp	r3, #200	@ 0xc8
 8004952:	d101      	bne.n	8004958 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004964:	b084      	sub	sp, #16
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004972:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	e009      	b.n	8004998 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	3340      	adds	r3, #64	@ 0x40
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	2200      	movs	r2, #0
 8004990:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	3301      	adds	r3, #1
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b0e      	cmp	r3, #14
 800499c:	d9f2      	bls.n	8004984 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800499e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d11c      	bne.n	80049e0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049be:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	e005      	b.n	80049ec <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049f2:	461a      	mov	r2, r3
 80049f4:	2300      	movs	r3, #0
 80049f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10d      	bne.n	8004a1c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a08:	2100      	movs	r1, #0
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f968 	bl	8004ce0 <USB_SetDevSpeed>
 8004a10:	e008      	b.n	8004a24 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a12:	2101      	movs	r1, #1
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f963 	bl	8004ce0 <USB_SetDevSpeed>
 8004a1a:	e003      	b.n	8004a24 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a1c:	2103      	movs	r1, #3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f95e 	bl	8004ce0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a24:	2110      	movs	r1, #16
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f8fa 	bl	8004c20 <USB_FlushTxFifo>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f924 	bl	8004c84 <USB_FlushRxFifo>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2300      	movs	r3, #0
 8004a50:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a58:	461a      	mov	r2, r3
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a64:	461a      	mov	r2, r3
 8004a66:	2300      	movs	r3, #0
 8004a68:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	e043      	b.n	8004af8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a86:	d118      	bne.n	8004aba <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10a      	bne.n	8004aa4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e013      	b.n	8004acc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e008      	b.n	8004acc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2300      	movs	r3, #0
 8004aca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2300      	movs	r3, #0
 8004adc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aea:	461a      	mov	r2, r3
 8004aec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004af0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	3301      	adds	r3, #1
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004afc:	461a      	mov	r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d3b5      	bcc.n	8004a70 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b04:	2300      	movs	r3, #0
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	e043      	b.n	8004b92 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b20:	d118      	bne.n	8004b54 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b34:	461a      	mov	r2, r3
 8004b36:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	e013      	b.n	8004b66 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e008      	b.n	8004b66 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b60:	461a      	mov	r2, r3
 8004b62:	2300      	movs	r3, #0
 8004b64:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b72:	461a      	mov	r2, r3
 8004b74:	2300      	movs	r3, #0
 8004b76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b84:	461a      	mov	r2, r3
 8004b86:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b96:	461a      	mov	r2, r3
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d3b5      	bcc.n	8004b0a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004bbe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	f043 0210 	orr.w	r2, r3, #16
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699a      	ldr	r2, [r3, #24]
 8004bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c18 <USB_DevInit+0x2b4>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004be0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f043 0208 	orr.w	r2, r3, #8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bf4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d105      	bne.n	8004c08 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699a      	ldr	r2, [r3, #24]
 8004c00:	4b06      	ldr	r3, [pc, #24]	@ (8004c1c <USB_DevInit+0x2b8>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c14:	b004      	add	sp, #16
 8004c16:	4770      	bx	lr
 8004c18:	803c3800 	.word	0x803c3800
 8004c1c:	40000004 	.word	0x40000004

08004c20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3301      	adds	r3, #1
 8004c32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c3a:	d901      	bls.n	8004c40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e01b      	b.n	8004c78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	daf2      	bge.n	8004c2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	019b      	lsls	r3, r3, #6
 8004c50:	f043 0220 	orr.w	r2, r3, #32
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c64:	d901      	bls.n	8004c6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e006      	b.n	8004c78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	d0f0      	beq.n	8004c58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3301      	adds	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c9c:	d901      	bls.n	8004ca2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e018      	b.n	8004cd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	daf2      	bge.n	8004c90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2210      	movs	r2, #16
 8004cb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cc0:	d901      	bls.n	8004cc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e006      	b.n	8004cd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	2b10      	cmp	r3, #16
 8004cd0:	d0f0      	beq.n	8004cb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	68f9      	ldr	r1, [r7, #12]
 8004cfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d00:	4313      	orrs	r3, r2
 8004d02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004d2c:	f023 0303 	bic.w	r3, r3, #3
 8004d30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d40:	f043 0302 	orr.w	r3, r3, #2
 8004d44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	f003 0301 	and.w	r3, r3, #1
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d88:	d901      	bls.n	8004d8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e01b      	b.n	8004dc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	daf2      	bge.n	8004d7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f043 0201 	orr.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3301      	adds	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004db2:	d901      	bls.n	8004db8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e006      	b.n	8004dc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d0f0      	beq.n	8004da6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <memset>:
 8004dd2:	4402      	add	r2, r0
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d100      	bne.n	8004ddc <memset+0xa>
 8004dda:	4770      	bx	lr
 8004ddc:	f803 1b01 	strb.w	r1, [r3], #1
 8004de0:	e7f9      	b.n	8004dd6 <memset+0x4>
	...

08004de4 <__libc_init_array>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	4d0d      	ldr	r5, [pc, #52]	@ (8004e1c <__libc_init_array+0x38>)
 8004de8:	4c0d      	ldr	r4, [pc, #52]	@ (8004e20 <__libc_init_array+0x3c>)
 8004dea:	1b64      	subs	r4, r4, r5
 8004dec:	10a4      	asrs	r4, r4, #2
 8004dee:	2600      	movs	r6, #0
 8004df0:	42a6      	cmp	r6, r4
 8004df2:	d109      	bne.n	8004e08 <__libc_init_array+0x24>
 8004df4:	4d0b      	ldr	r5, [pc, #44]	@ (8004e24 <__libc_init_array+0x40>)
 8004df6:	4c0c      	ldr	r4, [pc, #48]	@ (8004e28 <__libc_init_array+0x44>)
 8004df8:	f000 f818 	bl	8004e2c <_init>
 8004dfc:	1b64      	subs	r4, r4, r5
 8004dfe:	10a4      	asrs	r4, r4, #2
 8004e00:	2600      	movs	r6, #0
 8004e02:	42a6      	cmp	r6, r4
 8004e04:	d105      	bne.n	8004e12 <__libc_init_array+0x2e>
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0c:	4798      	blx	r3
 8004e0e:	3601      	adds	r6, #1
 8004e10:	e7ee      	b.n	8004df0 <__libc_init_array+0xc>
 8004e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e16:	4798      	blx	r3
 8004e18:	3601      	adds	r6, #1
 8004e1a:	e7f2      	b.n	8004e02 <__libc_init_array+0x1e>
 8004e1c:	08004e6c 	.word	0x08004e6c
 8004e20:	08004e6c 	.word	0x08004e6c
 8004e24:	08004e6c 	.word	0x08004e6c
 8004e28:	08004e70 	.word	0x08004e70

08004e2c <_init>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr

08004e38 <_fini>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	bf00      	nop
 8004e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3e:	bc08      	pop	{r3}
 8004e40:	469e      	mov	lr, r3
 8004e42:	4770      	bx	lr
