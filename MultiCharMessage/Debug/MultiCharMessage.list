
MultiCharMessage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d04  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004efc  08004efc  00005efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f24  08004f24  0000614c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004f24  08004f24  00005f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f2c  08004f2c  0000614c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f2c  08004f2c  00005f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f30  08004f30  00005f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004f34  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004f40  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08004fe0  000060ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006e4  2000014c  08005080  0000614c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000830  08005080  00006830  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000614c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000129bb  00000000  00000000  0000617a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027ce  00000000  00000000  00018b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db8  00000000  00000000  0001b308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a8d  00000000  00000000  0001c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000286dd  00000000  00000000  0001cb4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010fbd  00000000  00000000  0004522a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f9265  00000000  00000000  000561e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014f44c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003904  00000000  00000000  0014f490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00152d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004ee4 	.word	0x08004ee4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08004ee4 	.word	0x08004ee4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b988 	b.w	8000570 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	468e      	mov	lr, r1
 8000280:	4604      	mov	r4, r0
 8000282:	4688      	mov	r8, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d962      	bls.n	8000354 <__udivmoddi4+0xdc>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	b14e      	cbz	r6, 80002a8 <__udivmoddi4+0x30>
 8000294:	f1c6 0320 	rsb	r3, r6, #32
 8000298:	fa01 f806 	lsl.w	r8, r1, r6
 800029c:	fa20 f303 	lsr.w	r3, r0, r3
 80002a0:	40b7      	lsls	r7, r6
 80002a2:	ea43 0808 	orr.w	r8, r3, r8
 80002a6:	40b4      	lsls	r4, r6
 80002a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ac:	fa1f fc87 	uxth.w	ip, r7
 80002b0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002b4:	0c23      	lsrs	r3, r4, #16
 80002b6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002be:	fb01 f20c 	mul.w	r2, r1, ip
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x62>
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002cc:	f080 80ea 	bcs.w	80004a4 <__udivmoddi4+0x22c>
 80002d0:	429a      	cmp	r2, r3
 80002d2:	f240 80e7 	bls.w	80004a4 <__udivmoddi4+0x22c>
 80002d6:	3902      	subs	r1, #2
 80002d8:	443b      	add	r3, r7
 80002da:	1a9a      	subs	r2, r3, r2
 80002dc:	b2a3      	uxth	r3, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ea:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ee:	459c      	cmp	ip, r3
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0x8e>
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f8:	f080 80d6 	bcs.w	80004a8 <__udivmoddi4+0x230>
 80002fc:	459c      	cmp	ip, r3
 80002fe:	f240 80d3 	bls.w	80004a8 <__udivmoddi4+0x230>
 8000302:	443b      	add	r3, r7
 8000304:	3802      	subs	r0, #2
 8000306:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030a:	eba3 030c 	sub.w	r3, r3, ip
 800030e:	2100      	movs	r1, #0
 8000310:	b11d      	cbz	r5, 800031a <__udivmoddi4+0xa2>
 8000312:	40f3      	lsrs	r3, r6
 8000314:	2200      	movs	r2, #0
 8000316:	e9c5 3200 	strd	r3, r2, [r5]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d905      	bls.n	800032e <__udivmoddi4+0xb6>
 8000322:	b10d      	cbz	r5, 8000328 <__udivmoddi4+0xb0>
 8000324:	e9c5 0100 	strd	r0, r1, [r5]
 8000328:	2100      	movs	r1, #0
 800032a:	4608      	mov	r0, r1
 800032c:	e7f5      	b.n	800031a <__udivmoddi4+0xa2>
 800032e:	fab3 f183 	clz	r1, r3
 8000332:	2900      	cmp	r1, #0
 8000334:	d146      	bne.n	80003c4 <__udivmoddi4+0x14c>
 8000336:	4573      	cmp	r3, lr
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xc8>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 8105 	bhi.w	800054a <__udivmoddi4+0x2d2>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb6e 0203 	sbc.w	r2, lr, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4690      	mov	r8, r2
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0e5      	beq.n	800031a <__udivmoddi4+0xa2>
 800034e:	e9c5 4800 	strd	r4, r8, [r5]
 8000352:	e7e2      	b.n	800031a <__udivmoddi4+0xa2>
 8000354:	2a00      	cmp	r2, #0
 8000356:	f000 8090 	beq.w	800047a <__udivmoddi4+0x202>
 800035a:	fab2 f682 	clz	r6, r2
 800035e:	2e00      	cmp	r6, #0
 8000360:	f040 80a4 	bne.w	80004ac <__udivmoddi4+0x234>
 8000364:	1a8a      	subs	r2, r1, r2
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036c:	b280      	uxth	r0, r0
 800036e:	b2bc      	uxth	r4, r7
 8000370:	2101      	movs	r1, #1
 8000372:	fbb2 fcfe 	udiv	ip, r2, lr
 8000376:	fb0e 221c 	mls	r2, lr, ip, r2
 800037a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037e:	fb04 f20c 	mul.w	r2, r4, ip
 8000382:	429a      	cmp	r2, r3
 8000384:	d907      	bls.n	8000396 <__udivmoddi4+0x11e>
 8000386:	18fb      	adds	r3, r7, r3
 8000388:	f10c 38ff 	add.w	r8, ip, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x11c>
 800038e:	429a      	cmp	r2, r3
 8000390:	f200 80e0 	bhi.w	8000554 <__udivmoddi4+0x2dc>
 8000394:	46c4      	mov	ip, r8
 8000396:	1a9b      	subs	r3, r3, r2
 8000398:	fbb3 f2fe 	udiv	r2, r3, lr
 800039c:	fb0e 3312 	mls	r3, lr, r2, r3
 80003a0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003a4:	fb02 f404 	mul.w	r4, r2, r4
 80003a8:	429c      	cmp	r4, r3
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x144>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f102 30ff 	add.w	r0, r2, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x142>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f200 80ca 	bhi.w	800054e <__udivmoddi4+0x2d6>
 80003ba:	4602      	mov	r2, r0
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0x98>
 80003c4:	f1c1 0620 	rsb	r6, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 f706 	lsr.w	r7, r2, r6
 80003ce:	431f      	orrs	r7, r3
 80003d0:	fa0e f401 	lsl.w	r4, lr, r1
 80003d4:	fa20 f306 	lsr.w	r3, r0, r6
 80003d8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003dc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	fa1f fc87 	uxth.w	ip, r7
 80003ea:	fbbe f0f9 	udiv	r0, lr, r9
 80003ee:	0c1c      	lsrs	r4, r3, #16
 80003f0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003f4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	d909      	bls.n	8000418 <__udivmoddi4+0x1a0>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 3aff 	add.w	sl, r0, #4294967295
 800040a:	f080 809c 	bcs.w	8000546 <__udivmoddi4+0x2ce>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f240 8099 	bls.w	8000546 <__udivmoddi4+0x2ce>
 8000414:	3802      	subs	r0, #2
 8000416:	443c      	add	r4, r7
 8000418:	eba4 040e 	sub.w	r4, r4, lr
 800041c:	fa1f fe83 	uxth.w	lr, r3
 8000420:	fbb4 f3f9 	udiv	r3, r4, r9
 8000424:	fb09 4413 	mls	r4, r9, r3, r4
 8000428:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800042c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000430:	45a4      	cmp	ip, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x1ce>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f103 3eff 	add.w	lr, r3, #4294967295
 800043a:	f080 8082 	bcs.w	8000542 <__udivmoddi4+0x2ca>
 800043e:	45a4      	cmp	ip, r4
 8000440:	d97f      	bls.n	8000542 <__udivmoddi4+0x2ca>
 8000442:	3b02      	subs	r3, #2
 8000444:	443c      	add	r4, r7
 8000446:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000452:	4564      	cmp	r4, ip
 8000454:	4673      	mov	r3, lr
 8000456:	46e1      	mov	r9, ip
 8000458:	d362      	bcc.n	8000520 <__udivmoddi4+0x2a8>
 800045a:	d05f      	beq.n	800051c <__udivmoddi4+0x2a4>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x1fe>
 800045e:	ebb8 0203 	subs.w	r2, r8, r3
 8000462:	eb64 0409 	sbc.w	r4, r4, r9
 8000466:	fa04 f606 	lsl.w	r6, r4, r6
 800046a:	fa22 f301 	lsr.w	r3, r2, r1
 800046e:	431e      	orrs	r6, r3
 8000470:	40cc      	lsrs	r4, r1
 8000472:	e9c5 6400 	strd	r6, r4, [r5]
 8000476:	2100      	movs	r1, #0
 8000478:	e74f      	b.n	800031a <__udivmoddi4+0xa2>
 800047a:	fbb1 fcf2 	udiv	ip, r1, r2
 800047e:	0c01      	lsrs	r1, r0, #16
 8000480:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000484:	b280      	uxth	r0, r0
 8000486:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800048a:	463b      	mov	r3, r7
 800048c:	4638      	mov	r0, r7
 800048e:	463c      	mov	r4, r7
 8000490:	46b8      	mov	r8, r7
 8000492:	46be      	mov	lr, r7
 8000494:	2620      	movs	r6, #32
 8000496:	fbb1 f1f7 	udiv	r1, r1, r7
 800049a:	eba2 0208 	sub.w	r2, r2, r8
 800049e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004a2:	e766      	b.n	8000372 <__udivmoddi4+0xfa>
 80004a4:	4601      	mov	r1, r0
 80004a6:	e718      	b.n	80002da <__udivmoddi4+0x62>
 80004a8:	4610      	mov	r0, r2
 80004aa:	e72c      	b.n	8000306 <__udivmoddi4+0x8e>
 80004ac:	f1c6 0220 	rsb	r2, r6, #32
 80004b0:	fa2e f302 	lsr.w	r3, lr, r2
 80004b4:	40b7      	lsls	r7, r6
 80004b6:	40b1      	lsls	r1, r6
 80004b8:	fa20 f202 	lsr.w	r2, r0, r2
 80004bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c0:	430a      	orrs	r2, r1
 80004c2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004cc:	0c11      	lsrs	r1, r2, #16
 80004ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d2:	fb08 f904 	mul.w	r9, r8, r4
 80004d6:	40b0      	lsls	r0, r6
 80004d8:	4589      	cmp	r9, r1
 80004da:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004de:	b280      	uxth	r0, r0
 80004e0:	d93e      	bls.n	8000560 <__udivmoddi4+0x2e8>
 80004e2:	1879      	adds	r1, r7, r1
 80004e4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e8:	d201      	bcs.n	80004ee <__udivmoddi4+0x276>
 80004ea:	4589      	cmp	r9, r1
 80004ec:	d81f      	bhi.n	800052e <__udivmoddi4+0x2b6>
 80004ee:	eba1 0109 	sub.w	r1, r1, r9
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fe:	b292      	uxth	r2, r2
 8000500:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000504:	4542      	cmp	r2, r8
 8000506:	d229      	bcs.n	800055c <__udivmoddi4+0x2e4>
 8000508:	18ba      	adds	r2, r7, r2
 800050a:	f109 31ff 	add.w	r1, r9, #4294967295
 800050e:	d2c4      	bcs.n	800049a <__udivmoddi4+0x222>
 8000510:	4542      	cmp	r2, r8
 8000512:	d2c2      	bcs.n	800049a <__udivmoddi4+0x222>
 8000514:	f1a9 0102 	sub.w	r1, r9, #2
 8000518:	443a      	add	r2, r7
 800051a:	e7be      	b.n	800049a <__udivmoddi4+0x222>
 800051c:	45f0      	cmp	r8, lr
 800051e:	d29d      	bcs.n	800045c <__udivmoddi4+0x1e4>
 8000520:	ebbe 0302 	subs.w	r3, lr, r2
 8000524:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000528:	3801      	subs	r0, #1
 800052a:	46e1      	mov	r9, ip
 800052c:	e796      	b.n	800045c <__udivmoddi4+0x1e4>
 800052e:	eba7 0909 	sub.w	r9, r7, r9
 8000532:	4449      	add	r1, r9
 8000534:	f1a8 0c02 	sub.w	ip, r8, #2
 8000538:	fbb1 f9fe 	udiv	r9, r1, lr
 800053c:	fb09 f804 	mul.w	r8, r9, r4
 8000540:	e7db      	b.n	80004fa <__udivmoddi4+0x282>
 8000542:	4673      	mov	r3, lr
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1ce>
 8000546:	4650      	mov	r0, sl
 8000548:	e766      	b.n	8000418 <__udivmoddi4+0x1a0>
 800054a:	4608      	mov	r0, r1
 800054c:	e6fd      	b.n	800034a <__udivmoddi4+0xd2>
 800054e:	443b      	add	r3, r7
 8000550:	3a02      	subs	r2, #2
 8000552:	e733      	b.n	80003bc <__udivmoddi4+0x144>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	443b      	add	r3, r7
 800055a:	e71c      	b.n	8000396 <__udivmoddi4+0x11e>
 800055c:	4649      	mov	r1, r9
 800055e:	e79c      	b.n	800049a <__udivmoddi4+0x222>
 8000560:	eba1 0109 	sub.w	r1, r1, r9
 8000564:	46c4      	mov	ip, r8
 8000566:	fbb1 f9fe 	udiv	r9, r1, lr
 800056a:	fb09 f804 	mul.w	r8, r9, r4
 800056e:	e7c4      	b.n	80004fa <__udivmoddi4+0x282>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_UART_RxCpltCallback>:
uint8_t rx_byte;
#define MAX_LEN 100
char rx_buffer[MAX_LEN];
uint8_t idx = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a24      	ldr	r2, [pc, #144]	@ (8000614 <HAL_UART_RxCpltCallback+0xa0>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d141      	bne.n	800060a <HAL_UART_RxCpltCallback+0x96>
        if (rx_byte == '\r' || rx_byte == '\n') {
 8000586:	4b24      	ldr	r3, [pc, #144]	@ (8000618 <HAL_UART_RxCpltCallback+0xa4>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b0d      	cmp	r3, #13
 800058c:	d003      	beq.n	8000596 <HAL_UART_RxCpltCallback+0x22>
 800058e:	4b22      	ldr	r3, [pc, #136]	@ (8000618 <HAL_UART_RxCpltCallback+0xa4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b0a      	cmp	r3, #10
 8000594:	d122      	bne.n	80005dc <HAL_UART_RxCpltCallback+0x68>
            rx_buffer[idx] = '\0'; // null terminate
 8000596:	4b21      	ldr	r3, [pc, #132]	@ (800061c <HAL_UART_RxCpltCallback+0xa8>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	461a      	mov	r2, r3
 800059c:	4b20      	ldr	r3, [pc, #128]	@ (8000620 <HAL_UART_RxCpltCallback+0xac>)
 800059e:	2100      	movs	r1, #0
 80005a0:	5499      	strb	r1, [r3, r2]
            HAL_UART_Transmit(&huart3, (uint8_t*)"\nYou said: ", 11, HAL_MAX_DELAY);
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	220b      	movs	r2, #11
 80005a8:	491e      	ldr	r1, [pc, #120]	@ (8000624 <HAL_UART_RxCpltCallback+0xb0>)
 80005aa:	481f      	ldr	r0, [pc, #124]	@ (8000628 <HAL_UART_RxCpltCallback+0xb4>)
 80005ac:	f002 fe70 	bl	8003290 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart3, (uint8_t*)rx_buffer, strlen(rx_buffer), HAL_MAX_DELAY);
 80005b0:	481b      	ldr	r0, [pc, #108]	@ (8000620 <HAL_UART_RxCpltCallback+0xac>)
 80005b2:	f7ff fe41 	bl	8000238 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	4918      	ldr	r1, [pc, #96]	@ (8000620 <HAL_UART_RxCpltCallback+0xac>)
 80005c0:	4819      	ldr	r0, [pc, #100]	@ (8000628 <HAL_UART_RxCpltCallback+0xb4>)
 80005c2:	f002 fe65 	bl	8003290 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	2202      	movs	r2, #2
 80005cc:	4917      	ldr	r1, [pc, #92]	@ (800062c <HAL_UART_RxCpltCallback+0xb8>)
 80005ce:	4816      	ldr	r0, [pc, #88]	@ (8000628 <HAL_UART_RxCpltCallback+0xb4>)
 80005d0:	f002 fe5e 	bl	8003290 <HAL_UART_Transmit>
            idx = 0; // reset buffer
 80005d4:	4b11      	ldr	r3, [pc, #68]	@ (800061c <HAL_UART_RxCpltCallback+0xa8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
 80005da:	e011      	b.n	8000600 <HAL_UART_RxCpltCallback+0x8c>
        } else {
            rx_buffer[idx++] = rx_byte;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <HAL_UART_RxCpltCallback+0xa8>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	1c5a      	adds	r2, r3, #1
 80005e2:	b2d1      	uxtb	r1, r2
 80005e4:	4a0d      	ldr	r2, [pc, #52]	@ (800061c <HAL_UART_RxCpltCallback+0xa8>)
 80005e6:	7011      	strb	r1, [r2, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <HAL_UART_RxCpltCallback+0xa4>)
 80005ec:	7819      	ldrb	r1, [r3, #0]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <HAL_UART_RxCpltCallback+0xac>)
 80005f0:	5499      	strb	r1, [r3, r2]
            if (idx >= MAX_LEN) idx = 0; // simple overflow protection
 80005f2:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <HAL_UART_RxCpltCallback+0xa8>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b63      	cmp	r3, #99	@ 0x63
 80005f8:	d902      	bls.n	8000600 <HAL_UART_RxCpltCallback+0x8c>
 80005fa:	4b08      	ldr	r3, [pc, #32]	@ (800061c <HAL_UART_RxCpltCallback+0xa8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	4905      	ldr	r1, [pc, #20]	@ (8000618 <HAL_UART_RxCpltCallback+0xa4>)
 8000604:	4808      	ldr	r0, [pc, #32]	@ (8000628 <HAL_UART_RxCpltCallback+0xb4>)
 8000606:	f002 fecc 	bl	80033a2 <HAL_UART_Receive_IT>
    }
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40004800 	.word	0x40004800
 8000618:	200007b8 	.word	0x200007b8
 800061c:	20000820 	.word	0x20000820
 8000620:	200007bc 	.word	0x200007bc
 8000624:	08004efc 	.word	0x08004efc
 8000628:	20000250 	.word	0x20000250
 800062c:	08004f08 	.word	0x08004f08

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fc0f 	bl	8000e56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f814 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f930 	bl	80008a0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000640:	f000 f882 	bl	8000748 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000644:	f000 f8ce 	bl	80007e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000648:	f000 f8fc 	bl	8000844 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	4903      	ldr	r1, [pc, #12]	@ (800065c <main+0x2c>)
 8000650:	4803      	ldr	r0, [pc, #12]	@ (8000660 <main+0x30>)
 8000652:	f002 fea6 	bl	80033a2 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000656:	bf00      	nop
 8000658:	e7fd      	b.n	8000656 <main+0x26>
 800065a:	bf00      	nop
 800065c:	200007b8 	.word	0x200007b8
 8000660:	20000250 	.word	0x20000250

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	@ 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2234      	movs	r2, #52	@ 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f004 fc09 	bl	8004e8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000688:	f001 fc58 	bl	8001f3c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <SystemClock_Config+0xdc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	4a2b      	ldr	r2, [pc, #172]	@ (8000740 <SystemClock_Config+0xdc>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	@ 0x40
 8000698:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <SystemClock_Config+0xdc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a4:	4b27      	ldr	r3, [pc, #156]	@ (8000744 <SystemClock_Config+0xe0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ac:	4a25      	ldr	r2, [pc, #148]	@ (8000744 <SystemClock_Config+0xe0>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b23      	ldr	r3, [pc, #140]	@ (8000744 <SystemClock_Config+0xe0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006d8:	2360      	movs	r3, #96	@ 0x60
 80006da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fc85 	bl	8001ffc <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f8:	f000 f974 	bl	80009e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006fc:	f001 fc2e 	bl	8001f5c <HAL_PWREx_EnableOverDrive>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000706:	f000 f96d 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2103      	movs	r1, #3
 8000726:	4618      	mov	r0, r3
 8000728:	f001 ff16 	bl	8002558 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000732:	f000 f957 	bl	80009e4 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	@ 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_ETH_Init+0x84>)
 800074e:	4a20      	ldr	r2, [pc, #128]	@ (80007d0 <MX_ETH_Init+0x88>)
 8000750:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000752:	4b20      	ldr	r3, [pc, #128]	@ (80007d4 <MX_ETH_Init+0x8c>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000758:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <MX_ETH_Init+0x8c>)
 800075a:	2280      	movs	r2, #128	@ 0x80
 800075c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_ETH_Init+0x8c>)
 8000760:	22e1      	movs	r2, #225	@ 0xe1
 8000762:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000764:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_ETH_Init+0x8c>)
 8000766:	2200      	movs	r2, #0
 8000768:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_ETH_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_ETH_Init+0x8c>)
 8000772:	2200      	movs	r2, #0
 8000774:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000776:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <MX_ETH_Init+0x84>)
 8000778:	4a16      	ldr	r2, [pc, #88]	@ (80007d4 <MX_ETH_Init+0x8c>)
 800077a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800077c:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <MX_ETH_Init+0x84>)
 800077e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000782:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000784:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_ETH_Init+0x84>)
 8000786:	4a14      	ldr	r2, [pc, #80]	@ (80007d8 <MX_ETH_Init+0x90>)
 8000788:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <MX_ETH_Init+0x84>)
 800078c:	4a13      	ldr	r2, [pc, #76]	@ (80007dc <MX_ETH_Init+0x94>)
 800078e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000790:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_ETH_Init+0x84>)
 8000792:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000796:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000798:	480c      	ldr	r0, [pc, #48]	@ (80007cc <MX_ETH_Init+0x84>)
 800079a:	f000 fd81 	bl	80012a0 <HAL_ETH_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007a4:	f000 f91e 	bl	80009e4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a8:	2238      	movs	r2, #56	@ 0x38
 80007aa:	2100      	movs	r1, #0
 80007ac:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <MX_ETH_Init+0x98>)
 80007ae:	f004 fb6c 	bl	8004e8a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_ETH_Init+0x98>)
 80007b4:	2221      	movs	r2, #33	@ 0x21
 80007b6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_ETH_Init+0x98>)
 80007ba:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007be:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <MX_ETH_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200001a0 	.word	0x200001a0
 80007d0:	40028000 	.word	0x40028000
 80007d4:	20000824 	.word	0x20000824
 80007d8:	200000ac 	.word	0x200000ac
 80007dc:	2000000c 	.word	0x2000000c
 80007e0:	20000168 	.word	0x20000168

080007e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_USART3_UART_Init+0x58>)
 80007ea:	4a15      	ldr	r2, [pc, #84]	@ (8000840 <MX_USART3_UART_Init+0x5c>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <MX_USART3_UART_Init+0x58>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_USART3_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_USART3_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_USART3_UART_Init+0x58>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_USART3_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_USART3_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_USART3_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_USART3_UART_Init+0x58>)
 8000828:	f002 fce4 	bl	80031f4 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000832:	f000 f8d7 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000250 	.word	0x20000250
 8000840:	40004800 	.word	0x40004800

08000844 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800084e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2206      	movs	r2, #6
 8000854:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2202      	movs	r2, #2
 800085a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	2202      	movs	r2, #2
 8000866:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2201      	movs	r2, #1
 800086c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	2201      	movs	r2, #1
 800087e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	f001 fa1d 	bl	8001cc6 <HAL_PCD_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 f8a7 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200002d8 	.word	0x200002d8

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	@ 0x30
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b47      	ldr	r3, [pc, #284]	@ (80009d4 <MX_GPIO_Init+0x134>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a46      	ldr	r2, [pc, #280]	@ (80009d4 <MX_GPIO_Init+0x134>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b44      	ldr	r3, [pc, #272]	@ (80009d4 <MX_GPIO_Init+0x134>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	4b41      	ldr	r3, [pc, #260]	@ (80009d4 <MX_GPIO_Init+0x134>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a40      	ldr	r2, [pc, #256]	@ (80009d4 <MX_GPIO_Init+0x134>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b3e      	ldr	r3, [pc, #248]	@ (80009d4 <MX_GPIO_Init+0x134>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b3b      	ldr	r3, [pc, #236]	@ (80009d4 <MX_GPIO_Init+0x134>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a3a      	ldr	r2, [pc, #232]	@ (80009d4 <MX_GPIO_Init+0x134>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b38      	ldr	r3, [pc, #224]	@ (80009d4 <MX_GPIO_Init+0x134>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b35      	ldr	r3, [pc, #212]	@ (80009d4 <MX_GPIO_Init+0x134>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a34      	ldr	r2, [pc, #208]	@ (80009d4 <MX_GPIO_Init+0x134>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b32      	ldr	r3, [pc, #200]	@ (80009d4 <MX_GPIO_Init+0x134>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	4b2f      	ldr	r3, [pc, #188]	@ (80009d4 <MX_GPIO_Init+0x134>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a2e      	ldr	r2, [pc, #184]	@ (80009d4 <MX_GPIO_Init+0x134>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b2c      	ldr	r3, [pc, #176]	@ (80009d4 <MX_GPIO_Init+0x134>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092e:	4b29      	ldr	r3, [pc, #164]	@ (80009d4 <MX_GPIO_Init+0x134>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a28      	ldr	r2, [pc, #160]	@ (80009d4 <MX_GPIO_Init+0x134>)
 8000934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <MX_GPIO_Init+0x134>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f244 0181 	movw	r1, #16513	@ 0x4081
 800094c:	4822      	ldr	r0, [pc, #136]	@ (80009d8 <MX_GPIO_Init+0x138>)
 800094e:	f001 f9a1 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2140      	movs	r1, #64	@ 0x40
 8000956:	4821      	ldr	r0, [pc, #132]	@ (80009dc <MX_GPIO_Init+0x13c>)
 8000958:	f001 f99c 	bl	8001c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800095c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	481b      	ldr	r0, [pc, #108]	@ (80009e0 <MX_GPIO_Init+0x140>)
 8000974:	f000 ffe2 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000978:	f244 0381 	movw	r3, #16513	@ 0x4081
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4811      	ldr	r0, [pc, #68]	@ (80009d8 <MX_GPIO_Init+0x138>)
 8000992:	f000 ffd3 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000996:	2340      	movs	r3, #64	@ 0x40
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	480b      	ldr	r0, [pc, #44]	@ (80009dc <MX_GPIO_Init+0x13c>)
 80009ae:	f000 ffc5 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b2:	2380      	movs	r3, #128	@ 0x80
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_GPIO_Init+0x13c>)
 80009c6:	f000 ffb9 	bl	800193c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	@ 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40021800 	.word	0x40021800
 80009e0:	40020800 	.word	0x40020800

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <HAL_MspInit+0x44>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000a34 <HAL_MspInit+0x44>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_MspInit+0x44>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08e      	sub	sp, #56	@ 0x38
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a4e      	ldr	r2, [pc, #312]	@ (8000b90 <HAL_ETH_MspInit+0x158>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	f040 8096 	bne.w	8000b88 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a60:	4a4c      	ldr	r2, [pc, #304]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000a62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a68:	4b4a      	ldr	r3, [pc, #296]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a70:	623b      	str	r3, [r7, #32]
 8000a72:	6a3b      	ldr	r3, [r7, #32]
 8000a74:	4b47      	ldr	r3, [pc, #284]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a78:	4a46      	ldr	r2, [pc, #280]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000a7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a80:	4b44      	ldr	r3, [pc, #272]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a88:	61fb      	str	r3, [r7, #28]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	4b41      	ldr	r3, [pc, #260]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a90:	4a40      	ldr	r2, [pc, #256]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000a92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a98:	4b3e      	ldr	r3, [pc, #248]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa8:	4a3a      	ldr	r2, [pc, #232]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab0:	4b38      	ldr	r3, [pc, #224]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b35      	ldr	r3, [pc, #212]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac0:	4a34      	ldr	r2, [pc, #208]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac8:	4b32      	ldr	r3, [pc, #200]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000ada:	f043 0302 	orr.w	r3, r3, #2
 8000ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aec:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af0:	4a28      	ldr	r2, [pc, #160]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000af6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af8:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <HAL_ETH_MspInit+0x15c>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b04:	2332      	movs	r3, #50	@ 0x32
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b14:	230b      	movs	r3, #11
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481e      	ldr	r0, [pc, #120]	@ (8000b98 <HAL_ETH_MspInit+0x160>)
 8000b20:	f000 ff0c 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b24:	2386      	movs	r3, #134	@ 0x86
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b34:	230b      	movs	r3, #11
 8000b36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4817      	ldr	r0, [pc, #92]	@ (8000b9c <HAL_ETH_MspInit+0x164>)
 8000b40:	f000 fefc 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b56:	230b      	movs	r3, #11
 8000b58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480f      	ldr	r0, [pc, #60]	@ (8000ba0 <HAL_ETH_MspInit+0x168>)
 8000b62:	f000 feeb 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b66:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b78:	230b      	movs	r3, #11
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4808      	ldr	r0, [pc, #32]	@ (8000ba4 <HAL_ETH_MspInit+0x16c>)
 8000b84:	f000 feda 	bl	800193c <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000b88:	bf00      	nop
 8000b8a:	3738      	adds	r7, #56	@ 0x38
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40028000 	.word	0x40028000
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40021800 	.word	0x40021800

08000ba8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0ae      	sub	sp, #184	@ 0xb8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2290      	movs	r2, #144	@ 0x90
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 f95e 	bl	8004e8a <memset>
  if(huart->Instance==USART3)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a26      	ldr	r2, [pc, #152]	@ (8000c6c <HAL_UART_MspInit+0xc4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d144      	bne.n	8000c62 <HAL_UART_MspInit+0xba>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bdc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fedc 	bl	80029a4 <HAL_RCCEx_PeriphCLKConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bf2:	f7ff fef7 	bl	80009e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <HAL_UART_MspInit+0xc8>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8000c70 <HAL_UART_MspInit+0xc8>)
 8000bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c02:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <HAL_UART_MspInit+0xc8>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <HAL_UART_MspInit+0xc8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a17      	ldr	r2, [pc, #92]	@ (8000c70 <HAL_UART_MspInit+0xc8>)
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <HAL_UART_MspInit+0xc8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c40:	2307      	movs	r3, #7
 8000c42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4809      	ldr	r0, [pc, #36]	@ (8000c74 <HAL_UART_MspInit+0xcc>)
 8000c4e:	f000 fe75 	bl	800193c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2027      	movs	r0, #39	@ 0x27
 8000c58:	f000 fa59 	bl	800110e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c5c:	2027      	movs	r0, #39	@ 0x27
 8000c5e:	f000 fa72 	bl	8001146 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c62:	bf00      	nop
 8000c64:	37b8      	adds	r7, #184	@ 0xb8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40004800 	.word	0x40004800
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020c00 	.word	0x40020c00

08000c78 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0ae      	sub	sp, #184	@ 0xb8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2290      	movs	r2, #144	@ 0x90
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 f8f6 	bl	8004e8a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ca6:	d159      	bne.n	8000d5c <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ca8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000cac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 fe73 	bl	80029a4 <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000cc4:	f7ff fe8e 	bl	80009e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b26      	ldr	r3, [pc, #152]	@ (8000d64 <HAL_PCD_MspInit+0xec>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ccc:	4a25      	ldr	r2, [pc, #148]	@ (8000d64 <HAL_PCD_MspInit+0xec>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd4:	4b23      	ldr	r3, [pc, #140]	@ (8000d64 <HAL_PCD_MspInit+0xec>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ce0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4818      	ldr	r0, [pc, #96]	@ (8000d68 <HAL_PCD_MspInit+0xf0>)
 8000d08:	f000 fe18 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d24:	4619      	mov	r1, r3
 8000d26:	4810      	ldr	r0, [pc, #64]	@ (8000d68 <HAL_PCD_MspInit+0xf0>)
 8000d28:	f000 fe08 	bl	800193c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <HAL_PCD_MspInit+0xec>)
 8000d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d30:	4a0c      	ldr	r2, [pc, #48]	@ (8000d64 <HAL_PCD_MspInit+0xec>)
 8000d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d36:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d38:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <HAL_PCD_MspInit+0xec>)
 8000d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <HAL_PCD_MspInit+0xec>)
 8000d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d48:	4a06      	ldr	r2, [pc, #24]	@ (8000d64 <HAL_PCD_MspInit+0xec>)
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d50:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <HAL_PCD_MspInit+0xec>)
 8000d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000d5c:	bf00      	nop
 8000d5e:	37b8      	adds	r7, #184	@ 0xb8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <NMI_Handler+0x4>

08000d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <MemManage_Handler+0x4>

08000d84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc2:	f000 f885 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <USART3_IRQHandler+0x10>)
 8000dd2:	f002 fb2b 	bl	800342c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000250 	.word	0x20000250

08000de0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e08:	f7ff ffea 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	@ (8000e44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	@ (8000e50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f004 f833 	bl	8004e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fbfb 	bl	8000630 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e48:	08004f34 	.word	0x08004f34
  ldr r2, =_sbss
 8000e4c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000e50:	20000830 	.word	0x20000830

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>

08000e56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f000 f94c 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f000 f805 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e66:	f7ff fdc3 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f967 	bl	8001162 <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 f92f 	bl	800110e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	2000082c 	.word	0x2000082c

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000082c 	.word	0x2000082c

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x40>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x40>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00
 8000f9c:	05fa0000 	.word	0x05fa0000

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	@ (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	@ (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	@ (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	@ 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	@ 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f7ff ff8e 	bl	8000ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff29 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001120:	f7ff ff3e 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 8001124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6978      	ldr	r0, [r7, #20]
 800112c:	f7ff ff8e 	bl	800104c <NVIC_EncodePriority>
 8001130:	4602      	mov	r2, r0
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff5d 	bl	8000ff8 <__NVIC_SetPriority>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff31 	bl	8000fbc <__NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffa2 	bl	80010b4 <SysTick_Config>
 8001170:	4603      	mov	r3, r0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001186:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff feb6 	bl	8000ef8 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d008      	beq.n	80011ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2280      	movs	r2, #128	@ 0x80
 800119e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e052      	b.n	8001252 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0216 	bic.w	r2, r2, #22
 80011ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d103      	bne.n	80011dc <HAL_DMA_Abort+0x62>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0208 	bic.w	r2, r2, #8
 80011ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011fc:	e013      	b.n	8001226 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011fe:	f7ff fe7b 	bl	8000ef8 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b05      	cmp	r3, #5
 800120a:	d90c      	bls.n	8001226 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2220      	movs	r2, #32
 8001210:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2203      	movs	r2, #3
 8001216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e015      	b.n	8001252 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1e4      	bne.n	80011fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001238:	223f      	movs	r2, #63	@ 0x3f
 800123a:	409a      	lsls	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d004      	beq.n	8001278 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2280      	movs	r2, #128	@ 0x80
 8001272:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e00c      	b.n	8001292 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2205      	movs	r2, #5
 800127c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e086      	b.n	80013c0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2223      	movs	r2, #35	@ 0x23
 80012c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fbb7 	bl	8000a38 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	4b3f      	ldr	r3, [pc, #252]	@ (80013c8 <HAL_ETH_Init+0x128>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a3e      	ldr	r2, [pc, #248]	@ (80013c8 <HAL_ETH_Init+0x128>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b3c      	ldr	r3, [pc, #240]	@ (80013c8 <HAL_ETH_Init+0x128>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012e2:	4b3a      	ldr	r3, [pc, #232]	@ (80013cc <HAL_ETH_Init+0x12c>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4a39      	ldr	r2, [pc, #228]	@ (80013cc <HAL_ETH_Init+0x12c>)
 80012e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80012ec:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012ee:	4b37      	ldr	r3, [pc, #220]	@ (80013cc <HAL_ETH_Init+0x12c>)
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	4935      	ldr	r1, [pc, #212]	@ (80013cc <HAL_ETH_Init+0x12c>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012fc:	4b33      	ldr	r3, [pc, #204]	@ (80013cc <HAL_ETH_Init+0x12c>)
 80012fe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001316:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001318:	f7ff fdee 	bl	8000ef8 <HAL_GetTick>
 800131c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800131e:	e011      	b.n	8001344 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001320:	f7ff fdea 	bl	8000ef8 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800132e:	d909      	bls.n	8001344 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2204      	movs	r2, #4
 8001334:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	22e0      	movs	r2, #224	@ 0xe0
 800133c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e03d      	b.n	80013c0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1e4      	bne.n	8001320 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f97a 	bl	8001650 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fa25 	bl	80017ac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 fa7b 	bl	800185e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	461a      	mov	r2, r3
 800136e:	2100      	movs	r1, #0
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f9e3 	bl	800173c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001384:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <HAL_ETH_Init+0x130>)
 8001394:	430b      	orrs	r3, r1
 8001396:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80013aa:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2210      	movs	r2, #16
 80013ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40013800 	.word	0x40013800
 80013d0:	00020060 	.word	0x00020060

080013d4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4b53      	ldr	r3, [pc, #332]	@ (8001538 <ETH_SetMACConfig+0x164>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	7b9b      	ldrb	r3, [r3, #14]
 80013f2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	7c12      	ldrb	r2, [r2, #16]
 80013f8:	2a00      	cmp	r2, #0
 80013fa:	d102      	bne.n	8001402 <ETH_SetMACConfig+0x2e>
 80013fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001400:	e000      	b.n	8001404 <ETH_SetMACConfig+0x30>
 8001402:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001404:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	7c52      	ldrb	r2, [r2, #17]
 800140a:	2a00      	cmp	r2, #0
 800140c:	d102      	bne.n	8001414 <ETH_SetMACConfig+0x40>
 800140e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001412:	e000      	b.n	8001416 <ETH_SetMACConfig+0x42>
 8001414:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001416:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800141c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	7fdb      	ldrb	r3, [r3, #31]
 8001422:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001424:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800142a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	7f92      	ldrb	r2, [r2, #30]
 8001430:	2a00      	cmp	r2, #0
 8001432:	d102      	bne.n	800143a <ETH_SetMACConfig+0x66>
 8001434:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001438:	e000      	b.n	800143c <ETH_SetMACConfig+0x68>
 800143a:	2200      	movs	r2, #0
                        macconf->Speed |
 800143c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	7f1b      	ldrb	r3, [r3, #28]
 8001442:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001444:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800144a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	791b      	ldrb	r3, [r3, #4]
 8001450:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001452:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	f892 2020 	ldrb.w	r2, [r2, #32]
 800145a:	2a00      	cmp	r2, #0
 800145c:	d102      	bne.n	8001464 <ETH_SetMACConfig+0x90>
 800145e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001462:	e000      	b.n	8001466 <ETH_SetMACConfig+0x92>
 8001464:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001466:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	7bdb      	ldrb	r3, [r3, #15]
 800146c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800146e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001474:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800147c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800147e:	4313      	orrs	r3, r2
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001496:	2001      	movs	r0, #1
 8001498:	f7ff fd3a 	bl	8000f10 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80014b2:	4013      	ands	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ba:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80014c2:	2a00      	cmp	r2, #0
 80014c4:	d101      	bne.n	80014ca <ETH_SetMACConfig+0xf6>
 80014c6:	2280      	movs	r2, #128	@ 0x80
 80014c8:	e000      	b.n	80014cc <ETH_SetMACConfig+0xf8>
 80014ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014cc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80014da:	2a01      	cmp	r2, #1
 80014dc:	d101      	bne.n	80014e2 <ETH_SetMACConfig+0x10e>
 80014de:	2208      	movs	r2, #8
 80014e0:	e000      	b.n	80014e4 <ETH_SetMACConfig+0x110>
 80014e2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014e4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80014ec:	2a01      	cmp	r2, #1
 80014ee:	d101      	bne.n	80014f4 <ETH_SetMACConfig+0x120>
 80014f0:	2204      	movs	r2, #4
 80014f2:	e000      	b.n	80014f6 <ETH_SetMACConfig+0x122>
 80014f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80014fe:	2a01      	cmp	r2, #1
 8001500:	d101      	bne.n	8001506 <ETH_SetMACConfig+0x132>
 8001502:	2202      	movs	r2, #2
 8001504:	e000      	b.n	8001508 <ETH_SetMACConfig+0x134>
 8001506:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001508:	4313      	orrs	r3, r2
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fcf5 	bl	8000f10 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	fd20810f 	.word	0xfd20810f

0800153c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4b3d      	ldr	r3, [pc, #244]	@ (800164c <ETH_SetDMAConfig+0x110>)
 8001556:	4013      	ands	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	7b1b      	ldrb	r3, [r3, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <ETH_SetDMAConfig+0x2c>
 8001562:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001566:	e000      	b.n	800156a <ETH_SetDMAConfig+0x2e>
 8001568:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	7b5b      	ldrb	r3, [r3, #13]
 800156e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001570:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	7f52      	ldrb	r2, [r2, #29]
 8001576:	2a00      	cmp	r2, #0
 8001578:	d102      	bne.n	8001580 <ETH_SetDMAConfig+0x44>
 800157a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800157e:	e000      	b.n	8001582 <ETH_SetDMAConfig+0x46>
 8001580:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001582:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	7b9b      	ldrb	r3, [r3, #14]
 8001588:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800158a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001590:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	7f1b      	ldrb	r3, [r3, #28]
 8001596:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001598:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	7f9b      	ldrb	r3, [r3, #30]
 800159e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015a0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015ae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015b0:	4313      	orrs	r3, r2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c0:	461a      	mov	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff fc9c 	bl	8000f10 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015e0:	461a      	mov	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	791b      	ldrb	r3, [r3, #4]
 80015ea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015f0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015f6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015fc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001604:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001606:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800160e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001614:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800161e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001622:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff fc6d 	bl	8000f10 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	f8de3f23 	.word	0xf8de3f23

08001650 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b0a6      	sub	sp, #152	@ 0x98
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001658:	2301      	movs	r3, #1
 800165a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001664:	2300      	movs	r3, #0
 8001666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800166e:	2301      	movs	r3, #1
 8001670:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800167a:	2301      	movs	r3, #1
 800167c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001680:	2301      	movs	r3, #1
 8001682:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001692:	2300      	movs	r3, #0
 8001694:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800169c:	2300      	movs	r3, #0
 800169e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016ce:	4619      	mov	r1, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fe7f 	bl	80013d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016da:	2301      	movs	r3, #1
 80016dc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016de:	2301      	movs	r3, #1
 80016e0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016e4:	2301      	movs	r3, #1
 80016e6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016fc:	2301      	movs	r3, #1
 80016fe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001702:	2301      	movs	r3, #1
 8001704:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001706:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800170a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800170c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001710:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001712:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001716:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001718:	2301      	movs	r3, #1
 800171a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800171e:	2300      	movs	r3, #0
 8001720:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4619      	mov	r1, r3
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff05 	bl	800153c <ETH_SetDMAConfig>
}
 8001732:	bf00      	nop
 8001734:	3798      	adds	r7, #152	@ 0x98
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3305      	adds	r3, #5
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	3204      	adds	r2, #4
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	4313      	orrs	r3, r2
 8001758:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <ETH_MACAddressConfig+0x68>)
 800175e:	4413      	add	r3, r2
 8001760:	461a      	mov	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3303      	adds	r3, #3
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	061a      	lsls	r2, r3, #24
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3302      	adds	r3, #2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	041b      	lsls	r3, r3, #16
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3301      	adds	r3, #1
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	4313      	orrs	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	4313      	orrs	r3, r2
 8001788:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <ETH_MACAddressConfig+0x6c>)
 800178e:	4413      	add	r3, r2
 8001790:	461a      	mov	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	6013      	str	r3, [r2, #0]
}
 8001796:	bf00      	nop
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40028040 	.word	0x40028040
 80017a8:	40028044 	.word	0x40028044

080017ac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e03e      	b.n	8001838 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68d9      	ldr	r1, [r3, #12]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	440b      	add	r3, r1
 80017ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	3206      	adds	r2, #6
 80017ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d80c      	bhi.n	800181c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68d9      	ldr	r1, [r3, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	461a      	mov	r2, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	e004      	b.n	8001826 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3301      	adds	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b03      	cmp	r3, #3
 800183c:	d9bd      	bls.n	80017ba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001850:	611a      	str	r2, [r3, #16]
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e048      	b.n	80018fe <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6919      	ldr	r1, [r3, #16]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2200      	movs	r2, #0
 8001888:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80018a8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	3212      	adds	r2, #18
 80018ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d80c      	bhi.n	80018ee <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6919      	ldr	r1, [r3, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	461a      	mov	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	e004      	b.n	80018f8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	461a      	mov	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3301      	adds	r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b03      	cmp	r3, #3
 8001902:	d9b3      	bls.n	800186c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800192e:	60da      	str	r2, [r3, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	@ 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	e175      	b.n	8001c48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800195c:	2201      	movs	r2, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	429a      	cmp	r2, r3
 8001976:	f040 8164 	bne.w	8001c42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d005      	beq.n	8001992 <HAL_GPIO_Init+0x56>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d130      	bne.n	80019f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 0201 	and.w	r2, r3, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d017      	beq.n	8001a30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d123      	bne.n	8001a84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	08da      	lsrs	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3208      	adds	r2, #8
 8001a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	08da      	lsrs	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3208      	adds	r2, #8
 8001a7e:	69b9      	ldr	r1, [r7, #24]
 8001a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0203 	and.w	r2, r3, #3
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80be 	beq.w	8001c42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	4b66      	ldr	r3, [pc, #408]	@ (8001c60 <HAL_GPIO_Init+0x324>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aca:	4a65      	ldr	r2, [pc, #404]	@ (8001c60 <HAL_GPIO_Init+0x324>)
 8001acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ad2:	4b63      	ldr	r3, [pc, #396]	@ (8001c60 <HAL_GPIO_Init+0x324>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ade:	4a61      	ldr	r2, [pc, #388]	@ (8001c64 <HAL_GPIO_Init+0x328>)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	220f      	movs	r2, #15
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a58      	ldr	r2, [pc, #352]	@ (8001c68 <HAL_GPIO_Init+0x32c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d037      	beq.n	8001b7a <HAL_GPIO_Init+0x23e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a57      	ldr	r2, [pc, #348]	@ (8001c6c <HAL_GPIO_Init+0x330>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d031      	beq.n	8001b76 <HAL_GPIO_Init+0x23a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a56      	ldr	r2, [pc, #344]	@ (8001c70 <HAL_GPIO_Init+0x334>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d02b      	beq.n	8001b72 <HAL_GPIO_Init+0x236>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a55      	ldr	r2, [pc, #340]	@ (8001c74 <HAL_GPIO_Init+0x338>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d025      	beq.n	8001b6e <HAL_GPIO_Init+0x232>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a54      	ldr	r2, [pc, #336]	@ (8001c78 <HAL_GPIO_Init+0x33c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d01f      	beq.n	8001b6a <HAL_GPIO_Init+0x22e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a53      	ldr	r2, [pc, #332]	@ (8001c7c <HAL_GPIO_Init+0x340>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d019      	beq.n	8001b66 <HAL_GPIO_Init+0x22a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a52      	ldr	r2, [pc, #328]	@ (8001c80 <HAL_GPIO_Init+0x344>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_GPIO_Init+0x226>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a51      	ldr	r2, [pc, #324]	@ (8001c84 <HAL_GPIO_Init+0x348>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00d      	beq.n	8001b5e <HAL_GPIO_Init+0x222>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a50      	ldr	r2, [pc, #320]	@ (8001c88 <HAL_GPIO_Init+0x34c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d007      	beq.n	8001b5a <HAL_GPIO_Init+0x21e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001c8c <HAL_GPIO_Init+0x350>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_GPIO_Init+0x21a>
 8001b52:	2309      	movs	r3, #9
 8001b54:	e012      	b.n	8001b7c <HAL_GPIO_Init+0x240>
 8001b56:	230a      	movs	r3, #10
 8001b58:	e010      	b.n	8001b7c <HAL_GPIO_Init+0x240>
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	e00e      	b.n	8001b7c <HAL_GPIO_Init+0x240>
 8001b5e:	2307      	movs	r3, #7
 8001b60:	e00c      	b.n	8001b7c <HAL_GPIO_Init+0x240>
 8001b62:	2306      	movs	r3, #6
 8001b64:	e00a      	b.n	8001b7c <HAL_GPIO_Init+0x240>
 8001b66:	2305      	movs	r3, #5
 8001b68:	e008      	b.n	8001b7c <HAL_GPIO_Init+0x240>
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x240>
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e004      	b.n	8001b7c <HAL_GPIO_Init+0x240>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e002      	b.n	8001b7c <HAL_GPIO_Init+0x240>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <HAL_GPIO_Init+0x240>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	f002 0203 	and.w	r2, r2, #3
 8001b82:	0092      	lsls	r2, r2, #2
 8001b84:	4093      	lsls	r3, r2
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b8c:	4935      	ldr	r1, [pc, #212]	@ (8001c64 <HAL_GPIO_Init+0x328>)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	3302      	adds	r3, #2
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c90 <HAL_GPIO_Init+0x354>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bbe:	4a34      	ldr	r2, [pc, #208]	@ (8001c90 <HAL_GPIO_Init+0x354>)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc4:	4b32      	ldr	r3, [pc, #200]	@ (8001c90 <HAL_GPIO_Init+0x354>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be8:	4a29      	ldr	r2, [pc, #164]	@ (8001c90 <HAL_GPIO_Init+0x354>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bee:	4b28      	ldr	r3, [pc, #160]	@ (8001c90 <HAL_GPIO_Init+0x354>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c12:	4a1f      	ldr	r2, [pc, #124]	@ (8001c90 <HAL_GPIO_Init+0x354>)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <HAL_GPIO_Init+0x354>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c3c:	4a14      	ldr	r2, [pc, #80]	@ (8001c90 <HAL_GPIO_Init+0x354>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3301      	adds	r3, #1
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	2b0f      	cmp	r3, #15
 8001c4c:	f67f ae86 	bls.w	800195c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3724      	adds	r7, #36	@ 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40013800 	.word	0x40013800
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	40020800 	.word	0x40020800
 8001c74:	40020c00 	.word	0x40020c00
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40021400 	.word	0x40021400
 8001c80:	40021800 	.word	0x40021800
 8001c84:	40021c00 	.word	0x40021c00
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40022400 	.word	0x40022400
 8001c90:	40013c00 	.word	0x40013c00

08001c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	807b      	strh	r3, [r7, #2]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ca4:	787b      	ldrb	r3, [r7, #1]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001caa:	887a      	ldrh	r2, [r7, #2]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cb0:	e003      	b.n	8001cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cb2:	887b      	ldrh	r3, [r7, #2]
 8001cb4:	041a      	lsls	r2, r3, #16
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	619a      	str	r2, [r3, #24]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af02      	add	r7, sp, #8
 8001ccc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e108      	b.n	8001eea <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe ffc0 	bl	8000c78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d06:	d102      	bne.n	8001d0e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 fe24 	bl	8004960 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	7c1a      	ldrb	r2, [r3, #16]
 8001d20:	f88d 2000 	strb.w	r2, [sp]
 8001d24:	3304      	adds	r3, #4
 8001d26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d28:	f002 fdc0 	bl	80048ac <USB_CoreInit>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2202      	movs	r2, #2
 8001d36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0d5      	b.n	8001eea <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 fe1c 	bl	8004982 <USB_SetCurrentMode>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0c6      	b.n	8001eea <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e04a      	b.n	8001df8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3315      	adds	r3, #21
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3314      	adds	r3, #20
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	b298      	uxth	r0, r3
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	332e      	adds	r3, #46	@ 0x2e
 8001d9e:	4602      	mov	r2, r0
 8001da0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	3318      	adds	r3, #24
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	331c      	adds	r3, #28
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	3320      	adds	r3, #32
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	3324      	adds	r3, #36	@ 0x24
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	3301      	adds	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	791b      	ldrb	r3, [r3, #4]
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d3af      	bcc.n	8001d62 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e044      	b.n	8001e92 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	791b      	ldrb	r3, [r3, #4]
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d3b5      	bcc.n	8001e08 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7c1a      	ldrb	r2, [r3, #16]
 8001ea4:	f88d 2000 	strb.w	r2, [sp]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eac:	f002 fdb6 	bl	8004a1c <USB_DevInit>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e013      	b.n	8001eea <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7b1b      	ldrb	r3, [r3, #12]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d102      	bne.n	8001ede <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f80b 	bl	8001ef4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 ff71 	bl	8004dca <USB_DevDisconnect>

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f22:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <HAL_PCDEx_ActivateLPM+0x44>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	10000003 	.word	0x10000003

08001f3c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40007000 	.word	0x40007000

08001f5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b23      	ldr	r3, [pc, #140]	@ (8001ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	4a22      	ldr	r2, [pc, #136]	@ (8001ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f72:	4b20      	ldr	r3, [pc, #128]	@ (8001ff4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f88:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f8a:	f7fe ffb5 	bl	8000ef8 <HAL_GetTick>
 8001f8e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f90:	e009      	b.n	8001fa6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f92:	f7fe ffb1 	bl	8000ef8 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fa0:	d901      	bls.n	8001fa6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e022      	b.n	8001fec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fa6:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb2:	d1ee      	bne.n	8001f92 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fb4:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fbe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fc0:	f7fe ff9a 	bl	8000ef8 <HAL_GetTick>
 8001fc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fc6:	e009      	b.n	8001fdc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fc8:	f7fe ff96 	bl	8000ef8 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fd6:	d901      	bls.n	8001fdc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e007      	b.n	8001fec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001fe8:	d1ee      	bne.n	8001fc8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40007000 	.word	0x40007000

08001ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e29b      	b.n	800254a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8087 	beq.w	800212e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002020:	4b96      	ldr	r3, [pc, #600]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b04      	cmp	r3, #4
 800202a:	d00c      	beq.n	8002046 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202c:	4b93      	ldr	r3, [pc, #588]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	2b08      	cmp	r3, #8
 8002036:	d112      	bne.n	800205e <HAL_RCC_OscConfig+0x62>
 8002038:	4b90      	ldr	r3, [pc, #576]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002040:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002044:	d10b      	bne.n	800205e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002046:	4b8d      	ldr	r3, [pc, #564]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d06c      	beq.n	800212c <HAL_RCC_OscConfig+0x130>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d168      	bne.n	800212c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e275      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002066:	d106      	bne.n	8002076 <HAL_RCC_OscConfig+0x7a>
 8002068:	4b84      	ldr	r3, [pc, #528]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a83      	ldr	r2, [pc, #524]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 800206e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	e02e      	b.n	80020d4 <HAL_RCC_OscConfig+0xd8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x9c>
 800207e:	4b7f      	ldr	r3, [pc, #508]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a7e      	ldr	r2, [pc, #504]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b7c      	ldr	r3, [pc, #496]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a7b      	ldr	r2, [pc, #492]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002090:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e01d      	b.n	80020d4 <HAL_RCC_OscConfig+0xd8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0xc0>
 80020a2:	4b76      	ldr	r3, [pc, #472]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a75      	ldr	r2, [pc, #468]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80020a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4b73      	ldr	r3, [pc, #460]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a72      	ldr	r2, [pc, #456]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80020b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	e00b      	b.n	80020d4 <HAL_RCC_OscConfig+0xd8>
 80020bc:	4b6f      	ldr	r3, [pc, #444]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a6e      	ldr	r2, [pc, #440]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80020c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b6c      	ldr	r3, [pc, #432]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a6b      	ldr	r2, [pc, #428]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80020ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d013      	beq.n	8002104 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7fe ff0c 	bl	8000ef8 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7fe ff08 	bl	8000ef8 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	@ 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e229      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b61      	ldr	r3, [pc, #388]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0xe8>
 8002102:	e014      	b.n	800212e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7fe fef8 	bl	8000ef8 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7fe fef4 	bl	8000ef8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	@ 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e215      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	4b57      	ldr	r3, [pc, #348]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x110>
 800212a:	e000      	b.n	800212e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d069      	beq.n	800220e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800213a:	4b50      	ldr	r3, [pc, #320]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002146:	4b4d      	ldr	r3, [pc, #308]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b08      	cmp	r3, #8
 8002150:	d11c      	bne.n	800218c <HAL_RCC_OscConfig+0x190>
 8002152:	4b4a      	ldr	r3, [pc, #296]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d116      	bne.n	800218c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215e:	4b47      	ldr	r3, [pc, #284]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <HAL_RCC_OscConfig+0x17a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d001      	beq.n	8002176 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e1e9      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002176:	4b41      	ldr	r3, [pc, #260]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	493d      	ldr	r1, [pc, #244]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218a:	e040      	b.n	800220e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d023      	beq.n	80021dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002194:	4b39      	ldr	r3, [pc, #228]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a38      	ldr	r2, [pc, #224]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe feaa 	bl	8000ef8 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a8:	f7fe fea6 	bl	8000ef8 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e1c7      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b30      	ldr	r3, [pc, #192]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c6:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4929      	ldr	r1, [pc, #164]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]
 80021da:	e018      	b.n	800220e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021dc:	4b27      	ldr	r3, [pc, #156]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a26      	ldr	r2, [pc, #152]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7fe fe86 	bl	8000ef8 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f0:	f7fe fe82 	bl	8000ef8 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1a3      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002202:	4b1e      	ldr	r3, [pc, #120]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d038      	beq.n	800228c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d019      	beq.n	8002256 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002222:	4b16      	ldr	r3, [pc, #88]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002226:	4a15      	ldr	r2, [pc, #84]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7fe fe63 	bl	8000ef8 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002236:	f7fe fe5f 	bl	8000ef8 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e180      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002248:	4b0c      	ldr	r3, [pc, #48]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 800224a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x23a>
 8002254:	e01a      	b.n	800228c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002256:	4b09      	ldr	r3, [pc, #36]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 8002258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800225a:	4a08      	ldr	r2, [pc, #32]	@ (800227c <HAL_RCC_OscConfig+0x280>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002262:	f7fe fe49 	bl	8000ef8 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226a:	f7fe fe45 	bl	8000ef8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d903      	bls.n	8002280 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e166      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
 800227c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	4b92      	ldr	r3, [pc, #584]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1ee      	bne.n	800226a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a4 	beq.w	80023e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229a:	4b8c      	ldr	r3, [pc, #560]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10d      	bne.n	80022c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	4b89      	ldr	r3, [pc, #548]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	4a88      	ldr	r2, [pc, #544]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b2:	4b86      	ldr	r3, [pc, #536]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022be:	2301      	movs	r3, #1
 80022c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c2:	4b83      	ldr	r3, [pc, #524]	@ (80024d0 <HAL_RCC_OscConfig+0x4d4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d118      	bne.n	8002300 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022ce:	4b80      	ldr	r3, [pc, #512]	@ (80024d0 <HAL_RCC_OscConfig+0x4d4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7f      	ldr	r2, [pc, #508]	@ (80024d0 <HAL_RCC_OscConfig+0x4d4>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022da:	f7fe fe0d 	bl	8000ef8 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e2:	f7fe fe09 	bl	8000ef8 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b64      	cmp	r3, #100	@ 0x64
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e12a      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f4:	4b76      	ldr	r3, [pc, #472]	@ (80024d0 <HAL_RCC_OscConfig+0x4d4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x31a>
 8002308:	4b70      	ldr	r3, [pc, #448]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230c:	4a6f      	ldr	r2, [pc, #444]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6713      	str	r3, [r2, #112]	@ 0x70
 8002314:	e02d      	b.n	8002372 <HAL_RCC_OscConfig+0x376>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x33c>
 800231e:	4b6b      	ldr	r3, [pc, #428]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002322:	4a6a      	ldr	r2, [pc, #424]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	6713      	str	r3, [r2, #112]	@ 0x70
 800232a:	4b68      	ldr	r3, [pc, #416]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232e:	4a67      	ldr	r2, [pc, #412]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	6713      	str	r3, [r2, #112]	@ 0x70
 8002336:	e01c      	b.n	8002372 <HAL_RCC_OscConfig+0x376>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b05      	cmp	r3, #5
 800233e:	d10c      	bne.n	800235a <HAL_RCC_OscConfig+0x35e>
 8002340:	4b62      	ldr	r3, [pc, #392]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002344:	4a61      	ldr	r2, [pc, #388]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002346:	f043 0304 	orr.w	r3, r3, #4
 800234a:	6713      	str	r3, [r2, #112]	@ 0x70
 800234c:	4b5f      	ldr	r3, [pc, #380]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 800234e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002350:	4a5e      	ldr	r2, [pc, #376]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6713      	str	r3, [r2, #112]	@ 0x70
 8002358:	e00b      	b.n	8002372 <HAL_RCC_OscConfig+0x376>
 800235a:	4b5c      	ldr	r3, [pc, #368]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235e:	4a5b      	ldr	r2, [pc, #364]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	6713      	str	r3, [r2, #112]	@ 0x70
 8002366:	4b59      	ldr	r3, [pc, #356]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236a:	4a58      	ldr	r2, [pc, #352]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 800236c:	f023 0304 	bic.w	r3, r3, #4
 8002370:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d015      	beq.n	80023a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7fe fdbd 	bl	8000ef8 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7fe fdb9 	bl	8000ef8 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0d8      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002398:	4b4c      	ldr	r3, [pc, #304]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ee      	beq.n	8002382 <HAL_RCC_OscConfig+0x386>
 80023a4:	e014      	b.n	80023d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe fda7 	bl	8000ef8 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7fe fda3 	bl	8000ef8 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e0c2      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c4:	4b41      	ldr	r3, [pc, #260]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1ee      	bne.n	80023ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d105      	bne.n	80023e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d6:	4b3d      	ldr	r3, [pc, #244]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	4a3c      	ldr	r2, [pc, #240]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 80023dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 80ae 	beq.w	8002548 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ec:	4b37      	ldr	r3, [pc, #220]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d06d      	beq.n	80024d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d14b      	bne.n	8002498 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002400:	4b32      	ldr	r3, [pc, #200]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a31      	ldr	r2, [pc, #196]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002406:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800240a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fd74 	bl	8000ef8 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002414:	f7fe fd70 	bl	8000ef8 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e091      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002426:	4b29      	ldr	r3, [pc, #164]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69da      	ldr	r2, [r3, #28]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	019b      	lsls	r3, r3, #6
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	085b      	lsrs	r3, r3, #1
 800244a:	3b01      	subs	r3, #1
 800244c:	041b      	lsls	r3, r3, #16
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002454:	061b      	lsls	r3, r3, #24
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	071b      	lsls	r3, r3, #28
 800245e:	491b      	ldr	r1, [pc, #108]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002464:	4b19      	ldr	r3, [pc, #100]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a18      	ldr	r2, [pc, #96]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 800246a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800246e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fd42 	bl	8000ef8 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe fd3e 	bl	8000ef8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e05f      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248a:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x47c>
 8002496:	e057      	b.n	8002548 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0b      	ldr	r2, [pc, #44]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 800249e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fd28 	bl	8000ef8 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ac:	f7fe fd24 	bl	8000ef8 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e045      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024be:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <HAL_RCC_OscConfig+0x4d0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x4b0>
 80024ca:	e03d      	b.n	8002548 <HAL_RCC_OscConfig+0x54c>
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <HAL_RCC_OscConfig+0x558>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d030      	beq.n	8002544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d129      	bne.n	8002544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d122      	bne.n	8002544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002504:	4013      	ands	r3, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800250a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800250c:	4293      	cmp	r3, r2
 800250e:	d119      	bne.n	8002544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	3b01      	subs	r3, #1
 800251e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d10f      	bne.n	8002544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d107      	bne.n	8002544 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800

08002558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0d0      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b6a      	ldr	r3, [pc, #424]	@ (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d910      	bls.n	80025a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b67      	ldr	r3, [pc, #412]	@ (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 020f 	bic.w	r2, r3, #15
 8002586:	4965      	ldr	r1, [pc, #404]	@ (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b63      	ldr	r3, [pc, #396]	@ (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0b8      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d020      	beq.n	80025ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b8:	4b59      	ldr	r3, [pc, #356]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a58      	ldr	r2, [pc, #352]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80025be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d0:	4b53      	ldr	r3, [pc, #332]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a52      	ldr	r2, [pc, #328]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80025d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025dc:	4b50      	ldr	r3, [pc, #320]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	494d      	ldr	r1, [pc, #308]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d040      	beq.n	800267c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	4b47      	ldr	r3, [pc, #284]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d115      	bne.n	800263a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e07f      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	4b41      	ldr	r3, [pc, #260]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e073      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b3d      	ldr	r3, [pc, #244]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e06b      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263a:	4b39      	ldr	r3, [pc, #228]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f023 0203 	bic.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4936      	ldr	r1, [pc, #216]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800264c:	f7fe fc54 	bl	8000ef8 <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	e00a      	b.n	800266a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7fe fc50 	bl	8000ef8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e053      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b2d      	ldr	r3, [pc, #180]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 020c 	and.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	429a      	cmp	r2, r3
 800267a:	d1eb      	bne.n	8002654 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b27      	ldr	r3, [pc, #156]	@ (800271c <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d210      	bcs.n	80026ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b24      	ldr	r3, [pc, #144]	@ (800271c <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 020f 	bic.w	r2, r3, #15
 8002692:	4922      	ldr	r1, [pc, #136]	@ (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b20      	ldr	r3, [pc, #128]	@ (800271c <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e032      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b8:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4916      	ldr	r1, [pc, #88]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026d6:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	490e      	ldr	r1, [pc, #56]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ea:	f000 f821 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80026ee:	4602      	mov	r2, r0
 80026f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	490a      	ldr	r1, [pc, #40]	@ (8002724 <HAL_RCC_ClockConfig+0x1cc>)
 80026fc:	5ccb      	ldrb	r3, [r1, r3]
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	4a09      	ldr	r2, [pc, #36]	@ (8002728 <HAL_RCC_ClockConfig+0x1d0>)
 8002704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002706:	4b09      	ldr	r3, [pc, #36]	@ (800272c <HAL_RCC_ClockConfig+0x1d4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fbb0 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023c00 	.word	0x40023c00
 8002720:	40023800 	.word	0x40023800
 8002724:	08004f0c 	.word	0x08004f0c
 8002728:	20000000 	.word	0x20000000
 800272c:	20000004 	.word	0x20000004

08002730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002734:	b094      	sub	sp, #80	@ 0x50
 8002736:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	647b      	str	r3, [r7, #68]	@ 0x44
 800273c:	2300      	movs	r3, #0
 800273e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002740:	2300      	movs	r3, #0
 8002742:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002748:	4b79      	ldr	r3, [pc, #484]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x200>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	d00d      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x40>
 8002754:	2b08      	cmp	r3, #8
 8002756:	f200 80e1 	bhi.w	800291c <HAL_RCC_GetSysClockFreq+0x1ec>
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x34>
 800275e:	2b04      	cmp	r3, #4
 8002760:	d003      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x3a>
 8002762:	e0db      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002764:	4b73      	ldr	r3, [pc, #460]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x204>)
 8002766:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002768:	e0db      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800276a:	4b73      	ldr	r3, [pc, #460]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x208>)
 800276c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800276e:	e0d8      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002770:	4b6f      	ldr	r3, [pc, #444]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x200>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002778:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800277a:	4b6d      	ldr	r3, [pc, #436]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x200>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d063      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002786:	4b6a      	ldr	r3, [pc, #424]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x200>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	099b      	lsrs	r3, r3, #6
 800278c:	2200      	movs	r2, #0
 800278e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002790:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002798:	633b      	str	r3, [r7, #48]	@ 0x30
 800279a:	2300      	movs	r3, #0
 800279c:	637b      	str	r3, [r7, #52]	@ 0x34
 800279e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027a2:	4622      	mov	r2, r4
 80027a4:	462b      	mov	r3, r5
 80027a6:	f04f 0000 	mov.w	r0, #0
 80027aa:	f04f 0100 	mov.w	r1, #0
 80027ae:	0159      	lsls	r1, r3, #5
 80027b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b4:	0150      	lsls	r0, r2, #5
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4621      	mov	r1, r4
 80027bc:	1a51      	subs	r1, r2, r1
 80027be:	6139      	str	r1, [r7, #16]
 80027c0:	4629      	mov	r1, r5
 80027c2:	eb63 0301 	sbc.w	r3, r3, r1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027d4:	4659      	mov	r1, fp
 80027d6:	018b      	lsls	r3, r1, #6
 80027d8:	4651      	mov	r1, sl
 80027da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027de:	4651      	mov	r1, sl
 80027e0:	018a      	lsls	r2, r1, #6
 80027e2:	4651      	mov	r1, sl
 80027e4:	ebb2 0801 	subs.w	r8, r2, r1
 80027e8:	4659      	mov	r1, fp
 80027ea:	eb63 0901 	sbc.w	r9, r3, r1
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002802:	4690      	mov	r8, r2
 8002804:	4699      	mov	r9, r3
 8002806:	4623      	mov	r3, r4
 8002808:	eb18 0303 	adds.w	r3, r8, r3
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	462b      	mov	r3, r5
 8002810:	eb49 0303 	adc.w	r3, r9, r3
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002822:	4629      	mov	r1, r5
 8002824:	024b      	lsls	r3, r1, #9
 8002826:	4621      	mov	r1, r4
 8002828:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800282c:	4621      	mov	r1, r4
 800282e:	024a      	lsls	r2, r1, #9
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002836:	2200      	movs	r2, #0
 8002838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800283a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800283c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002840:	f7fd fd02 	bl	8000248 <__aeabi_uldivmod>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4613      	mov	r3, r2
 800284a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800284c:	e058      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284e:	4b38      	ldr	r3, [pc, #224]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x200>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	099b      	lsrs	r3, r3, #6
 8002854:	2200      	movs	r2, #0
 8002856:	4618      	mov	r0, r3
 8002858:	4611      	mov	r1, r2
 800285a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800285e:	623b      	str	r3, [r7, #32]
 8002860:	2300      	movs	r3, #0
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
 8002864:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002868:	4642      	mov	r2, r8
 800286a:	464b      	mov	r3, r9
 800286c:	f04f 0000 	mov.w	r0, #0
 8002870:	f04f 0100 	mov.w	r1, #0
 8002874:	0159      	lsls	r1, r3, #5
 8002876:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800287a:	0150      	lsls	r0, r2, #5
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4641      	mov	r1, r8
 8002882:	ebb2 0a01 	subs.w	sl, r2, r1
 8002886:	4649      	mov	r1, r9
 8002888:	eb63 0b01 	sbc.w	fp, r3, r1
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002898:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800289c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028a0:	ebb2 040a 	subs.w	r4, r2, sl
 80028a4:	eb63 050b 	sbc.w	r5, r3, fp
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	00eb      	lsls	r3, r5, #3
 80028b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028b6:	00e2      	lsls	r2, r4, #3
 80028b8:	4614      	mov	r4, r2
 80028ba:	461d      	mov	r5, r3
 80028bc:	4643      	mov	r3, r8
 80028be:	18e3      	adds	r3, r4, r3
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	464b      	mov	r3, r9
 80028c4:	eb45 0303 	adc.w	r3, r5, r3
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028d6:	4629      	mov	r1, r5
 80028d8:	028b      	lsls	r3, r1, #10
 80028da:	4621      	mov	r1, r4
 80028dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028e0:	4621      	mov	r1, r4
 80028e2:	028a      	lsls	r2, r1, #10
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ea:	2200      	movs	r2, #0
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	61fa      	str	r2, [r7, #28]
 80028f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f4:	f7fd fca8 	bl	8000248 <__aeabi_uldivmod>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4613      	mov	r3, r2
 80028fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x200>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	3301      	adds	r3, #1
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002910:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800291a:	e002      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800291c:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x204>)
 800291e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002924:	4618      	mov	r0, r3
 8002926:	3750      	adds	r7, #80	@ 0x50
 8002928:	46bd      	mov	sp, r7
 800292a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	00f42400 	.word	0x00f42400
 8002938:	007a1200 	.word	0x007a1200

0800293c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002940:	4b03      	ldr	r3, [pc, #12]	@ (8002950 <HAL_RCC_GetHCLKFreq+0x14>)
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000000 	.word	0x20000000

08002954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002958:	f7ff fff0 	bl	800293c <HAL_RCC_GetHCLKFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b05      	ldr	r3, [pc, #20]	@ (8002974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	0a9b      	lsrs	r3, r3, #10
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4903      	ldr	r1, [pc, #12]	@ (8002978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40023800 	.word	0x40023800
 8002978:	08004f1c 	.word	0x08004f1c

0800297c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002980:	f7ff ffdc 	bl	800293c <HAL_RCC_GetHCLKFreq>
 8002984:	4602      	mov	r2, r0
 8002986:	4b05      	ldr	r3, [pc, #20]	@ (800299c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	0b5b      	lsrs	r3, r3, #13
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	4903      	ldr	r1, [pc, #12]	@ (80029a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002992:	5ccb      	ldrb	r3, [r1, r3]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40023800 	.word	0x40023800
 80029a0:	08004f1c 	.word	0x08004f1c

080029a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d012      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029cc:	4b69      	ldr	r3, [pc, #420]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4a68      	ldr	r2, [pc, #416]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80029d6:	6093      	str	r3, [r2, #8]
 80029d8:	4b66      	ldr	r3, [pc, #408]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e0:	4964      	ldr	r1, [pc, #400]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d017      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a04:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0c:	4959      	ldr	r1, [pc, #356]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d017      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a3a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a40:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	494a      	ldr	r1, [pc, #296]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a58:	d101      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a76:	2301      	movs	r3, #1
 8002a78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 808b 	beq.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	4b3a      	ldr	r3, [pc, #232]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	4a39      	ldr	r2, [pc, #228]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a94:	4b37      	ldr	r3, [pc, #220]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002aa0:	4b35      	ldr	r3, [pc, #212]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a34      	ldr	r2, [pc, #208]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aac:	f7fe fa24 	bl	8000ef8 <HAL_GetTick>
 8002ab0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7fe fa20 	bl	8000ef8 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	@ 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e38f      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ad2:	4b28      	ldr	r3, [pc, #160]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ada:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d035      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d02e      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002af0:	4b20      	ldr	r3, [pc, #128]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002af8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002afa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afe:	4a1d      	ldr	r2, [pc, #116]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b04:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b06:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b10:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b12:	4a18      	ldr	r2, [pc, #96]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b18:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d114      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe f9e8 	bl	8000ef8 <HAL_GetTick>
 8002b28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7fe f9e4 	bl	8000ef8 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e351      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b42:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0ee      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b5a:	d111      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b5c:	4b05      	ldr	r3, [pc, #20]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b68:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b6a:	400b      	ands	r3, r1
 8002b6c:	4901      	ldr	r1, [pc, #4]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	0ffffcff 	.word	0x0ffffcff
 8002b80:	4bac      	ldr	r3, [pc, #688]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4aab      	ldr	r2, [pc, #684]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b86:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b8a:	6093      	str	r3, [r2, #8]
 8002b8c:	4ba9      	ldr	r3, [pc, #676]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b98:	49a6      	ldr	r1, [pc, #664]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d010      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002baa:	4ba2      	ldr	r3, [pc, #648]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bb0:	4aa0      	ldr	r2, [pc, #640]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bba:	4b9e      	ldr	r3, [pc, #632]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc4:	499b      	ldr	r1, [pc, #620]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bd8:	4b96      	ldr	r3, [pc, #600]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bde:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002be6:	4993      	ldr	r1, [pc, #588]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bfa:	4b8e      	ldr	r3, [pc, #568]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c08:	498a      	ldr	r1, [pc, #552]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c1c:	4b85      	ldr	r3, [pc, #532]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c2a:	4982      	ldr	r1, [pc, #520]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c44:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	4979      	ldr	r1, [pc, #484]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c60:	4b74      	ldr	r3, [pc, #464]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c66:	f023 0203 	bic.w	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	4971      	ldr	r1, [pc, #452]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c82:	4b6c      	ldr	r3, [pc, #432]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c88:	f023 020c 	bic.w	r2, r3, #12
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c90:	4968      	ldr	r1, [pc, #416]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ca4:	4b63      	ldr	r3, [pc, #396]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002caa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb2:	4960      	ldr	r1, [pc, #384]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cc6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ccc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd4:	4957      	ldr	r1, [pc, #348]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ce8:	4b52      	ldr	r3, [pc, #328]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf6:	494f      	ldr	r1, [pc, #316]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d10:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d18:	4946      	ldr	r1, [pc, #280]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d2c:	4b41      	ldr	r3, [pc, #260]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d32:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	493e      	ldr	r1, [pc, #248]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d4e:	4b39      	ldr	r3, [pc, #228]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5c:	4935      	ldr	r1, [pc, #212]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d70:	4b30      	ldr	r3, [pc, #192]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d76:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d7e:	492d      	ldr	r1, [pc, #180]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d011      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d92:	4b28      	ldr	r3, [pc, #160]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d98:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002da0:	4924      	ldr	r1, [pc, #144]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002db0:	d101      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002db2:	2301      	movs	r3, #1
 8002db4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dd2:	4b18      	ldr	r3, [pc, #96]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de0:	4914      	ldr	r1, [pc, #80]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00b      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002df4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e04:	490b      	ldr	r1, [pc, #44]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00f      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e28:	4902      	ldr	r1, [pc, #8]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e30:	e002      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00b      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e44:	4b8a      	ldr	r3, [pc, #552]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e54:	4986      	ldr	r1, [pc, #536]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00b      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e68:	4b81      	ldr	r3, [pc, #516]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e6e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e78:	497d      	ldr	r1, [pc, #500]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d006      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80d6 	beq.w	8003040 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e94:	4b76      	ldr	r3, [pc, #472]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a75      	ldr	r2, [pc, #468]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea0:	f7fe f82a 	bl	8000ef8 <HAL_GetTick>
 8002ea4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ea8:	f7fe f826 	bl	8000ef8 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	@ 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e195      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eba:	4b6d      	ldr	r3, [pc, #436]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d021      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d11d      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002eda:	4b65      	ldr	r3, [pc, #404]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee0:	0c1b      	lsrs	r3, r3, #16
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ee8:	4b61      	ldr	r3, [pc, #388]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eee:	0e1b      	lsrs	r3, r3, #24
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	019a      	lsls	r2, r3, #6
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	061b      	lsls	r3, r3, #24
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	071b      	lsls	r3, r3, #28
 8002f0e:	4958      	ldr	r1, [pc, #352]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d004      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d02e      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f40:	d129      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f42:	4b4b      	ldr	r3, [pc, #300]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f50:	4b47      	ldr	r3, [pc, #284]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f56:	0f1b      	lsrs	r3, r3, #28
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	019a      	lsls	r2, r3, #6
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	061b      	lsls	r3, r3, #24
 8002f70:	431a      	orrs	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	071b      	lsls	r3, r3, #28
 8002f76:	493e      	ldr	r1, [pc, #248]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f7e:	4b3c      	ldr	r3, [pc, #240]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f84:	f023 021f 	bic.w	r2, r3, #31
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	4938      	ldr	r1, [pc, #224]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01d      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fa2:	4b33      	ldr	r3, [pc, #204]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fa8:	0e1b      	lsrs	r3, r3, #24
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb6:	0f1b      	lsrs	r3, r3, #28
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	019a      	lsls	r2, r3, #6
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	061b      	lsls	r3, r3, #24
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	071b      	lsls	r3, r3, #28
 8002fd6:	4926      	ldr	r1, [pc, #152]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d011      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	019a      	lsls	r2, r3, #6
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	061b      	lsls	r3, r3, #24
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	071b      	lsls	r3, r3, #28
 8003006:	491a      	ldr	r1, [pc, #104]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800300e:	4b18      	ldr	r3, [pc, #96]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a17      	ldr	r2, [pc, #92]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003014:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301a:	f7fd ff6d 	bl	8000ef8 <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003022:	f7fd ff69 	bl	8000ef8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	@ 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e0d8      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003034:	4b0e      	ldr	r3, [pc, #56]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b01      	cmp	r3, #1
 8003044:	f040 80ce 	bne.w	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003048:	4b09      	ldr	r3, [pc, #36]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a08      	ldr	r2, [pc, #32]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003054:	f7fd ff50 	bl	8000ef8 <HAL_GetTick>
 8003058:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800305a:	e00b      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800305c:	f7fd ff4c 	bl	8000ef8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	@ 0x64
 8003068:	d904      	bls.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e0bb      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003074:	4b5e      	ldr	r3, [pc, #376]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800307c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003080:	d0ec      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d02e      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d12a      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030aa:	4b51      	ldr	r3, [pc, #324]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030b8:	4b4d      	ldr	r3, [pc, #308]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030be:	0f1b      	lsrs	r3, r3, #28
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	019a      	lsls	r2, r3, #6
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	061b      	lsls	r3, r3, #24
 80030d8:	431a      	orrs	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	071b      	lsls	r3, r3, #28
 80030de:	4944      	ldr	r1, [pc, #272]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030e6:	4b42      	ldr	r3, [pc, #264]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	493d      	ldr	r1, [pc, #244]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d022      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003110:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003114:	d11d      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003116:	4b36      	ldr	r3, [pc, #216]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311c:	0e1b      	lsrs	r3, r3, #24
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003124:	4b32      	ldr	r3, [pc, #200]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312a:	0f1b      	lsrs	r3, r3, #28
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	019a      	lsls	r2, r3, #6
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	431a      	orrs	r2, r3
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	061b      	lsls	r3, r3, #24
 8003144:	431a      	orrs	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	071b      	lsls	r3, r3, #28
 800314a:	4929      	ldr	r1, [pc, #164]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d028      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800315e:	4b24      	ldr	r3, [pc, #144]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003164:	0e1b      	lsrs	r3, r3, #24
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800316c:	4b20      	ldr	r3, [pc, #128]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	0c1b      	lsrs	r3, r3, #16
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	019a      	lsls	r2, r3, #6
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	431a      	orrs	r2, r3
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	071b      	lsls	r3, r3, #28
 8003192:	4917      	ldr	r1, [pc, #92]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800319a:	4b15      	ldr	r3, [pc, #84]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800319c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a8:	4911      	ldr	r1, [pc, #68]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031b0:	4b0f      	ldr	r3, [pc, #60]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0e      	ldr	r2, [pc, #56]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031bc:	f7fd fe9c 	bl	8000ef8 <HAL_GetTick>
 80031c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031c4:	f7fd fe98 	bl	8000ef8 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	@ 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e007      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031d6:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031e2:	d1ef      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3720      	adds	r7, #32
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800

080031f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e040      	b.n	8003288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fd fcc6 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2224      	movs	r2, #36	@ 0x24
 8003220:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fe6c 	bl	8003f18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fc05 	bl	8003a50 <UART_SetConfig>
 8003246:	4603      	mov	r3, r0
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e01b      	b.n	8003288 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800325e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800326e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 feeb 	bl	800405c <UART_CheckIdleState>
 8003286:	4603      	mov	r3, r0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	@ 0x28
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d177      	bne.n	8003398 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_UART_Transmit+0x24>
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e070      	b.n	800339a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2221      	movs	r2, #33	@ 0x21
 80032c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032c6:	f7fd fe17 	bl	8000ef8 <HAL_GetTick>
 80032ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	88fa      	ldrh	r2, [r7, #6]
 80032d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032e4:	d108      	bne.n	80032f8 <HAL_UART_Transmit+0x68>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d104      	bne.n	80032f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	e003      	b.n	8003300 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003300:	e02f      	b.n	8003362 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2200      	movs	r2, #0
 800330a:	2180      	movs	r1, #128	@ 0x80
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 ff4d 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e03b      	b.n	800339a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10b      	bne.n	8003340 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003336:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	3302      	adds	r3, #2
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	e007      	b.n	8003350 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3301      	adds	r3, #1
 800334e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1c9      	bne.n	8003302 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2200      	movs	r2, #0
 8003376:	2140      	movs	r1, #64	@ 0x40
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 ff17 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e005      	b.n	800339a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	3720      	adds	r7, #32
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b08a      	sub	sp, #40	@ 0x28
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	4613      	mov	r3, r2
 80033ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d132      	bne.n	8003420 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_UART_Receive_IT+0x24>
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e02b      	b.n	8003422 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d018      	beq.n	8003410 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	613b      	str	r3, [r7, #16]
   return(result);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	623b      	str	r3, [r7, #32]
 80033fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	69f9      	ldr	r1, [r7, #28]
 8003402:	6a3a      	ldr	r2, [r7, #32]
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	61bb      	str	r3, [r7, #24]
   return(result);
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e6      	bne.n	80033de <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	461a      	mov	r2, r3
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 ff36 	bl	8004288 <UART_Start_Receive_IT>
 800341c:	4603      	mov	r3, r0
 800341e:	e000      	b.n	8003422 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3728      	adds	r7, #40	@ 0x28
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b0ba      	sub	sp, #232	@ 0xe8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003452:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003456:	f640 030f 	movw	r3, #2063	@ 0x80f
 800345a:	4013      	ands	r3, r2
 800345c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d115      	bne.n	8003494 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00f      	beq.n	8003494 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 82ac 	beq.w	80039e2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
      }
      return;
 8003492:	e2a6      	b.n	80039e2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8117 	beq.w	80036cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800349e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80034ae:	4b85      	ldr	r3, [pc, #532]	@ (80036c4 <HAL_UART_IRQHandler+0x298>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 810a 	beq.w	80036cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d011      	beq.n	80034e8 <HAL_UART_IRQHandler+0xbc>
 80034c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00b      	beq.n	80034e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2201      	movs	r2, #1
 80034d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d011      	beq.n	8003518 <HAL_UART_IRQHandler+0xec>
 80034f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00b      	beq.n	8003518 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2202      	movs	r2, #2
 8003506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800350e:	f043 0204 	orr.w	r2, r3, #4
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d011      	beq.n	8003548 <HAL_UART_IRQHandler+0x11c>
 8003524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00b      	beq.n	8003548 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2204      	movs	r2, #4
 8003536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800353e:	f043 0202 	orr.w	r2, r3, #2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d017      	beq.n	8003584 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003564:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2208      	movs	r2, #8
 8003572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800357a:	f043 0208 	orr.w	r2, r3, #8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800358c:	2b00      	cmp	r3, #0
 800358e:	d012      	beq.n	80035b6 <HAL_UART_IRQHandler+0x18a>
 8003590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003594:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00c      	beq.n	80035b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8212 	beq.w	80039e6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fe:	2b40      	cmp	r3, #64	@ 0x40
 8003600:	d005      	beq.n	800360e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003606:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800360a:	2b00      	cmp	r3, #0
 800360c:	d04f      	beq.n	80036ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 ff00 	bl	8004414 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361e:	2b40      	cmp	r3, #64	@ 0x40
 8003620:	d141      	bne.n	80036a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3308      	adds	r3, #8
 8003628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003638:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800363c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3308      	adds	r3, #8
 800364a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800364e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800365a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1d9      	bne.n	8003622 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003672:	2b00      	cmp	r3, #0
 8003674:	d013      	beq.n	800369e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367a:	4a13      	ldr	r2, [pc, #76]	@ (80036c8 <HAL_UART_IRQHandler+0x29c>)
 800367c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd fde9 	bl	800125a <HAL_DMA_Abort_IT>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d017      	beq.n	80036be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003698:	4610      	mov	r0, r2
 800369a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369c:	e00f      	b.n	80036be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f9b6 	bl	8003a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a4:	e00b      	b.n	80036be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f9b2 	bl	8003a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ac:	e007      	b.n	80036be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f9ae 	bl	8003a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80036bc:	e193      	b.n	80039e6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036be:	bf00      	nop
    return;
 80036c0:	e191      	b.n	80039e6 <HAL_UART_IRQHandler+0x5ba>
 80036c2:	bf00      	nop
 80036c4:	04000120 	.word	0x04000120
 80036c8:	080044dd 	.word	0x080044dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	f040 814c 	bne.w	800396e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8145 	beq.w	800396e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 813e 	beq.w	800396e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2210      	movs	r2, #16
 80036f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003704:	2b40      	cmp	r3, #64	@ 0x40
 8003706:	f040 80b6 	bne.w	8003876 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003716:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8165 	beq.w	80039ea <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800372a:	429a      	cmp	r2, r3
 800372c:	f080 815d 	bcs.w	80039ea <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003736:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003744:	f000 8086 	beq.w	8003854 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800375c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003772:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003776:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800377e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800378a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1da      	bne.n	8003748 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3308      	adds	r3, #8
 8003798:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3308      	adds	r3, #8
 80037b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80037ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80037be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80037c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e1      	bne.n	8003792 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3308      	adds	r3, #8
 80037d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80037de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3308      	adds	r3, #8
 80037ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80037f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80037f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e3      	bne.n	80037ce <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003824:	f023 0310 	bic.w	r3, r3, #16
 8003828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003836:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003838:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800383c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e4      	bne.n	8003814 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd fc93 	bl	800117a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003866:	b29b      	uxth	r3, r3
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	b29b      	uxth	r3, r3
 800386c:	4619      	mov	r1, r3
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8d8 	bl	8003a24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003874:	e0b9      	b.n	80039ea <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003882:	b29b      	uxth	r3, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80ab 	beq.w	80039ee <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80a6 	beq.w	80039ee <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038aa:	e853 3f00 	ldrex	r3, [r3]
 80038ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e4      	bne.n	80038a2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3308      	adds	r3, #8
 80038de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	623b      	str	r3, [r7, #32]
   return(result);
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3308      	adds	r3, #8
 80038f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80038fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800390a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e3      	bne.n	80038d8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	60fb      	str	r3, [r7, #12]
   return(result);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f023 0310 	bic.w	r3, r3, #16
 8003938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	69b9      	ldr	r1, [r7, #24]
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	617b      	str	r3, [r7, #20]
   return(result);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e4      	bne.n	8003924 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f85c 	bl	8003a24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800396c:	e03f      	b.n	80039ee <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800396e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00e      	beq.n	8003998 <HAL_UART_IRQHandler+0x56c>
 800397a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800397e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800398e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f853 	bl	8003a3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003996:	e02d      	b.n	80039f4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800399c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00e      	beq.n	80039c2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01c      	beq.n	80039f2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
    }
    return;
 80039c0:	e017      	b.n	80039f2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d012      	beq.n	80039f4 <HAL_UART_IRQHandler+0x5c8>
 80039ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00c      	beq.n	80039f4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fd94 	bl	8004508 <UART_EndTransmit_IT>
    return;
 80039e0:	e008      	b.n	80039f4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80039e2:	bf00      	nop
 80039e4:	e006      	b.n	80039f4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80039e6:	bf00      	nop
 80039e8:	e004      	b.n	80039f4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80039ea:	bf00      	nop
 80039ec:	e002      	b.n	80039f4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80039f2:	bf00      	nop
  }

}
 80039f4:	37e8      	adds	r7, #232	@ 0xe8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop

080039fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4ba6      	ldr	r3, [pc, #664]	@ (8003d14 <UART_SetConfig+0x2c4>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	6979      	ldr	r1, [r7, #20]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a94      	ldr	r2, [pc, #592]	@ (8003d18 <UART_SetConfig+0x2c8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d120      	bne.n	8003b0e <UART_SetConfig+0xbe>
 8003acc:	4b93      	ldr	r3, [pc, #588]	@ (8003d1c <UART_SetConfig+0x2cc>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d816      	bhi.n	8003b08 <UART_SetConfig+0xb8>
 8003ada:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae0 <UART_SetConfig+0x90>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003afd 	.word	0x08003afd
 8003ae8:	08003af7 	.word	0x08003af7
 8003aec:	08003b03 	.word	0x08003b03
 8003af0:	2301      	movs	r3, #1
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e150      	b.n	8003d98 <UART_SetConfig+0x348>
 8003af6:	2302      	movs	r3, #2
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e14d      	b.n	8003d98 <UART_SetConfig+0x348>
 8003afc:	2304      	movs	r3, #4
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e14a      	b.n	8003d98 <UART_SetConfig+0x348>
 8003b02:	2308      	movs	r3, #8
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e147      	b.n	8003d98 <UART_SetConfig+0x348>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e144      	b.n	8003d98 <UART_SetConfig+0x348>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a83      	ldr	r2, [pc, #524]	@ (8003d20 <UART_SetConfig+0x2d0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d132      	bne.n	8003b7e <UART_SetConfig+0x12e>
 8003b18:	4b80      	ldr	r3, [pc, #512]	@ (8003d1c <UART_SetConfig+0x2cc>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b0c      	cmp	r3, #12
 8003b24:	d828      	bhi.n	8003b78 <UART_SetConfig+0x128>
 8003b26:	a201      	add	r2, pc, #4	@ (adr r2, 8003b2c <UART_SetConfig+0xdc>)
 8003b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2c:	08003b61 	.word	0x08003b61
 8003b30:	08003b79 	.word	0x08003b79
 8003b34:	08003b79 	.word	0x08003b79
 8003b38:	08003b79 	.word	0x08003b79
 8003b3c:	08003b6d 	.word	0x08003b6d
 8003b40:	08003b79 	.word	0x08003b79
 8003b44:	08003b79 	.word	0x08003b79
 8003b48:	08003b79 	.word	0x08003b79
 8003b4c:	08003b67 	.word	0x08003b67
 8003b50:	08003b79 	.word	0x08003b79
 8003b54:	08003b79 	.word	0x08003b79
 8003b58:	08003b79 	.word	0x08003b79
 8003b5c:	08003b73 	.word	0x08003b73
 8003b60:	2300      	movs	r3, #0
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e118      	b.n	8003d98 <UART_SetConfig+0x348>
 8003b66:	2302      	movs	r3, #2
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	e115      	b.n	8003d98 <UART_SetConfig+0x348>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	e112      	b.n	8003d98 <UART_SetConfig+0x348>
 8003b72:	2308      	movs	r3, #8
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e10f      	b.n	8003d98 <UART_SetConfig+0x348>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e10c      	b.n	8003d98 <UART_SetConfig+0x348>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a68      	ldr	r2, [pc, #416]	@ (8003d24 <UART_SetConfig+0x2d4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d120      	bne.n	8003bca <UART_SetConfig+0x17a>
 8003b88:	4b64      	ldr	r3, [pc, #400]	@ (8003d1c <UART_SetConfig+0x2cc>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b92:	2b30      	cmp	r3, #48	@ 0x30
 8003b94:	d013      	beq.n	8003bbe <UART_SetConfig+0x16e>
 8003b96:	2b30      	cmp	r3, #48	@ 0x30
 8003b98:	d814      	bhi.n	8003bc4 <UART_SetConfig+0x174>
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d009      	beq.n	8003bb2 <UART_SetConfig+0x162>
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d810      	bhi.n	8003bc4 <UART_SetConfig+0x174>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <UART_SetConfig+0x15c>
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d006      	beq.n	8003bb8 <UART_SetConfig+0x168>
 8003baa:	e00b      	b.n	8003bc4 <UART_SetConfig+0x174>
 8003bac:	2300      	movs	r3, #0
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e0f2      	b.n	8003d98 <UART_SetConfig+0x348>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e0ef      	b.n	8003d98 <UART_SetConfig+0x348>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e0ec      	b.n	8003d98 <UART_SetConfig+0x348>
 8003bbe:	2308      	movs	r3, #8
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e0e9      	b.n	8003d98 <UART_SetConfig+0x348>
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e0e6      	b.n	8003d98 <UART_SetConfig+0x348>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a56      	ldr	r2, [pc, #344]	@ (8003d28 <UART_SetConfig+0x2d8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d120      	bne.n	8003c16 <UART_SetConfig+0x1c6>
 8003bd4:	4b51      	ldr	r3, [pc, #324]	@ (8003d1c <UART_SetConfig+0x2cc>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003bde:	2bc0      	cmp	r3, #192	@ 0xc0
 8003be0:	d013      	beq.n	8003c0a <UART_SetConfig+0x1ba>
 8003be2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003be4:	d814      	bhi.n	8003c10 <UART_SetConfig+0x1c0>
 8003be6:	2b80      	cmp	r3, #128	@ 0x80
 8003be8:	d009      	beq.n	8003bfe <UART_SetConfig+0x1ae>
 8003bea:	2b80      	cmp	r3, #128	@ 0x80
 8003bec:	d810      	bhi.n	8003c10 <UART_SetConfig+0x1c0>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <UART_SetConfig+0x1a8>
 8003bf2:	2b40      	cmp	r3, #64	@ 0x40
 8003bf4:	d006      	beq.n	8003c04 <UART_SetConfig+0x1b4>
 8003bf6:	e00b      	b.n	8003c10 <UART_SetConfig+0x1c0>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e0cc      	b.n	8003d98 <UART_SetConfig+0x348>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	77fb      	strb	r3, [r7, #31]
 8003c02:	e0c9      	b.n	8003d98 <UART_SetConfig+0x348>
 8003c04:	2304      	movs	r3, #4
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e0c6      	b.n	8003d98 <UART_SetConfig+0x348>
 8003c0a:	2308      	movs	r3, #8
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e0c3      	b.n	8003d98 <UART_SetConfig+0x348>
 8003c10:	2310      	movs	r3, #16
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	e0c0      	b.n	8003d98 <UART_SetConfig+0x348>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a44      	ldr	r2, [pc, #272]	@ (8003d2c <UART_SetConfig+0x2dc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d125      	bne.n	8003c6c <UART_SetConfig+0x21c>
 8003c20:	4b3e      	ldr	r3, [pc, #248]	@ (8003d1c <UART_SetConfig+0x2cc>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c2e:	d017      	beq.n	8003c60 <UART_SetConfig+0x210>
 8003c30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c34:	d817      	bhi.n	8003c66 <UART_SetConfig+0x216>
 8003c36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c3a:	d00b      	beq.n	8003c54 <UART_SetConfig+0x204>
 8003c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c40:	d811      	bhi.n	8003c66 <UART_SetConfig+0x216>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <UART_SetConfig+0x1fe>
 8003c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c4a:	d006      	beq.n	8003c5a <UART_SetConfig+0x20a>
 8003c4c:	e00b      	b.n	8003c66 <UART_SetConfig+0x216>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	77fb      	strb	r3, [r7, #31]
 8003c52:	e0a1      	b.n	8003d98 <UART_SetConfig+0x348>
 8003c54:	2302      	movs	r3, #2
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e09e      	b.n	8003d98 <UART_SetConfig+0x348>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e09b      	b.n	8003d98 <UART_SetConfig+0x348>
 8003c60:	2308      	movs	r3, #8
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	e098      	b.n	8003d98 <UART_SetConfig+0x348>
 8003c66:	2310      	movs	r3, #16
 8003c68:	77fb      	strb	r3, [r7, #31]
 8003c6a:	e095      	b.n	8003d98 <UART_SetConfig+0x348>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2f      	ldr	r2, [pc, #188]	@ (8003d30 <UART_SetConfig+0x2e0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d125      	bne.n	8003cc2 <UART_SetConfig+0x272>
 8003c76:	4b29      	ldr	r3, [pc, #164]	@ (8003d1c <UART_SetConfig+0x2cc>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c84:	d017      	beq.n	8003cb6 <UART_SetConfig+0x266>
 8003c86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c8a:	d817      	bhi.n	8003cbc <UART_SetConfig+0x26c>
 8003c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c90:	d00b      	beq.n	8003caa <UART_SetConfig+0x25a>
 8003c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c96:	d811      	bhi.n	8003cbc <UART_SetConfig+0x26c>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <UART_SetConfig+0x254>
 8003c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca0:	d006      	beq.n	8003cb0 <UART_SetConfig+0x260>
 8003ca2:	e00b      	b.n	8003cbc <UART_SetConfig+0x26c>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e076      	b.n	8003d98 <UART_SetConfig+0x348>
 8003caa:	2302      	movs	r3, #2
 8003cac:	77fb      	strb	r3, [r7, #31]
 8003cae:	e073      	b.n	8003d98 <UART_SetConfig+0x348>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	e070      	b.n	8003d98 <UART_SetConfig+0x348>
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	77fb      	strb	r3, [r7, #31]
 8003cba:	e06d      	b.n	8003d98 <UART_SetConfig+0x348>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e06a      	b.n	8003d98 <UART_SetConfig+0x348>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d34 <UART_SetConfig+0x2e4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d138      	bne.n	8003d3e <UART_SetConfig+0x2ee>
 8003ccc:	4b13      	ldr	r3, [pc, #76]	@ (8003d1c <UART_SetConfig+0x2cc>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003cd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cda:	d017      	beq.n	8003d0c <UART_SetConfig+0x2bc>
 8003cdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ce0:	d82a      	bhi.n	8003d38 <UART_SetConfig+0x2e8>
 8003ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce6:	d00b      	beq.n	8003d00 <UART_SetConfig+0x2b0>
 8003ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cec:	d824      	bhi.n	8003d38 <UART_SetConfig+0x2e8>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <UART_SetConfig+0x2aa>
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf6:	d006      	beq.n	8003d06 <UART_SetConfig+0x2b6>
 8003cf8:	e01e      	b.n	8003d38 <UART_SetConfig+0x2e8>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	77fb      	strb	r3, [r7, #31]
 8003cfe:	e04b      	b.n	8003d98 <UART_SetConfig+0x348>
 8003d00:	2302      	movs	r3, #2
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e048      	b.n	8003d98 <UART_SetConfig+0x348>
 8003d06:	2304      	movs	r3, #4
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e045      	b.n	8003d98 <UART_SetConfig+0x348>
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e042      	b.n	8003d98 <UART_SetConfig+0x348>
 8003d12:	bf00      	nop
 8003d14:	efff69f3 	.word	0xefff69f3
 8003d18:	40011000 	.word	0x40011000
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40004400 	.word	0x40004400
 8003d24:	40004800 	.word	0x40004800
 8003d28:	40004c00 	.word	0x40004c00
 8003d2c:	40005000 	.word	0x40005000
 8003d30:	40011400 	.word	0x40011400
 8003d34:	40007800 	.word	0x40007800
 8003d38:	2310      	movs	r3, #16
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e02c      	b.n	8003d98 <UART_SetConfig+0x348>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a72      	ldr	r2, [pc, #456]	@ (8003f0c <UART_SetConfig+0x4bc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d125      	bne.n	8003d94 <UART_SetConfig+0x344>
 8003d48:	4b71      	ldr	r3, [pc, #452]	@ (8003f10 <UART_SetConfig+0x4c0>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003d52:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d56:	d017      	beq.n	8003d88 <UART_SetConfig+0x338>
 8003d58:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d5c:	d817      	bhi.n	8003d8e <UART_SetConfig+0x33e>
 8003d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d62:	d00b      	beq.n	8003d7c <UART_SetConfig+0x32c>
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d68:	d811      	bhi.n	8003d8e <UART_SetConfig+0x33e>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <UART_SetConfig+0x326>
 8003d6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d72:	d006      	beq.n	8003d82 <UART_SetConfig+0x332>
 8003d74:	e00b      	b.n	8003d8e <UART_SetConfig+0x33e>
 8003d76:	2300      	movs	r3, #0
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e00d      	b.n	8003d98 <UART_SetConfig+0x348>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e00a      	b.n	8003d98 <UART_SetConfig+0x348>
 8003d82:	2304      	movs	r3, #4
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e007      	b.n	8003d98 <UART_SetConfig+0x348>
 8003d88:	2308      	movs	r3, #8
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e004      	b.n	8003d98 <UART_SetConfig+0x348>
 8003d8e:	2310      	movs	r3, #16
 8003d90:	77fb      	strb	r3, [r7, #31]
 8003d92:	e001      	b.n	8003d98 <UART_SetConfig+0x348>
 8003d94:	2310      	movs	r3, #16
 8003d96:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003da0:	d15b      	bne.n	8003e5a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003da2:	7ffb      	ldrb	r3, [r7, #31]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d828      	bhi.n	8003dfa <UART_SetConfig+0x3aa>
 8003da8:	a201      	add	r2, pc, #4	@ (adr r2, 8003db0 <UART_SetConfig+0x360>)
 8003daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dae:	bf00      	nop
 8003db0:	08003dd5 	.word	0x08003dd5
 8003db4:	08003ddd 	.word	0x08003ddd
 8003db8:	08003de5 	.word	0x08003de5
 8003dbc:	08003dfb 	.word	0x08003dfb
 8003dc0:	08003deb 	.word	0x08003deb
 8003dc4:	08003dfb 	.word	0x08003dfb
 8003dc8:	08003dfb 	.word	0x08003dfb
 8003dcc:	08003dfb 	.word	0x08003dfb
 8003dd0:	08003df3 	.word	0x08003df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd4:	f7fe fdbe 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 8003dd8:	61b8      	str	r0, [r7, #24]
        break;
 8003dda:	e013      	b.n	8003e04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ddc:	f7fe fdce 	bl	800297c <HAL_RCC_GetPCLK2Freq>
 8003de0:	61b8      	str	r0, [r7, #24]
        break;
 8003de2:	e00f      	b.n	8003e04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de4:	4b4b      	ldr	r3, [pc, #300]	@ (8003f14 <UART_SetConfig+0x4c4>)
 8003de6:	61bb      	str	r3, [r7, #24]
        break;
 8003de8:	e00c      	b.n	8003e04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dea:	f7fe fca1 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 8003dee:	61b8      	str	r0, [r7, #24]
        break;
 8003df0:	e008      	b.n	8003e04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003df6:	61bb      	str	r3, [r7, #24]
        break;
 8003df8:	e004      	b.n	8003e04 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	77bb      	strb	r3, [r7, #30]
        break;
 8003e02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d074      	beq.n	8003ef4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	005a      	lsls	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	441a      	add	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b0f      	cmp	r3, #15
 8003e24:	d916      	bls.n	8003e54 <UART_SetConfig+0x404>
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e2c:	d212      	bcs.n	8003e54 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	f023 030f 	bic.w	r3, r3, #15
 8003e36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	89fb      	ldrh	r3, [r7, #14]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	89fa      	ldrh	r2, [r7, #14]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	e04f      	b.n	8003ef4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	77bb      	strb	r3, [r7, #30]
 8003e58:	e04c      	b.n	8003ef4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e5a:	7ffb      	ldrb	r3, [r7, #31]
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d828      	bhi.n	8003eb2 <UART_SetConfig+0x462>
 8003e60:	a201      	add	r2, pc, #4	@ (adr r2, 8003e68 <UART_SetConfig+0x418>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	08003e95 	.word	0x08003e95
 8003e70:	08003e9d 	.word	0x08003e9d
 8003e74:	08003eb3 	.word	0x08003eb3
 8003e78:	08003ea3 	.word	0x08003ea3
 8003e7c:	08003eb3 	.word	0x08003eb3
 8003e80:	08003eb3 	.word	0x08003eb3
 8003e84:	08003eb3 	.word	0x08003eb3
 8003e88:	08003eab 	.word	0x08003eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e8c:	f7fe fd62 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 8003e90:	61b8      	str	r0, [r7, #24]
        break;
 8003e92:	e013      	b.n	8003ebc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e94:	f7fe fd72 	bl	800297c <HAL_RCC_GetPCLK2Freq>
 8003e98:	61b8      	str	r0, [r7, #24]
        break;
 8003e9a:	e00f      	b.n	8003ebc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003f14 <UART_SetConfig+0x4c4>)
 8003e9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ea0:	e00c      	b.n	8003ebc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea2:	f7fe fc45 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 8003ea6:	61b8      	str	r0, [r7, #24]
        break;
 8003ea8:	e008      	b.n	8003ebc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eae:	61bb      	str	r3, [r7, #24]
        break;
 8003eb0:	e004      	b.n	8003ebc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eba:	bf00      	nop
    }

    if (pclk != 0U)
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d018      	beq.n	8003ef4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	085a      	lsrs	r2, r3, #1
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	441a      	add	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b0f      	cmp	r3, #15
 8003eda:	d909      	bls.n	8003ef0 <UART_SetConfig+0x4a0>
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee2:	d205      	bcs.n	8003ef0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	e001      	b.n	8003ef4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f00:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3720      	adds	r7, #32
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40007c00 	.word	0x40007c00
 8003f10:	40023800 	.word	0x40023800
 8003f14:	00f42400 	.word	0x00f42400

08003f18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01a      	beq.n	800402e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004016:	d10a      	bne.n	800402e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]
  }
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b098      	sub	sp, #96	@ 0x60
 8004060:	af02      	add	r7, sp, #8
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800406c:	f7fc ff44 	bl	8000ef8 <HAL_GetTick>
 8004070:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b08      	cmp	r3, #8
 800407e:	d12e      	bne.n	80040de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004080:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004088:	2200      	movs	r2, #0
 800408a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f88c 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d021      	beq.n	80040de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e6      	bne.n	800409a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e062      	b.n	80041a4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d149      	bne.n	8004180 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f4:	2200      	movs	r2, #0
 80040f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f856 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d03c      	beq.n	8004180 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	623b      	str	r3, [r7, #32]
   return(result);
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800411a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004124:	633b      	str	r3, [r7, #48]	@ 0x30
 8004126:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800412a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e6      	bne.n	8004106 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3308      	adds	r3, #8
 800413e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	60fb      	str	r3, [r7, #12]
   return(result);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3308      	adds	r3, #8
 8004156:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004158:	61fa      	str	r2, [r7, #28]
 800415a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	617b      	str	r3, [r7, #20]
   return(result);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e5      	bne.n	8004138 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e011      	b.n	80041a4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3758      	adds	r7, #88	@ 0x58
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041bc:	e04f      	b.n	800425e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c4:	d04b      	beq.n	800425e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c6:	f7fc fe97 	bl	8000ef8 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d302      	bcc.n	80041dc <UART_WaitOnFlagUntilTimeout+0x30>
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e04e      	b.n	800427e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d037      	beq.n	800425e <UART_WaitOnFlagUntilTimeout+0xb2>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b80      	cmp	r3, #128	@ 0x80
 80041f2:	d034      	beq.n	800425e <UART_WaitOnFlagUntilTimeout+0xb2>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b40      	cmp	r3, #64	@ 0x40
 80041f8:	d031      	beq.n	800425e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d110      	bne.n	800422a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2208      	movs	r2, #8
 800420e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f8ff 	bl	8004414 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2208      	movs	r2, #8
 800421a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e029      	b.n	800427e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004238:	d111      	bne.n	800425e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f8e5 	bl	8004414 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e00f      	b.n	800427e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4013      	ands	r3, r2
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	429a      	cmp	r2, r3
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	429a      	cmp	r2, r3
 800427a:	d0a0      	beq.n	80041be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004288:	b480      	push	{r7}
 800428a:	b097      	sub	sp, #92	@ 0x5c
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	88fa      	ldrh	r2, [r7, #6]
 80042a0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	88fa      	ldrh	r2, [r7, #6]
 80042a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ba:	d10e      	bne.n	80042da <UART_Start_Receive_IT+0x52>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <UART_Start_Receive_IT+0x48>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80042ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042ce:	e02d      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	22ff      	movs	r2, #255	@ 0xff
 80042d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042d8:	e028      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10d      	bne.n	80042fe <UART_Start_Receive_IT+0x76>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d104      	bne.n	80042f4 <UART_Start_Receive_IT+0x6c>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	22ff      	movs	r2, #255	@ 0xff
 80042ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042f2:	e01b      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	227f      	movs	r2, #127	@ 0x7f
 80042f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042fc:	e016      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004306:	d10d      	bne.n	8004324 <UART_Start_Receive_IT+0x9c>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d104      	bne.n	800431a <UART_Start_Receive_IT+0x92>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	227f      	movs	r2, #127	@ 0x7f
 8004314:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004318:	e008      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	223f      	movs	r2, #63	@ 0x3f
 800431e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004322:	e003      	b.n	800432c <UART_Start_Receive_IT+0xa4>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2222      	movs	r2, #34	@ 0x22
 8004338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800434c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	657b      	str	r3, [r7, #84]	@ 0x54
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800435c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800435e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800436a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e5      	bne.n	800433c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004378:	d107      	bne.n	800438a <UART_Start_Receive_IT+0x102>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d103      	bne.n	800438a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4a21      	ldr	r2, [pc, #132]	@ (800440c <UART_Start_Receive_IT+0x184>)
 8004386:	669a      	str	r2, [r3, #104]	@ 0x68
 8004388:	e002      	b.n	8004390 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4a20      	ldr	r2, [pc, #128]	@ (8004410 <UART_Start_Receive_IT+0x188>)
 800438e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d019      	beq.n	80043cc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80043ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80043b8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80043c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e6      	bne.n	8004398 <UART_Start_Receive_IT+0x110>
 80043ca:	e018      	b.n	80043fe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	613b      	str	r3, [r7, #16]
   return(result);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f043 0320 	orr.w	r3, r3, #32
 80043e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043ea:	623b      	str	r3, [r7, #32]
 80043ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	69f9      	ldr	r1, [r7, #28]
 80043f0:	6a3a      	ldr	r2, [r7, #32]
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e6      	bne.n	80043cc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	375c      	adds	r7, #92	@ 0x5c
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	08004705 	.word	0x08004705
 8004410:	0800455d 	.word	0x0800455d

08004414 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004414:	b480      	push	{r7}
 8004416:	b095      	sub	sp, #84	@ 0x54
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004424:	e853 3f00 	ldrex	r3, [r3]
 8004428:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800442a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800443a:	643b      	str	r3, [r7, #64]	@ 0x40
 800443c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004440:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e6      	bne.n	800441c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3308      	adds	r3, #8
 8004454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	61fb      	str	r3, [r7, #28]
   return(result);
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3308      	adds	r3, #8
 800446c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800446e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004474:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800447c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e5      	bne.n	800444e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004486:	2b01      	cmp	r3, #1
 8004488:	d118      	bne.n	80044bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	60bb      	str	r3, [r7, #8]
   return(result);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f023 0310 	bic.w	r3, r3, #16
 800449e:	647b      	str	r3, [r7, #68]	@ 0x44
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6979      	ldr	r1, [r7, #20]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	613b      	str	r3, [r7, #16]
   return(result);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e6      	bne.n	800448a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044d0:	bf00      	nop
 80044d2:	3754      	adds	r7, #84	@ 0x54
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff fa88 	bl	8003a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	60bb      	str	r3, [r7, #8]
   return(result);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004524:	61fb      	str	r3, [r7, #28]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6979      	ldr	r1, [r7, #20]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	613b      	str	r3, [r7, #16]
   return(result);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e6      	bne.n	8004510 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff fa54 	bl	80039fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004554:	bf00      	nop
 8004556:	3720      	adds	r7, #32
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b09c      	sub	sp, #112	@ 0x70
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800456a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004574:	2b22      	cmp	r3, #34	@ 0x22
 8004576:	f040 80b9 	bne.w	80046ec <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004584:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004588:	b2d9      	uxtb	r1, r3
 800458a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800458e:	b2da      	uxtb	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004594:	400a      	ands	r2, r1
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f040 809c 	bne.w	80046fc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e6      	bne.n	80045c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3308      	adds	r3, #8
 80045fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004608:	f023 0301 	bic.w	r3, r3, #1
 800460c:	667b      	str	r3, [r7, #100]	@ 0x64
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3308      	adds	r3, #8
 8004614:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004616:	647a      	str	r2, [r7, #68]	@ 0x44
 8004618:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800461c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e5      	bne.n	80045f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d018      	beq.n	800467e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	623b      	str	r3, [r7, #32]
   return(result);
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004660:	663b      	str	r3, [r7, #96]	@ 0x60
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800466a:	633b      	str	r3, [r7, #48]	@ 0x30
 800466c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e6      	bne.n	800464c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004682:	2b01      	cmp	r3, #1
 8004684:	d12e      	bne.n	80046e4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	60fb      	str	r3, [r7, #12]
   return(result);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f023 0310 	bic.w	r3, r3, #16
 80046a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	69b9      	ldr	r1, [r7, #24]
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	617b      	str	r3, [r7, #20]
   return(result);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e6      	bne.n	800468c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d103      	bne.n	80046d4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2210      	movs	r2, #16
 80046d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046da:	4619      	mov	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff f9a1 	bl	8003a24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046e2:	e00b      	b.n	80046fc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7fb ff45 	bl	8000574 <HAL_UART_RxCpltCallback>
}
 80046ea:	e007      	b.n	80046fc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0208 	orr.w	r2, r2, #8
 80046fa:	619a      	str	r2, [r3, #24]
}
 80046fc:	bf00      	nop
 80046fe:	3770      	adds	r7, #112	@ 0x70
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b09c      	sub	sp, #112	@ 0x70
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004712:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800471c:	2b22      	cmp	r3, #34	@ 0x22
 800471e:	f040 80b9 	bne.w	8004894 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004730:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004732:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004736:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800473a:	4013      	ands	r3, r2
 800473c:	b29a      	uxth	r2, r3
 800473e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004740:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004746:	1c9a      	adds	r2, r3, #2
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 809c 	bne.w	80048a4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800477a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800477c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004780:	667b      	str	r3, [r7, #100]	@ 0x64
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800478a:	657b      	str	r3, [r7, #84]	@ 0x54
 800478c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004790:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e6      	bne.n	800476c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3308      	adds	r3, #8
 80047a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3308      	adds	r3, #8
 80047bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047be:	643a      	str	r2, [r7, #64]	@ 0x40
 80047c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e5      	bne.n	800479e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d018      	beq.n	8004826 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	61fb      	str	r3, [r7, #28]
   return(result);
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004814:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e6      	bne.n	80047f4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482a:	2b01      	cmp	r3, #1
 800482c:	d12e      	bne.n	800488c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	60bb      	str	r3, [r7, #8]
   return(result);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f023 0310 	bic.w	r3, r3, #16
 8004848:	65bb      	str	r3, [r7, #88]	@ 0x58
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6979      	ldr	r1, [r7, #20]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	613b      	str	r3, [r7, #16]
   return(result);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e6      	bne.n	8004834 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b10      	cmp	r3, #16
 8004872:	d103      	bne.n	800487c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2210      	movs	r2, #16
 800487a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff f8cd 	bl	8003a24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800488a:	e00b      	b.n	80048a4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7fb fe71 	bl	8000574 <HAL_UART_RxCpltCallback>
}
 8004892:	e007      	b.n	80048a4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0208 	orr.w	r2, r2, #8
 80048a2:	619a      	str	r2, [r3, #24]
}
 80048a4:	bf00      	nop
 80048a6:	3770      	adds	r7, #112	@ 0x70
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048ac:	b084      	sub	sp, #16
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	f107 001c 	add.w	r0, r7, #28
 80048ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d121      	bne.n	800490a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	4b21      	ldr	r3, [pc, #132]	@ (800495c <USB_CoreInit+0xb0>)
 80048d8:	4013      	ands	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d105      	bne.n	80048fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa92 	bl	8004e28 <USB_CoreReset>
 8004904:	4603      	mov	r3, r0
 8004906:	73fb      	strb	r3, [r7, #15]
 8004908:	e010      	b.n	800492c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa86 	bl	8004e28 <USB_CoreReset>
 800491c:	4603      	mov	r3, r0
 800491e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004924:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800492c:	7fbb      	ldrb	r3, [r7, #30]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d10b      	bne.n	800494a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f043 0206 	orr.w	r2, r3, #6
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f043 0220 	orr.w	r2, r3, #32
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004956:	b004      	add	sp, #16
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	ffbdffbf 	.word	0xffbdffbf

08004960 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f023 0201 	bic.w	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	460b      	mov	r3, r1
 800498c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d115      	bne.n	80049d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049b0:	200a      	movs	r0, #10
 80049b2:	f7fc faad 	bl	8000f10 <HAL_Delay>
      ms += 10U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	330a      	adds	r3, #10
 80049ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 fa25 	bl	8004e0c <USB_GetMode>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d01e      	beq.n	8004a06 <USB_SetCurrentMode+0x84>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80049cc:	d9f0      	bls.n	80049b0 <USB_SetCurrentMode+0x2e>
 80049ce:	e01a      	b.n	8004a06 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d115      	bne.n	8004a02 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049e2:	200a      	movs	r0, #10
 80049e4:	f7fc fa94 	bl	8000f10 <HAL_Delay>
      ms += 10U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	330a      	adds	r3, #10
 80049ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fa0c 	bl	8004e0c <USB_GetMode>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <USB_SetCurrentMode+0x84>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80049fe:	d9f0      	bls.n	80049e2 <USB_SetCurrentMode+0x60>
 8004a00:	e001      	b.n	8004a06 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e005      	b.n	8004a12 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2bc8      	cmp	r3, #200	@ 0xc8
 8004a0a:	d101      	bne.n	8004a10 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b086      	sub	sp, #24
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a36:	2300      	movs	r3, #0
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	e009      	b.n	8004a50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	3340      	adds	r3, #64	@ 0x40
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	2200      	movs	r2, #0
 8004a48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b0e      	cmp	r3, #14
 8004a54:	d9f2      	bls.n	8004a3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11c      	bne.n	8004a98 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a6c:	f043 0302 	orr.w	r3, r3, #2
 8004a70:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a76:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	e005      	b.n	8004aa4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2300      	movs	r3, #0
 8004aae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ab0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d10d      	bne.n	8004ad4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d104      	bne.n	8004aca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f968 	bl	8004d98 <USB_SetDevSpeed>
 8004ac8:	e008      	b.n	8004adc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004aca:	2101      	movs	r1, #1
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f963 	bl	8004d98 <USB_SetDevSpeed>
 8004ad2:	e003      	b.n	8004adc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ad4:	2103      	movs	r1, #3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f95e 	bl	8004d98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004adc:	2110      	movs	r1, #16
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f8fa 	bl	8004cd8 <USB_FlushTxFifo>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f924 	bl	8004d3c <USB_FlushRxFifo>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b04:	461a      	mov	r2, r3
 8004b06:	2300      	movs	r3, #0
 8004b08:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b10:	461a      	mov	r2, r3
 8004b12:	2300      	movs	r3, #0
 8004b14:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	e043      	b.n	8004bb0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b3e:	d118      	bne.n	8004b72 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b52:	461a      	mov	r2, r3
 8004b54:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e013      	b.n	8004b84 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	e008      	b.n	8004b84 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2300      	movs	r3, #0
 8004b82:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b90:	461a      	mov	r2, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ba8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3301      	adds	r3, #1
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d3b5      	bcc.n	8004b28 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	e043      	b.n	8004c4a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bd8:	d118      	bne.n	8004c0c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bec:	461a      	mov	r2, r3
 8004bee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	e013      	b.n	8004c1e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c02:	461a      	mov	r2, r3
 8004c04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	e008      	b.n	8004c1e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	3301      	adds	r3, #1
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c4e:	461a      	mov	r2, r3
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d3b5      	bcc.n	8004bc2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c68:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004c76:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	f043 0210 	orr.w	r2, r3, #16
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699a      	ldr	r2, [r3, #24]
 8004c90:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd0 <USB_DevInit+0x2b4>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f043 0208 	orr.w	r2, r3, #8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d105      	bne.n	8004cc0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699a      	ldr	r2, [r3, #24]
 8004cb8:	4b06      	ldr	r3, [pc, #24]	@ (8004cd4 <USB_DevInit+0x2b8>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ccc:	b004      	add	sp, #16
 8004cce:	4770      	bx	lr
 8004cd0:	803c3800 	.word	0x803c3800
 8004cd4:	40000004 	.word	0x40000004

08004cd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cf2:	d901      	bls.n	8004cf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e01b      	b.n	8004d30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	daf2      	bge.n	8004ce6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	019b      	lsls	r3, r3, #6
 8004d08:	f043 0220 	orr.w	r2, r3, #32
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3301      	adds	r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d1c:	d901      	bls.n	8004d22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e006      	b.n	8004d30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d0f0      	beq.n	8004d10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d54:	d901      	bls.n	8004d5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e018      	b.n	8004d8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	daf2      	bge.n	8004d48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2210      	movs	r2, #16
 8004d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d78:	d901      	bls.n	8004d7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e006      	b.n	8004d8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b10      	cmp	r3, #16
 8004d88:	d0f0      	beq.n	8004d6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004db8:	4313      	orrs	r3, r2
 8004dba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b085      	sub	sp, #20
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004de4:	f023 0303 	bic.w	r3, r3, #3
 8004de8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004df8:	f043 0302 	orr.w	r3, r3, #2
 8004dfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	f003 0301 	and.w	r3, r3, #1
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3301      	adds	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e40:	d901      	bls.n	8004e46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e01b      	b.n	8004e7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	daf2      	bge.n	8004e34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f043 0201 	orr.w	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3301      	adds	r3, #1
 8004e62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e6a:	d901      	bls.n	8004e70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e006      	b.n	8004e7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d0f0      	beq.n	8004e5e <USB_CoreReset+0x36>

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <memset>:
 8004e8a:	4402      	add	r2, r0
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d100      	bne.n	8004e94 <memset+0xa>
 8004e92:	4770      	bx	lr
 8004e94:	f803 1b01 	strb.w	r1, [r3], #1
 8004e98:	e7f9      	b.n	8004e8e <memset+0x4>
	...

08004e9c <__libc_init_array>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ed4 <__libc_init_array+0x38>)
 8004ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8004ed8 <__libc_init_array+0x3c>)
 8004ea2:	1b64      	subs	r4, r4, r5
 8004ea4:	10a4      	asrs	r4, r4, #2
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	42a6      	cmp	r6, r4
 8004eaa:	d109      	bne.n	8004ec0 <__libc_init_array+0x24>
 8004eac:	4d0b      	ldr	r5, [pc, #44]	@ (8004edc <__libc_init_array+0x40>)
 8004eae:	4c0c      	ldr	r4, [pc, #48]	@ (8004ee0 <__libc_init_array+0x44>)
 8004eb0:	f000 f818 	bl	8004ee4 <_init>
 8004eb4:	1b64      	subs	r4, r4, r5
 8004eb6:	10a4      	asrs	r4, r4, #2
 8004eb8:	2600      	movs	r6, #0
 8004eba:	42a6      	cmp	r6, r4
 8004ebc:	d105      	bne.n	8004eca <__libc_init_array+0x2e>
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec4:	4798      	blx	r3
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__libc_init_array+0xc>
 8004eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ece:	4798      	blx	r3
 8004ed0:	3601      	adds	r6, #1
 8004ed2:	e7f2      	b.n	8004eba <__libc_init_array+0x1e>
 8004ed4:	08004f2c 	.word	0x08004f2c
 8004ed8:	08004f2c 	.word	0x08004f2c
 8004edc:	08004f2c 	.word	0x08004f2c
 8004ee0:	08004f30 	.word	0x08004f30

08004ee4 <_init>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	bf00      	nop
 8004ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eea:	bc08      	pop	{r3}
 8004eec:	469e      	mov	lr, r3
 8004eee:	4770      	bx	lr

08004ef0 <_fini>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr
