
Echo_Back.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc4  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004ebc  08004ebc  00005ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee4  08004ee4  0000614c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ee4  08004ee4  00005ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004eec  08004eec  0000614c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eec  08004eec  00005eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ef0  08004ef0  00005ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ef4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004f00  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08004fa0  000060ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000067c  2000014c  08005040  0000614c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200007c8  08005040  000067c8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000614c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000129b1  00000000  00000000  0000617a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027cc  00000000  00000000  00018b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db8  00000000  00000000  0001b2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a8c  00000000  00000000  0001c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000286d7  00000000  00000000  0001cb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010f8c  00000000  00000000  00045213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f9248  00000000  00000000  0005619f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014f3e7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003904  00000000  00000000  0014f42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  00152d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004ea4 	.word	0x08004ea4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08004ea4 	.word	0x08004ea4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b988 	b.w	8000570 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	468e      	mov	lr, r1
 8000280:	4604      	mov	r4, r0
 8000282:	4688      	mov	r8, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d962      	bls.n	8000354 <__udivmoddi4+0xdc>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	b14e      	cbz	r6, 80002a8 <__udivmoddi4+0x30>
 8000294:	f1c6 0320 	rsb	r3, r6, #32
 8000298:	fa01 f806 	lsl.w	r8, r1, r6
 800029c:	fa20 f303 	lsr.w	r3, r0, r3
 80002a0:	40b7      	lsls	r7, r6
 80002a2:	ea43 0808 	orr.w	r8, r3, r8
 80002a6:	40b4      	lsls	r4, r6
 80002a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ac:	fa1f fc87 	uxth.w	ip, r7
 80002b0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002b4:	0c23      	lsrs	r3, r4, #16
 80002b6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002be:	fb01 f20c 	mul.w	r2, r1, ip
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x62>
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002cc:	f080 80ea 	bcs.w	80004a4 <__udivmoddi4+0x22c>
 80002d0:	429a      	cmp	r2, r3
 80002d2:	f240 80e7 	bls.w	80004a4 <__udivmoddi4+0x22c>
 80002d6:	3902      	subs	r1, #2
 80002d8:	443b      	add	r3, r7
 80002da:	1a9a      	subs	r2, r3, r2
 80002dc:	b2a3      	uxth	r3, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ea:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ee:	459c      	cmp	ip, r3
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0x8e>
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f8:	f080 80d6 	bcs.w	80004a8 <__udivmoddi4+0x230>
 80002fc:	459c      	cmp	ip, r3
 80002fe:	f240 80d3 	bls.w	80004a8 <__udivmoddi4+0x230>
 8000302:	443b      	add	r3, r7
 8000304:	3802      	subs	r0, #2
 8000306:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030a:	eba3 030c 	sub.w	r3, r3, ip
 800030e:	2100      	movs	r1, #0
 8000310:	b11d      	cbz	r5, 800031a <__udivmoddi4+0xa2>
 8000312:	40f3      	lsrs	r3, r6
 8000314:	2200      	movs	r2, #0
 8000316:	e9c5 3200 	strd	r3, r2, [r5]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d905      	bls.n	800032e <__udivmoddi4+0xb6>
 8000322:	b10d      	cbz	r5, 8000328 <__udivmoddi4+0xb0>
 8000324:	e9c5 0100 	strd	r0, r1, [r5]
 8000328:	2100      	movs	r1, #0
 800032a:	4608      	mov	r0, r1
 800032c:	e7f5      	b.n	800031a <__udivmoddi4+0xa2>
 800032e:	fab3 f183 	clz	r1, r3
 8000332:	2900      	cmp	r1, #0
 8000334:	d146      	bne.n	80003c4 <__udivmoddi4+0x14c>
 8000336:	4573      	cmp	r3, lr
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xc8>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 8105 	bhi.w	800054a <__udivmoddi4+0x2d2>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb6e 0203 	sbc.w	r2, lr, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4690      	mov	r8, r2
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0e5      	beq.n	800031a <__udivmoddi4+0xa2>
 800034e:	e9c5 4800 	strd	r4, r8, [r5]
 8000352:	e7e2      	b.n	800031a <__udivmoddi4+0xa2>
 8000354:	2a00      	cmp	r2, #0
 8000356:	f000 8090 	beq.w	800047a <__udivmoddi4+0x202>
 800035a:	fab2 f682 	clz	r6, r2
 800035e:	2e00      	cmp	r6, #0
 8000360:	f040 80a4 	bne.w	80004ac <__udivmoddi4+0x234>
 8000364:	1a8a      	subs	r2, r1, r2
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036c:	b280      	uxth	r0, r0
 800036e:	b2bc      	uxth	r4, r7
 8000370:	2101      	movs	r1, #1
 8000372:	fbb2 fcfe 	udiv	ip, r2, lr
 8000376:	fb0e 221c 	mls	r2, lr, ip, r2
 800037a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037e:	fb04 f20c 	mul.w	r2, r4, ip
 8000382:	429a      	cmp	r2, r3
 8000384:	d907      	bls.n	8000396 <__udivmoddi4+0x11e>
 8000386:	18fb      	adds	r3, r7, r3
 8000388:	f10c 38ff 	add.w	r8, ip, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x11c>
 800038e:	429a      	cmp	r2, r3
 8000390:	f200 80e0 	bhi.w	8000554 <__udivmoddi4+0x2dc>
 8000394:	46c4      	mov	ip, r8
 8000396:	1a9b      	subs	r3, r3, r2
 8000398:	fbb3 f2fe 	udiv	r2, r3, lr
 800039c:	fb0e 3312 	mls	r3, lr, r2, r3
 80003a0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003a4:	fb02 f404 	mul.w	r4, r2, r4
 80003a8:	429c      	cmp	r4, r3
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x144>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f102 30ff 	add.w	r0, r2, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x142>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f200 80ca 	bhi.w	800054e <__udivmoddi4+0x2d6>
 80003ba:	4602      	mov	r2, r0
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0x98>
 80003c4:	f1c1 0620 	rsb	r6, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 f706 	lsr.w	r7, r2, r6
 80003ce:	431f      	orrs	r7, r3
 80003d0:	fa0e f401 	lsl.w	r4, lr, r1
 80003d4:	fa20 f306 	lsr.w	r3, r0, r6
 80003d8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003dc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	fa1f fc87 	uxth.w	ip, r7
 80003ea:	fbbe f0f9 	udiv	r0, lr, r9
 80003ee:	0c1c      	lsrs	r4, r3, #16
 80003f0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003f4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	d909      	bls.n	8000418 <__udivmoddi4+0x1a0>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 3aff 	add.w	sl, r0, #4294967295
 800040a:	f080 809c 	bcs.w	8000546 <__udivmoddi4+0x2ce>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f240 8099 	bls.w	8000546 <__udivmoddi4+0x2ce>
 8000414:	3802      	subs	r0, #2
 8000416:	443c      	add	r4, r7
 8000418:	eba4 040e 	sub.w	r4, r4, lr
 800041c:	fa1f fe83 	uxth.w	lr, r3
 8000420:	fbb4 f3f9 	udiv	r3, r4, r9
 8000424:	fb09 4413 	mls	r4, r9, r3, r4
 8000428:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800042c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000430:	45a4      	cmp	ip, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x1ce>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f103 3eff 	add.w	lr, r3, #4294967295
 800043a:	f080 8082 	bcs.w	8000542 <__udivmoddi4+0x2ca>
 800043e:	45a4      	cmp	ip, r4
 8000440:	d97f      	bls.n	8000542 <__udivmoddi4+0x2ca>
 8000442:	3b02      	subs	r3, #2
 8000444:	443c      	add	r4, r7
 8000446:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000452:	4564      	cmp	r4, ip
 8000454:	4673      	mov	r3, lr
 8000456:	46e1      	mov	r9, ip
 8000458:	d362      	bcc.n	8000520 <__udivmoddi4+0x2a8>
 800045a:	d05f      	beq.n	800051c <__udivmoddi4+0x2a4>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x1fe>
 800045e:	ebb8 0203 	subs.w	r2, r8, r3
 8000462:	eb64 0409 	sbc.w	r4, r4, r9
 8000466:	fa04 f606 	lsl.w	r6, r4, r6
 800046a:	fa22 f301 	lsr.w	r3, r2, r1
 800046e:	431e      	orrs	r6, r3
 8000470:	40cc      	lsrs	r4, r1
 8000472:	e9c5 6400 	strd	r6, r4, [r5]
 8000476:	2100      	movs	r1, #0
 8000478:	e74f      	b.n	800031a <__udivmoddi4+0xa2>
 800047a:	fbb1 fcf2 	udiv	ip, r1, r2
 800047e:	0c01      	lsrs	r1, r0, #16
 8000480:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000484:	b280      	uxth	r0, r0
 8000486:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800048a:	463b      	mov	r3, r7
 800048c:	4638      	mov	r0, r7
 800048e:	463c      	mov	r4, r7
 8000490:	46b8      	mov	r8, r7
 8000492:	46be      	mov	lr, r7
 8000494:	2620      	movs	r6, #32
 8000496:	fbb1 f1f7 	udiv	r1, r1, r7
 800049a:	eba2 0208 	sub.w	r2, r2, r8
 800049e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004a2:	e766      	b.n	8000372 <__udivmoddi4+0xfa>
 80004a4:	4601      	mov	r1, r0
 80004a6:	e718      	b.n	80002da <__udivmoddi4+0x62>
 80004a8:	4610      	mov	r0, r2
 80004aa:	e72c      	b.n	8000306 <__udivmoddi4+0x8e>
 80004ac:	f1c6 0220 	rsb	r2, r6, #32
 80004b0:	fa2e f302 	lsr.w	r3, lr, r2
 80004b4:	40b7      	lsls	r7, r6
 80004b6:	40b1      	lsls	r1, r6
 80004b8:	fa20 f202 	lsr.w	r2, r0, r2
 80004bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c0:	430a      	orrs	r2, r1
 80004c2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004cc:	0c11      	lsrs	r1, r2, #16
 80004ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d2:	fb08 f904 	mul.w	r9, r8, r4
 80004d6:	40b0      	lsls	r0, r6
 80004d8:	4589      	cmp	r9, r1
 80004da:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004de:	b280      	uxth	r0, r0
 80004e0:	d93e      	bls.n	8000560 <__udivmoddi4+0x2e8>
 80004e2:	1879      	adds	r1, r7, r1
 80004e4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e8:	d201      	bcs.n	80004ee <__udivmoddi4+0x276>
 80004ea:	4589      	cmp	r9, r1
 80004ec:	d81f      	bhi.n	800052e <__udivmoddi4+0x2b6>
 80004ee:	eba1 0109 	sub.w	r1, r1, r9
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fe:	b292      	uxth	r2, r2
 8000500:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000504:	4542      	cmp	r2, r8
 8000506:	d229      	bcs.n	800055c <__udivmoddi4+0x2e4>
 8000508:	18ba      	adds	r2, r7, r2
 800050a:	f109 31ff 	add.w	r1, r9, #4294967295
 800050e:	d2c4      	bcs.n	800049a <__udivmoddi4+0x222>
 8000510:	4542      	cmp	r2, r8
 8000512:	d2c2      	bcs.n	800049a <__udivmoddi4+0x222>
 8000514:	f1a9 0102 	sub.w	r1, r9, #2
 8000518:	443a      	add	r2, r7
 800051a:	e7be      	b.n	800049a <__udivmoddi4+0x222>
 800051c:	45f0      	cmp	r8, lr
 800051e:	d29d      	bcs.n	800045c <__udivmoddi4+0x1e4>
 8000520:	ebbe 0302 	subs.w	r3, lr, r2
 8000524:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000528:	3801      	subs	r0, #1
 800052a:	46e1      	mov	r9, ip
 800052c:	e796      	b.n	800045c <__udivmoddi4+0x1e4>
 800052e:	eba7 0909 	sub.w	r9, r7, r9
 8000532:	4449      	add	r1, r9
 8000534:	f1a8 0c02 	sub.w	ip, r8, #2
 8000538:	fbb1 f9fe 	udiv	r9, r1, lr
 800053c:	fb09 f804 	mul.w	r8, r9, r4
 8000540:	e7db      	b.n	80004fa <__udivmoddi4+0x282>
 8000542:	4673      	mov	r3, lr
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1ce>
 8000546:	4650      	mov	r0, sl
 8000548:	e766      	b.n	8000418 <__udivmoddi4+0x1a0>
 800054a:	4608      	mov	r0, r1
 800054c:	e6fd      	b.n	800034a <__udivmoddi4+0xd2>
 800054e:	443b      	add	r3, r7
 8000550:	3a02      	subs	r2, #2
 8000552:	e733      	b.n	80003bc <__udivmoddi4+0x144>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	443b      	add	r3, r7
 800055a:	e71c      	b.n	8000396 <__udivmoddi4+0x11e>
 800055c:	4649      	mov	r1, r9
 800055e:	e79c      	b.n	800049a <__udivmoddi4+0x222>
 8000560:	eba1 0109 	sub.w	r1, r1, r9
 8000564:	46c4      	mov	ip, r8
 8000566:	fbb1 f9fe 	udiv	r9, r1, lr
 800056a:	fb09 f804 	mul.w	r8, r9, r4
 800056e:	e7c4      	b.n	80004fa <__udivmoddi4+0x282>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rx_byte;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {   // did this callback come from USART3?
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a16      	ldr	r2, [pc, #88]	@ (80005dc <HAL_UART_RxCpltCallback+0x68>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d126      	bne.n	80005d4 <HAL_UART_RxCpltCallback+0x60>
    	char msg[] = "You typed: ";
 8000586:	4a16      	ldr	r2, [pc, #88]	@ (80005e0 <HAL_UART_RxCpltCallback+0x6c>)
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	ca07      	ldmia	r2, {r0, r1, r2}
 800058e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fe4e 	bl	8000238 <strlen>
 800059c:	4603      	mov	r3, r0
 800059e:	b29a      	uxth	r2, r3
 80005a0:	f107 010c 	add.w	r1, r7, #12
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	480e      	ldr	r0, [pc, #56]	@ (80005e4 <HAL_UART_RxCpltCallback+0x70>)
 80005aa:	f002 fe51 	bl	8003250 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, &rx_byte, 1, HAL_MAX_DELAY);
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	2201      	movs	r2, #1
 80005b4:	490c      	ldr	r1, [pc, #48]	@ (80005e8 <HAL_UART_RxCpltCallback+0x74>)
 80005b6:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <HAL_UART_RxCpltCallback+0x70>)
 80005b8:	f002 fe4a 	bl	8003250 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2202      	movs	r2, #2
 80005c2:	490a      	ldr	r1, [pc, #40]	@ (80005ec <HAL_UART_RxCpltCallback+0x78>)
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <HAL_UART_RxCpltCallback+0x70>)
 80005c6:	f002 fe43 	bl	8003250 <HAL_UART_Transmit>

        // Start listening for next byte
        HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	4906      	ldr	r1, [pc, #24]	@ (80005e8 <HAL_UART_RxCpltCallback+0x74>)
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <HAL_UART_RxCpltCallback+0x70>)
 80005d0:	f002 fec7 	bl	8003362 <HAL_UART_Receive_IT>
    }
}
 80005d4:	bf00      	nop
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40004800 	.word	0x40004800
 80005e0:	08004ec0 	.word	0x08004ec0
 80005e4:	20000250 	.word	0x20000250
 80005e8:	200007b8 	.word	0x200007b8
 80005ec:	08004ebc 	.word	0x08004ebc

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fc0f 	bl	8000e16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f814 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f930 	bl	8000860 <MX_GPIO_Init>
  MX_ETH_Init();
 8000600:	f000 f882 	bl	8000708 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000604:	f000 f8ce 	bl	80007a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000608:	f000 f8fc 	bl	8000804 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_byte, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	4903      	ldr	r1, [pc, #12]	@ (800061c <main+0x2c>)
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <main+0x30>)
 8000612:	f002 fea6 	bl	8003362 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0x26>
 800061a:	bf00      	nop
 800061c:	200007b8 	.word	0x200007b8
 8000620:	20000250 	.word	0x20000250

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	@ 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 fc09 	bl	8004e4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000648:	f001 fc58 	bl	8001efc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	4b2c      	ldr	r3, [pc, #176]	@ (8000700 <SystemClock_Config+0xdc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a2b      	ldr	r2, [pc, #172]	@ (8000700 <SystemClock_Config+0xdc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b29      	ldr	r3, [pc, #164]	@ (8000700 <SystemClock_Config+0xdc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <SystemClock_Config+0xe0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800066c:	4a25      	ldr	r2, [pc, #148]	@ (8000704 <SystemClock_Config+0xe0>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b23      	ldr	r3, [pc, #140]	@ (8000704 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000684:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000688:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000698:	2360      	movs	r3, #96	@ 0x60
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fc85 	bl	8001fbc <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b8:	f000 f974 	bl	80009a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006bc:	f001 fc2e 	bl	8001f1c <HAL_PWREx_EnableOverDrive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006c6:	f000 f96d 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2103      	movs	r1, #3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 ff16 	bl	8002518 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006f2:	f000 f957 	bl	80009a4 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_ETH_Init+0x84>)
 800070e:	4a20      	ldr	r2, [pc, #128]	@ (8000790 <MX_ETH_Init+0x88>)
 8000710:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_ETH_Init+0x8c>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000718:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <MX_ETH_Init+0x8c>)
 800071a:	2280      	movs	r2, #128	@ 0x80
 800071c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071e:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <MX_ETH_Init+0x8c>)
 8000720:	22e1      	movs	r2, #225	@ 0xe1
 8000722:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_ETH_Init+0x8c>)
 8000726:	2200      	movs	r2, #0
 8000728:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_ETH_Init+0x8c>)
 800072c:	2200      	movs	r2, #0
 800072e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_ETH_Init+0x8c>)
 8000732:	2200      	movs	r2, #0
 8000734:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_ETH_Init+0x84>)
 8000738:	4a16      	ldr	r2, [pc, #88]	@ (8000794 <MX_ETH_Init+0x8c>)
 800073a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_ETH_Init+0x84>)
 800073e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000742:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_ETH_Init+0x84>)
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <MX_ETH_Init+0x90>)
 8000748:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_ETH_Init+0x84>)
 800074c:	4a13      	ldr	r2, [pc, #76]	@ (800079c <MX_ETH_Init+0x94>)
 800074e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_ETH_Init+0x84>)
 8000752:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000756:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000758:	480c      	ldr	r0, [pc, #48]	@ (800078c <MX_ETH_Init+0x84>)
 800075a:	f000 fd81 	bl	8001260 <HAL_ETH_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000764:	f000 f91e 	bl	80009a4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000768:	2238      	movs	r2, #56	@ 0x38
 800076a:	2100      	movs	r1, #0
 800076c:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <MX_ETH_Init+0x98>)
 800076e:	f004 fb6c 	bl	8004e4a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_ETH_Init+0x98>)
 8000774:	2221      	movs	r2, #33	@ 0x21
 8000776:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_ETH_Init+0x98>)
 800077a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800077e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_ETH_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200001a0 	.word	0x200001a0
 8000790:	40028000 	.word	0x40028000
 8000794:	200007bc 	.word	0x200007bc
 8000798:	200000ac 	.word	0x200000ac
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	20000168 	.word	0x20000168

080007a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	@ (8000800 <MX_USART3_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ae:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_USART3_UART_Init+0x58>)
 80007e8:	f002 fce4 	bl	80031b4 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f8d7 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000250 	.word	0x20000250
 8000800:	40004800 	.word	0x40004800

08000804 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800080e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2206      	movs	r2, #6
 8000814:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	2202      	movs	r2, #2
 800081a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000824:	2202      	movs	r2, #2
 8000826:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2201      	movs	r2, #1
 800082c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083c:	2201      	movs	r2, #1
 800083e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000848:	f001 fa1d 	bl	8001c86 <HAL_PCD_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f8a7 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200002d8 	.word	0x200002d8

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	@ 0x30
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	4b47      	ldr	r3, [pc, #284]	@ (8000994 <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a46      	ldr	r2, [pc, #280]	@ (8000994 <MX_GPIO_Init+0x134>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b44      	ldr	r3, [pc, #272]	@ (8000994 <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	4b41      	ldr	r3, [pc, #260]	@ (8000994 <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a40      	ldr	r2, [pc, #256]	@ (8000994 <MX_GPIO_Init+0x134>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b3e      	ldr	r3, [pc, #248]	@ (8000994 <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a3a      	ldr	r2, [pc, #232]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b38      	ldr	r3, [pc, #224]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b35      	ldr	r3, [pc, #212]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a34      	ldr	r2, [pc, #208]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b32      	ldr	r3, [pc, #200]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a2e      	ldr	r2, [pc, #184]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ee:	4b29      	ldr	r3, [pc, #164]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a28      	ldr	r2, [pc, #160]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <MX_GPIO_Init+0x134>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f244 0181 	movw	r1, #16513	@ 0x4081
 800090c:	4822      	ldr	r0, [pc, #136]	@ (8000998 <MX_GPIO_Init+0x138>)
 800090e:	f001 f9a1 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2140      	movs	r1, #64	@ 0x40
 8000916:	4821      	ldr	r0, [pc, #132]	@ (800099c <MX_GPIO_Init+0x13c>)
 8000918:	f001 f99c 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000922:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	481b      	ldr	r0, [pc, #108]	@ (80009a0 <MX_GPIO_Init+0x140>)
 8000934:	f000 ffe2 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000938:	f244 0381 	movw	r3, #16513	@ 0x4081
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4811      	ldr	r0, [pc, #68]	@ (8000998 <MX_GPIO_Init+0x138>)
 8000952:	f000 ffd3 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000956:	2340      	movs	r3, #64	@ 0x40
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	480b      	ldr	r0, [pc, #44]	@ (800099c <MX_GPIO_Init+0x13c>)
 800096e:	f000 ffc5 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000972:	2380      	movs	r3, #128	@ 0x80
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_GPIO_Init+0x13c>)
 8000986:	f000 ffb9 	bl	80018fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	bf00      	nop
 800098c:	3730      	adds	r7, #48	@ 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40020400 	.word	0x40020400
 800099c:	40021800 	.word	0x40021800
 80009a0:	40020800 	.word	0x40020800

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <Error_Handler+0x8>

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <HAL_MspInit+0x44>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	4a0e      	ldr	r2, [pc, #56]	@ (80009f4 <HAL_MspInit+0x44>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <HAL_MspInit+0x44>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <HAL_MspInit+0x44>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <HAL_MspInit+0x44>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_MspInit+0x44>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	@ 0x38
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a4e      	ldr	r2, [pc, #312]	@ (8000b50 <HAL_ETH_MspInit+0x158>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	f040 8096 	bne.w	8000b48 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a20:	4a4c      	ldr	r2, [pc, #304]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a28:	4b4a      	ldr	r3, [pc, #296]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a30:	623b      	str	r3, [r7, #32]
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	4b47      	ldr	r3, [pc, #284]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a38:	4a46      	ldr	r2, [pc, #280]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a40:	4b44      	ldr	r3, [pc, #272]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a48:	61fb      	str	r3, [r7, #28]
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	4b41      	ldr	r3, [pc, #260]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a50:	4a40      	ldr	r2, [pc, #256]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a58:	4b3e      	ldr	r3, [pc, #248]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a64:	4b3b      	ldr	r3, [pc, #236]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a68:	4a3a      	ldr	r2, [pc, #232]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a70:	4b38      	ldr	r3, [pc, #224]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b35      	ldr	r3, [pc, #212]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	4a34      	ldr	r2, [pc, #208]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a88:	4b32      	ldr	r3, [pc, #200]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a94:	4b2f      	ldr	r3, [pc, #188]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	4a2e      	ldr	r2, [pc, #184]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aac:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	4a28      	ldr	r2, [pc, #160]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab8:	4b26      	ldr	r3, [pc, #152]	@ (8000b54 <HAL_ETH_MspInit+0x15c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ac4:	2332      	movs	r3, #50	@ 0x32
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad4:	230b      	movs	r3, #11
 8000ad6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	481e      	ldr	r0, [pc, #120]	@ (8000b58 <HAL_ETH_MspInit+0x160>)
 8000ae0:	f000 ff0c 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ae4:	2386      	movs	r3, #134	@ 0x86
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af4:	230b      	movs	r3, #11
 8000af6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	4817      	ldr	r0, [pc, #92]	@ (8000b5c <HAL_ETH_MspInit+0x164>)
 8000b00:	f000 fefc 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b16:	230b      	movs	r3, #11
 8000b18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480f      	ldr	r0, [pc, #60]	@ (8000b60 <HAL_ETH_MspInit+0x168>)
 8000b22:	f000 feeb 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b26:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b38:	230b      	movs	r3, #11
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	4808      	ldr	r0, [pc, #32]	@ (8000b64 <HAL_ETH_MspInit+0x16c>)
 8000b44:	f000 feda 	bl	80018fc <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000b48:	bf00      	nop
 8000b4a:	3738      	adds	r7, #56	@ 0x38
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40028000 	.word	0x40028000
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020400 	.word	0x40020400
 8000b64:	40021800 	.word	0x40021800

08000b68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2290      	movs	r2, #144	@ 0x90
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f004 f95e 	bl	8004e4a <memset>
  if(huart->Instance==USART3)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a26      	ldr	r2, [pc, #152]	@ (8000c2c <HAL_UART_MspInit+0xc4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d144      	bne.n	8000c22 <HAL_UART_MspInit+0xba>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fedc 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bb2:	f7ff fef7 	bl	80009a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <HAL_UART_MspInit+0xc8>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	4a1d      	ldr	r2, [pc, #116]	@ (8000c30 <HAL_UART_MspInit+0xc8>)
 8000bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <HAL_UART_MspInit+0xc8>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <HAL_UART_MspInit+0xc8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a17      	ldr	r2, [pc, #92]	@ (8000c30 <HAL_UART_MspInit+0xc8>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <HAL_UART_MspInit+0xc8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000be6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c00:	2307      	movs	r3, #7
 8000c02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c06:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4809      	ldr	r0, [pc, #36]	@ (8000c34 <HAL_UART_MspInit+0xcc>)
 8000c0e:	f000 fe75 	bl	80018fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2027      	movs	r0, #39	@ 0x27
 8000c18:	f000 fa59 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c1c:	2027      	movs	r0, #39	@ 0x27
 8000c1e:	f000 fa72 	bl	8001106 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c22:	bf00      	nop
 8000c24:	37b8      	adds	r7, #184	@ 0xb8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40004800 	.word	0x40004800
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020c00 	.word	0x40020c00

08000c38 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0ae      	sub	sp, #184	@ 0xb8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2290      	movs	r2, #144	@ 0x90
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 f8f6 	bl	8004e4a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c66:	d159      	bne.n	8000d1c <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c68:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000c6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 fe73 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c84:	f7ff fe8e 	bl	80009a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <HAL_PCD_MspInit+0xec>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8c:	4a25      	ldr	r2, [pc, #148]	@ (8000d24 <HAL_PCD_MspInit+0xec>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c94:	4b23      	ldr	r3, [pc, #140]	@ (8000d24 <HAL_PCD_MspInit+0xec>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ca0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cba:	230a      	movs	r3, #10
 8000cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4818      	ldr	r0, [pc, #96]	@ (8000d28 <HAL_PCD_MspInit+0xf0>)
 8000cc8:	f000 fe18 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ccc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4810      	ldr	r0, [pc, #64]	@ (8000d28 <HAL_PCD_MspInit+0xf0>)
 8000ce8:	f000 fe08 	bl	80018fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cec:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <HAL_PCD_MspInit+0xec>)
 8000cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8000d24 <HAL_PCD_MspInit+0xec>)
 8000cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf6:	6353      	str	r3, [r2, #52]	@ 0x34
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <HAL_PCD_MspInit+0xec>)
 8000cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <HAL_PCD_MspInit+0xec>)
 8000d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d08:	4a06      	ldr	r2, [pc, #24]	@ (8000d24 <HAL_PCD_MspInit+0xec>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d10:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <HAL_PCD_MspInit+0xec>)
 8000d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000d1c:	bf00      	nop
 8000d1e:	37b8      	adds	r7, #184	@ 0xb8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <NMI_Handler+0x4>

08000d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <MemManage_Handler+0x4>

08000d44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f000 f885 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <USART3_IRQHandler+0x10>)
 8000d92:	f002 fb2b 	bl	80033ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000250 	.word	0x20000250

08000da0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc8:	f7ff ffea 	bl	8000da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	@ (8000e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000df2:	f004 f833 	bl	8004e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fbfb 	bl	80005f0 <main>
  bx  lr    
 8000dfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dfc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e08:	08004ef4 	.word	0x08004ef4
  ldr r2, =_sbss
 8000e0c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000e10:	200007c8 	.word	0x200007c8

08000e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC_IRQHandler>

08000e16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f000 f94c 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f000 f805 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e26:	f7ff fdc3 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f967 	bl	8001122 <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f92f 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	@ (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	200007c4 	.word	0x200007c4

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	@ (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200007c4 	.word	0x200007c4

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <HAL_Delay+0x44>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <__NVIC_SetPriorityGrouping+0x40>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <__NVIC_SetPriorityGrouping+0x40>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00
 8000f5c:	05fa0000 	.word	0x05fa0000

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db0b      	blt.n	8000fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	4907      	ldr	r1, [pc, #28]	@ (8000fb4 <__NVIC_EnableIRQ+0x38>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	@ (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	@ (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	@ 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ff8e 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff29 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff3e 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff8e 	bl	800100c <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff31 	bl	8000f7c <__NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffa2 	bl	8001074 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001146:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff feb6 	bl	8000eb8 <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d008      	beq.n	800116c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2280      	movs	r2, #128	@ 0x80
 800115e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e052      	b.n	8001212 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0216 	bic.w	r2, r2, #22
 800117a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	695a      	ldr	r2, [r3, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800118a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	2b00      	cmp	r3, #0
 8001192:	d103      	bne.n	800119c <HAL_DMA_Abort+0x62>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001198:	2b00      	cmp	r3, #0
 800119a:	d007      	beq.n	80011ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0208 	bic.w	r2, r2, #8
 80011aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011bc:	e013      	b.n	80011e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011be:	f7ff fe7b 	bl	8000eb8 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d90c      	bls.n	80011e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2220      	movs	r2, #32
 80011d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e015      	b.n	8001212 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1e4      	bne.n	80011be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f8:	223f      	movs	r2, #63	@ 0x3f
 80011fa:	409a      	lsls	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d004      	beq.n	8001238 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2280      	movs	r2, #128	@ 0x80
 8001232:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e00c      	b.n	8001252 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2205      	movs	r2, #5
 800123c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e086      	b.n	8001380 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001278:	2b00      	cmp	r3, #0
 800127a:	d106      	bne.n	800128a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2223      	movs	r2, #35	@ 0x23
 8001280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff fbb7 	bl	80009f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b3f      	ldr	r3, [pc, #252]	@ (8001388 <HAL_ETH_Init+0x128>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	4a3e      	ldr	r2, [pc, #248]	@ (8001388 <HAL_ETH_Init+0x128>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001294:	6453      	str	r3, [r2, #68]	@ 0x44
 8001296:	4b3c      	ldr	r3, [pc, #240]	@ (8001388 <HAL_ETH_Init+0x128>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012a2:	4b3a      	ldr	r3, [pc, #232]	@ (800138c <HAL_ETH_Init+0x12c>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a39      	ldr	r2, [pc, #228]	@ (800138c <HAL_ETH_Init+0x12c>)
 80012a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80012ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012ae:	4b37      	ldr	r3, [pc, #220]	@ (800138c <HAL_ETH_Init+0x12c>)
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	4935      	ldr	r1, [pc, #212]	@ (800138c <HAL_ETH_Init+0x12c>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012bc:	4b33      	ldr	r3, [pc, #204]	@ (800138c <HAL_ETH_Init+0x12c>)
 80012be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6812      	ldr	r2, [r2, #0]
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d8:	f7ff fdee 	bl	8000eb8 <HAL_GetTick>
 80012dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012de:	e011      	b.n	8001304 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012e0:	f7ff fdea 	bl	8000eb8 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012ee:	d909      	bls.n	8001304 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2204      	movs	r2, #4
 80012f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	22e0      	movs	r2, #224	@ 0xe0
 80012fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e03d      	b.n	8001380 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1e4      	bne.n	80012e0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f97a 	bl	8001610 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fa25 	bl	800176c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 fa7b 	bl	800181e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	461a      	mov	r2, r3
 800132e:	2100      	movs	r1, #0
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f9e3 	bl	80016fc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001344:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <HAL_ETH_Init+0x130>)
 8001354:	430b      	orrs	r3, r1
 8001356:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800136a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2210      	movs	r2, #16
 800137a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	40013800 	.word	0x40013800
 8001390:	00020060 	.word	0x00020060

08001394 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4b53      	ldr	r3, [pc, #332]	@ (80014f8 <ETH_SetMACConfig+0x164>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	7b9b      	ldrb	r3, [r3, #14]
 80013b2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	7c12      	ldrb	r2, [r2, #16]
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	d102      	bne.n	80013c2 <ETH_SetMACConfig+0x2e>
 80013bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013c0:	e000      	b.n	80013c4 <ETH_SetMACConfig+0x30>
 80013c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80013c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	7c52      	ldrb	r2, [r2, #17]
 80013ca:	2a00      	cmp	r2, #0
 80013cc:	d102      	bne.n	80013d4 <ETH_SetMACConfig+0x40>
 80013ce:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013d2:	e000      	b.n	80013d6 <ETH_SetMACConfig+0x42>
 80013d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013d6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	7fdb      	ldrb	r3, [r3, #31]
 80013e2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013e4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	7f92      	ldrb	r2, [r2, #30]
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	d102      	bne.n	80013fa <ETH_SetMACConfig+0x66>
 80013f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f8:	e000      	b.n	80013fc <ETH_SetMACConfig+0x68>
 80013fa:	2200      	movs	r2, #0
                        macconf->Speed |
 80013fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	7f1b      	ldrb	r3, [r3, #28]
 8001402:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001404:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800140a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	791b      	ldrb	r3, [r3, #4]
 8001410:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001412:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	f892 2020 	ldrb.w	r2, [r2, #32]
 800141a:	2a00      	cmp	r2, #0
 800141c:	d102      	bne.n	8001424 <ETH_SetMACConfig+0x90>
 800141e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001422:	e000      	b.n	8001426 <ETH_SetMACConfig+0x92>
 8001424:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001426:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	7bdb      	ldrb	r3, [r3, #15]
 800142c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800142e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001434:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800143c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800143e:	4313      	orrs	r3, r2
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001456:	2001      	movs	r0, #1
 8001458:	f7ff fd3a 	bl	8000ed0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001472:	4013      	ands	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001482:	2a00      	cmp	r2, #0
 8001484:	d101      	bne.n	800148a <ETH_SetMACConfig+0xf6>
 8001486:	2280      	movs	r2, #128	@ 0x80
 8001488:	e000      	b.n	800148c <ETH_SetMACConfig+0xf8>
 800148a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800148c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001492:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800149a:	2a01      	cmp	r2, #1
 800149c:	d101      	bne.n	80014a2 <ETH_SetMACConfig+0x10e>
 800149e:	2208      	movs	r2, #8
 80014a0:	e000      	b.n	80014a4 <ETH_SetMACConfig+0x110>
 80014a2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80014ac:	2a01      	cmp	r2, #1
 80014ae:	d101      	bne.n	80014b4 <ETH_SetMACConfig+0x120>
 80014b0:	2204      	movs	r2, #4
 80014b2:	e000      	b.n	80014b6 <ETH_SetMACConfig+0x122>
 80014b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80014be:	2a01      	cmp	r2, #1
 80014c0:	d101      	bne.n	80014c6 <ETH_SetMACConfig+0x132>
 80014c2:	2202      	movs	r2, #2
 80014c4:	e000      	b.n	80014c8 <ETH_SetMACConfig+0x134>
 80014c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014c8:	4313      	orrs	r3, r2
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f7ff fcf5 	bl	8000ed0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	fd20810f 	.word	0xfd20810f

080014fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4b3d      	ldr	r3, [pc, #244]	@ (800160c <ETH_SetDMAConfig+0x110>)
 8001516:	4013      	ands	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	7b1b      	ldrb	r3, [r3, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <ETH_SetDMAConfig+0x2c>
 8001522:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001526:	e000      	b.n	800152a <ETH_SetDMAConfig+0x2e>
 8001528:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	7b5b      	ldrb	r3, [r3, #13]
 800152e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001530:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	7f52      	ldrb	r2, [r2, #29]
 8001536:	2a00      	cmp	r2, #0
 8001538:	d102      	bne.n	8001540 <ETH_SetDMAConfig+0x44>
 800153a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800153e:	e000      	b.n	8001542 <ETH_SetDMAConfig+0x46>
 8001540:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001542:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	7b9b      	ldrb	r3, [r3, #14]
 8001548:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800154a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001550:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	7f1b      	ldrb	r3, [r3, #28]
 8001556:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001558:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	7f9b      	ldrb	r3, [r3, #30]
 800155e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001560:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001566:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800156e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001570:	4313      	orrs	r3, r2
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001580:	461a      	mov	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001592:	2001      	movs	r0, #1
 8001594:	f7ff fc9c 	bl	8000ed0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015a0:	461a      	mov	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	791b      	ldrb	r3, [r3, #4]
 80015aa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015b0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015b6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015bc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015c4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015c6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015cc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015ce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015d4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015e2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff fc6d 	bl	8000ed0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	f8de3f23 	.word	0xf8de3f23

08001610 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0a6      	sub	sp, #152	@ 0x98
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001618:	2301      	movs	r3, #1
 800161a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001624:	2300      	movs	r3, #0
 8001626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800162e:	2301      	movs	r3, #1
 8001630:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800163a:	2301      	movs	r3, #1
 800163c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001640:	2301      	movs	r3, #1
 8001642:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001652:	2300      	movs	r3, #0
 8001654:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800165c:	2300      	movs	r3, #0
 800165e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001678:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800167c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800167e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001682:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800168a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800168e:	4619      	mov	r1, r3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fe7f 	bl	8001394 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001696:	2301      	movs	r3, #1
 8001698:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800169a:	2301      	movs	r3, #1
 800169c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016a4:	2301      	movs	r3, #1
 80016a6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016bc:	2301      	movs	r3, #1
 80016be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016c2:	2301      	movs	r3, #1
 80016c4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016d0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016d8:	2301      	movs	r3, #1
 80016da:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4619      	mov	r1, r3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff05 	bl	80014fc <ETH_SetDMAConfig>
}
 80016f2:	bf00      	nop
 80016f4:	3798      	adds	r7, #152	@ 0x98
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3305      	adds	r3, #5
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	3204      	adds	r2, #4
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	4313      	orrs	r3, r2
 8001718:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <ETH_MACAddressConfig+0x68>)
 800171e:	4413      	add	r3, r2
 8001720:	461a      	mov	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3303      	adds	r3, #3
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	061a      	lsls	r2, r3, #24
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3302      	adds	r3, #2
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3301      	adds	r3, #1
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	4313      	orrs	r3, r2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	7812      	ldrb	r2, [r2, #0]
 8001746:	4313      	orrs	r3, r2
 8001748:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <ETH_MACAddressConfig+0x6c>)
 800174e:	4413      	add	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	6013      	str	r3, [r2, #0]
}
 8001756:	bf00      	nop
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40028040 	.word	0x40028040
 8001768:	40028044 	.word	0x40028044

0800176c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	e03e      	b.n	80017f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68d9      	ldr	r1, [r3, #12]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2200      	movs	r2, #0
 8001796:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	3206      	adds	r2, #6
 80017ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d80c      	bhi.n	80017dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68d9      	ldr	r1, [r3, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	461a      	mov	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	e004      	b.n	80017e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	461a      	mov	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3301      	adds	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d9bd      	bls.n	800177a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001810:	611a      	str	r2, [r3, #16]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e048      	b.n	80018be <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6919      	ldr	r1, [r3, #16]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	440b      	add	r3, r1
 800183c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2200      	movs	r2, #0
 8001848:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001868:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001882:	68b9      	ldr	r1, [r7, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	3212      	adds	r2, #18
 800188a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d80c      	bhi.n	80018ae <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6919      	ldr	r1, [r3, #16]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	461a      	mov	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	e004      	b.n	80018b8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	461a      	mov	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3301      	adds	r3, #1
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d9b3      	bls.n	800182c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ee:	60da      	str	r2, [r3, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	@ 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e175      	b.n	8001c08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8164 	bne.w	8001c02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d005      	beq.n	8001952 <HAL_GPIO_Init+0x56>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d130      	bne.n	80019b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001988:	2201      	movs	r2, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 0201 	and.w	r2, r3, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d017      	beq.n	80019f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d123      	bne.n	8001a44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	08da      	lsrs	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3208      	adds	r2, #8
 8001a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	08da      	lsrs	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3208      	adds	r2, #8
 8001a3e:	69b9      	ldr	r1, [r7, #24]
 8001a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0203 	and.w	r2, r3, #3
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80be 	beq.w	8001c02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b66      	ldr	r3, [pc, #408]	@ (8001c20 <HAL_GPIO_Init+0x324>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	4a65      	ldr	r2, [pc, #404]	@ (8001c20 <HAL_GPIO_Init+0x324>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a92:	4b63      	ldr	r3, [pc, #396]	@ (8001c20 <HAL_GPIO_Init+0x324>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a9e:	4a61      	ldr	r2, [pc, #388]	@ (8001c24 <HAL_GPIO_Init+0x328>)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	@ (8001c28 <HAL_GPIO_Init+0x32c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d037      	beq.n	8001b3a <HAL_GPIO_Init+0x23e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a57      	ldr	r2, [pc, #348]	@ (8001c2c <HAL_GPIO_Init+0x330>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d031      	beq.n	8001b36 <HAL_GPIO_Init+0x23a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a56      	ldr	r2, [pc, #344]	@ (8001c30 <HAL_GPIO_Init+0x334>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d02b      	beq.n	8001b32 <HAL_GPIO_Init+0x236>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a55      	ldr	r2, [pc, #340]	@ (8001c34 <HAL_GPIO_Init+0x338>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d025      	beq.n	8001b2e <HAL_GPIO_Init+0x232>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a54      	ldr	r2, [pc, #336]	@ (8001c38 <HAL_GPIO_Init+0x33c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01f      	beq.n	8001b2a <HAL_GPIO_Init+0x22e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a53      	ldr	r2, [pc, #332]	@ (8001c3c <HAL_GPIO_Init+0x340>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d019      	beq.n	8001b26 <HAL_GPIO_Init+0x22a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a52      	ldr	r2, [pc, #328]	@ (8001c40 <HAL_GPIO_Init+0x344>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_GPIO_Init+0x226>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a51      	ldr	r2, [pc, #324]	@ (8001c44 <HAL_GPIO_Init+0x348>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00d      	beq.n	8001b1e <HAL_GPIO_Init+0x222>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a50      	ldr	r2, [pc, #320]	@ (8001c48 <HAL_GPIO_Init+0x34c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0x21e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4f      	ldr	r2, [pc, #316]	@ (8001c4c <HAL_GPIO_Init+0x350>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_GPIO_Init+0x21a>
 8001b12:	2309      	movs	r3, #9
 8001b14:	e012      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b16:	230a      	movs	r3, #10
 8001b18:	e010      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	e00e      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b1e:	2307      	movs	r3, #7
 8001b20:	e00c      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b22:	2306      	movs	r3, #6
 8001b24:	e00a      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b26:	2305      	movs	r3, #5
 8001b28:	e008      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e004      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	f002 0203 	and.w	r2, r2, #3
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	4093      	lsls	r3, r2
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b4c:	4935      	ldr	r1, [pc, #212]	@ (8001c24 <HAL_GPIO_Init+0x328>)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c50 <HAL_GPIO_Init+0x354>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7e:	4a34      	ldr	r2, [pc, #208]	@ (8001c50 <HAL_GPIO_Init+0x354>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b84:	4b32      	ldr	r3, [pc, #200]	@ (8001c50 <HAL_GPIO_Init+0x354>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba8:	4a29      	ldr	r2, [pc, #164]	@ (8001c50 <HAL_GPIO_Init+0x354>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bae:	4b28      	ldr	r3, [pc, #160]	@ (8001c50 <HAL_GPIO_Init+0x354>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c50 <HAL_GPIO_Init+0x354>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <HAL_GPIO_Init+0x354>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfc:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <HAL_GPIO_Init+0x354>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3301      	adds	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	f67f ae86 	bls.w	800191c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3724      	adds	r7, #36	@ 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40013800 	.word	0x40013800
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40021400 	.word	0x40021400
 8001c40:	40021800 	.word	0x40021800
 8001c44:	40021c00 	.word	0x40021c00
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40022400 	.word	0x40022400
 8001c50:	40013c00 	.word	0x40013c00

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c70:	e003      	b.n	8001c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	041a      	lsls	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	619a      	str	r2, [r3, #24]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af02      	add	r7, sp, #8
 8001c8c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e108      	b.n	8001eaa <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7fe ffc0 	bl	8000c38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2203      	movs	r2, #3
 8001cbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cc6:	d102      	bne.n	8001cce <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f002 fe24 	bl	8004920 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7c1a      	ldrb	r2, [r3, #16]
 8001ce0:	f88d 2000 	strb.w	r2, [sp]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce8:	f002 fdc0 	bl	800486c <USB_CoreInit>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0d5      	b.n	8001eaa <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f002 fe1c 	bl	8004942 <USB_SetCurrentMode>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0c6      	b.n	8001eaa <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e04a      	b.n	8001db8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	3315      	adds	r3, #21
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	3314      	adds	r3, #20
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	b298      	uxth	r0, r3
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	332e      	adds	r3, #46	@ 0x2e
 8001d5e:	4602      	mov	r2, r0
 8001d60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3318      	adds	r3, #24
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	331c      	adds	r3, #28
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	3320      	adds	r3, #32
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	3324      	adds	r3, #36	@ 0x24
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	3301      	adds	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	791b      	ldrb	r3, [r3, #4]
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d3af      	bcc.n	8001d22 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e044      	b.n	8001e52 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dc8:	7bfa      	ldrb	r2, [r7, #15]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	791b      	ldrb	r3, [r3, #4]
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d3b5      	bcc.n	8001dc8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7c1a      	ldrb	r2, [r3, #16]
 8001e64:	f88d 2000 	strb.w	r2, [sp]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e6c:	f002 fdb6 	bl	80049dc <USB_DevInit>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e013      	b.n	8001eaa <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7b1b      	ldrb	r3, [r3, #12]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d102      	bne.n	8001e9e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f80b 	bl	8001eb4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f002 ff71 	bl	8004d8a <USB_DevDisconnect>

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	10000003 	.word	0x10000003

08001efc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40007000 	.word	0x40007000

08001f1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b23      	ldr	r3, [pc, #140]	@ (8001fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	4a22      	ldr	r2, [pc, #136]	@ (8001fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f32:	4b20      	ldr	r3, [pc, #128]	@ (8001fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f4a:	f7fe ffb5 	bl	8000eb8 <HAL_GetTick>
 8001f4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f50:	e009      	b.n	8001f66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f52:	f7fe ffb1 	bl	8000eb8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f60:	d901      	bls.n	8001f66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e022      	b.n	8001fac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f66:	4b14      	ldr	r3, [pc, #80]	@ (8001fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f72:	d1ee      	bne.n	8001f52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f74:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f80:	f7fe ff9a 	bl	8000eb8 <HAL_GetTick>
 8001f84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f86:	e009      	b.n	8001f9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f88:	f7fe ff96 	bl	8000eb8 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f96:	d901      	bls.n	8001f9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e007      	b.n	8001fac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f9c:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001fa8:	d1ee      	bne.n	8001f88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e29b      	b.n	800250a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8087 	beq.w	80020ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe0:	4b96      	ldr	r3, [pc, #600]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d00c      	beq.n	8002006 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fec:	4b93      	ldr	r3, [pc, #588]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d112      	bne.n	800201e <HAL_RCC_OscConfig+0x62>
 8001ff8:	4b90      	ldr	r3, [pc, #576]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002004:	d10b      	bne.n	800201e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002006:	4b8d      	ldr	r3, [pc, #564]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d06c      	beq.n	80020ec <HAL_RCC_OscConfig+0x130>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d168      	bne.n	80020ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e275      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002026:	d106      	bne.n	8002036 <HAL_RCC_OscConfig+0x7a>
 8002028:	4b84      	ldr	r3, [pc, #528]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a83      	ldr	r2, [pc, #524]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800202e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e02e      	b.n	8002094 <HAL_RCC_OscConfig+0xd8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x9c>
 800203e:	4b7f      	ldr	r3, [pc, #508]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7e      	ldr	r2, [pc, #504]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b7c      	ldr	r3, [pc, #496]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a7b      	ldr	r2, [pc, #492]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002050:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e01d      	b.n	8002094 <HAL_RCC_OscConfig+0xd8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0xc0>
 8002062:	4b76      	ldr	r3, [pc, #472]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a75      	ldr	r2, [pc, #468]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b73      	ldr	r3, [pc, #460]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a72      	ldr	r2, [pc, #456]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0xd8>
 800207c:	4b6f      	ldr	r3, [pc, #444]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a6e      	ldr	r2, [pc, #440]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b6c      	ldr	r3, [pc, #432]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6b      	ldr	r2, [pc, #428]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800208e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe ff0c 	bl	8000eb8 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7fe ff08 	bl	8000eb8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	@ 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e229      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	4b61      	ldr	r3, [pc, #388]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0xe8>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7fe fef8 	bl	8000eb8 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7fe fef4 	bl	8000eb8 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	@ 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e215      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	4b57      	ldr	r3, [pc, #348]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x110>
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d069      	beq.n	80021ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020fa:	4b50      	ldr	r3, [pc, #320]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002106:	4b4d      	ldr	r3, [pc, #308]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b08      	cmp	r3, #8
 8002110:	d11c      	bne.n	800214c <HAL_RCC_OscConfig+0x190>
 8002112:	4b4a      	ldr	r3, [pc, #296]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d116      	bne.n	800214c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	4b47      	ldr	r3, [pc, #284]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_RCC_OscConfig+0x17a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e1e9      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	4b41      	ldr	r3, [pc, #260]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	493d      	ldr	r1, [pc, #244]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	e040      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d023      	beq.n	800219c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002154:	4b39      	ldr	r3, [pc, #228]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a38      	ldr	r2, [pc, #224]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe feaa 	bl	8000eb8 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002168:	f7fe fea6 	bl	8000eb8 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1c7      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217a:	4b30      	ldr	r3, [pc, #192]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002186:	4b2d      	ldr	r3, [pc, #180]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4929      	ldr	r1, [pc, #164]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
 800219a:	e018      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219c:	4b27      	ldr	r3, [pc, #156]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a26      	ldr	r2, [pc, #152]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fe86 	bl	8000eb8 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b0:	f7fe fe82 	bl	8000eb8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1a3      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d038      	beq.n	800224c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d019      	beq.n	8002216 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b16      	ldr	r3, [pc, #88]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80021e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e6:	4a15      	ldr	r2, [pc, #84]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ee:	f7fe fe63 	bl	8000eb8 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f6:	f7fe fe5f 	bl	8000eb8 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e180      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800220a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x23a>
 8002214:	e01a      	b.n	800224c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800221a:	4a08      	ldr	r2, [pc, #32]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002222:	f7fe fe49 	bl	8000eb8 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222a:	f7fe fe45 	bl	8000eb8 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d903      	bls.n	8002240 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e166      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
 800223c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	4b92      	ldr	r3, [pc, #584]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ee      	bne.n	800222a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a4 	beq.w	80023a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225a:	4b8c      	ldr	r3, [pc, #560]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10d      	bne.n	8002282 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	4b89      	ldr	r3, [pc, #548]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a88      	ldr	r2, [pc, #544]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	4b86      	ldr	r3, [pc, #536]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227e:	2301      	movs	r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002282:	4b83      	ldr	r3, [pc, #524]	@ (8002490 <HAL_RCC_OscConfig+0x4d4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d118      	bne.n	80022c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800228e:	4b80      	ldr	r3, [pc, #512]	@ (8002490 <HAL_RCC_OscConfig+0x4d4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7f      	ldr	r2, [pc, #508]	@ (8002490 <HAL_RCC_OscConfig+0x4d4>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229a:	f7fe fe0d 	bl	8000eb8 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7fe fe09 	bl	8000eb8 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	@ 0x64
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e12a      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b4:	4b76      	ldr	r3, [pc, #472]	@ (8002490 <HAL_RCC_OscConfig+0x4d4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x31a>
 80022c8:	4b70      	ldr	r3, [pc, #448]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022cc:	4a6f      	ldr	r2, [pc, #444]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d4:	e02d      	b.n	8002332 <HAL_RCC_OscConfig+0x376>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x33c>
 80022de:	4b6b      	ldr	r3, [pc, #428]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e2:	4a6a      	ldr	r2, [pc, #424]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ea:	4b68      	ldr	r3, [pc, #416]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ee:	4a67      	ldr	r2, [pc, #412]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f6:	e01c      	b.n	8002332 <HAL_RCC_OscConfig+0x376>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d10c      	bne.n	800231a <HAL_RCC_OscConfig+0x35e>
 8002300:	4b62      	ldr	r3, [pc, #392]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002304:	4a61      	ldr	r2, [pc, #388]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6713      	str	r3, [r2, #112]	@ 0x70
 800230c:	4b5f      	ldr	r3, [pc, #380]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002310:	4a5e      	ldr	r2, [pc, #376]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6713      	str	r3, [r2, #112]	@ 0x70
 8002318:	e00b      	b.n	8002332 <HAL_RCC_OscConfig+0x376>
 800231a:	4b5c      	ldr	r3, [pc, #368]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231e:	4a5b      	ldr	r2, [pc, #364]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6713      	str	r3, [r2, #112]	@ 0x70
 8002326:	4b59      	ldr	r3, [pc, #356]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232a:	4a58      	ldr	r2, [pc, #352]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800232c:	f023 0304 	bic.w	r3, r3, #4
 8002330:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d015      	beq.n	8002366 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233a:	f7fe fdbd 	bl	8000eb8 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7fe fdb9 	bl	8000eb8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0d8      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	4b4c      	ldr	r3, [pc, #304]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ee      	beq.n	8002342 <HAL_RCC_OscConfig+0x386>
 8002364:	e014      	b.n	8002390 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002366:	f7fe fda7 	bl	8000eb8 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7fe fda3 	bl	8000eb8 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0c2      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002384:	4b41      	ldr	r3, [pc, #260]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ee      	bne.n	800236e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002396:	4b3d      	ldr	r3, [pc, #244]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	4a3c      	ldr	r2, [pc, #240]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800239c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 80ae 	beq.w	8002508 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ac:	4b37      	ldr	r3, [pc, #220]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d06d      	beq.n	8002494 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d14b      	bne.n	8002458 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c0:	4b32      	ldr	r3, [pc, #200]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a31      	ldr	r2, [pc, #196]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80023c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe fd74 	bl	8000eb8 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe fd70 	bl	8000eb8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e091      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	4b29      	ldr	r3, [pc, #164]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	019b      	lsls	r3, r3, #6
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	085b      	lsrs	r3, r3, #1
 800240a:	3b01      	subs	r3, #1
 800240c:	041b      	lsls	r3, r3, #16
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	061b      	lsls	r3, r3, #24
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	071b      	lsls	r3, r3, #28
 800241e:	491b      	ldr	r1, [pc, #108]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b19      	ldr	r3, [pc, #100]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a18      	ldr	r2, [pc, #96]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800242a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800242e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fd42 	bl	8000eb8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fd3e 	bl	8000eb8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e05f      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x47c>
 8002456:	e057      	b.n	8002508 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0b      	ldr	r2, [pc, #44]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800245e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fd28 	bl	8000eb8 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fd24 	bl	8000eb8 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e045      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b03      	ldr	r3, [pc, #12]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x4b0>
 800248a:	e03d      	b.n	8002508 <HAL_RCC_OscConfig+0x54c>
 800248c:	40023800 	.word	0x40023800
 8002490:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002494:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <HAL_RCC_OscConfig+0x558>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d030      	beq.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d129      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d122      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d119      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024da:	085b      	lsrs	r3, r3, #1
 80024dc:	3b01      	subs	r3, #1
 80024de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d10f      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0d0      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b6a      	ldr	r3, [pc, #424]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d910      	bls.n	8002560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b67      	ldr	r3, [pc, #412]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 020f 	bic.w	r2, r3, #15
 8002546:	4965      	ldr	r1, [pc, #404]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b63      	ldr	r3, [pc, #396]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0b8      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002578:	4b59      	ldr	r3, [pc, #356]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a58      	ldr	r2, [pc, #352]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002590:	4b53      	ldr	r3, [pc, #332]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a52      	ldr	r2, [pc, #328]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002596:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800259a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	4b50      	ldr	r3, [pc, #320]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	494d      	ldr	r1, [pc, #308]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d040      	beq.n	800263c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b47      	ldr	r3, [pc, #284]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d115      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	4b41      	ldr	r3, [pc, #260]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e073      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b3d      	ldr	r3, [pc, #244]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06b      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fa:	4b39      	ldr	r3, [pc, #228]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4936      	ldr	r1, [pc, #216]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	4313      	orrs	r3, r2
 800260a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260c:	f7fe fc54 	bl	8000eb8 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	e00a      	b.n	800262a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7fe fc50 	bl	8000eb8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e053      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	4b2d      	ldr	r3, [pc, #180]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 020c 	and.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d1eb      	bne.n	8002614 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b27      	ldr	r3, [pc, #156]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d210      	bcs.n	800266c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 020f 	bic.w	r2, r3, #15
 8002652:	4922      	ldr	r1, [pc, #136]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e032      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4916      	ldr	r1, [pc, #88]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002696:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490e      	ldr	r1, [pc, #56]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026aa:	f000 f821 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490a      	ldr	r1, [pc, #40]	@ (80026e4 <HAL_RCC_ClockConfig+0x1cc>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	4a09      	ldr	r2, [pc, #36]	@ (80026e8 <HAL_RCC_ClockConfig+0x1d0>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026c6:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <HAL_RCC_ClockConfig+0x1d4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fbb0 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08004ecc 	.word	0x08004ecc
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f4:	b094      	sub	sp, #80	@ 0x50
 80026f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80026fc:	2300      	movs	r3, #0
 80026fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002700:	2300      	movs	r3, #0
 8002702:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002708:	4b79      	ldr	r3, [pc, #484]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d00d      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x40>
 8002714:	2b08      	cmp	r3, #8
 8002716:	f200 80e1 	bhi.w	80028dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x34>
 800271e:	2b04      	cmp	r3, #4
 8002720:	d003      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x3a>
 8002722:	e0db      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002724:	4b73      	ldr	r3, [pc, #460]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002726:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002728:	e0db      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800272a:	4b73      	ldr	r3, [pc, #460]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800272c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800272e:	e0d8      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002730:	4b6f      	ldr	r3, [pc, #444]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002738:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800273a:	4b6d      	ldr	r3, [pc, #436]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d063      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002746:	4b6a      	ldr	r3, [pc, #424]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	099b      	lsrs	r3, r3, #6
 800274c:	2200      	movs	r2, #0
 800274e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002750:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002758:	633b      	str	r3, [r7, #48]	@ 0x30
 800275a:	2300      	movs	r3, #0
 800275c:	637b      	str	r3, [r7, #52]	@ 0x34
 800275e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002762:	4622      	mov	r2, r4
 8002764:	462b      	mov	r3, r5
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	0159      	lsls	r1, r3, #5
 8002770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002774:	0150      	lsls	r0, r2, #5
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4621      	mov	r1, r4
 800277c:	1a51      	subs	r1, r2, r1
 800277e:	6139      	str	r1, [r7, #16]
 8002780:	4629      	mov	r1, r5
 8002782:	eb63 0301 	sbc.w	r3, r3, r1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002794:	4659      	mov	r1, fp
 8002796:	018b      	lsls	r3, r1, #6
 8002798:	4651      	mov	r1, sl
 800279a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800279e:	4651      	mov	r1, sl
 80027a0:	018a      	lsls	r2, r1, #6
 80027a2:	4651      	mov	r1, sl
 80027a4:	ebb2 0801 	subs.w	r8, r2, r1
 80027a8:	4659      	mov	r1, fp
 80027aa:	eb63 0901 	sbc.w	r9, r3, r1
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c2:	4690      	mov	r8, r2
 80027c4:	4699      	mov	r9, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	eb18 0303 	adds.w	r3, r8, r3
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	462b      	mov	r3, r5
 80027d0:	eb49 0303 	adc.w	r3, r9, r3
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027e2:	4629      	mov	r1, r5
 80027e4:	024b      	lsls	r3, r1, #9
 80027e6:	4621      	mov	r1, r4
 80027e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ec:	4621      	mov	r1, r4
 80027ee:	024a      	lsls	r2, r1, #9
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027f6:	2200      	movs	r2, #0
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002800:	f7fd fd22 	bl	8000248 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4613      	mov	r3, r2
 800280a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800280c:	e058      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280e:	4b38      	ldr	r3, [pc, #224]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	2200      	movs	r2, #0
 8002816:	4618      	mov	r0, r3
 8002818:	4611      	mov	r1, r2
 800281a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800281e:	623b      	str	r3, [r7, #32]
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
 8002824:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002828:	4642      	mov	r2, r8
 800282a:	464b      	mov	r3, r9
 800282c:	f04f 0000 	mov.w	r0, #0
 8002830:	f04f 0100 	mov.w	r1, #0
 8002834:	0159      	lsls	r1, r3, #5
 8002836:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800283a:	0150      	lsls	r0, r2, #5
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4641      	mov	r1, r8
 8002842:	ebb2 0a01 	subs.w	sl, r2, r1
 8002846:	4649      	mov	r1, r9
 8002848:	eb63 0b01 	sbc.w	fp, r3, r1
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002858:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800285c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002860:	ebb2 040a 	subs.w	r4, r2, sl
 8002864:	eb63 050b 	sbc.w	r5, r3, fp
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	00eb      	lsls	r3, r5, #3
 8002872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002876:	00e2      	lsls	r2, r4, #3
 8002878:	4614      	mov	r4, r2
 800287a:	461d      	mov	r5, r3
 800287c:	4643      	mov	r3, r8
 800287e:	18e3      	adds	r3, r4, r3
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	464b      	mov	r3, r9
 8002884:	eb45 0303 	adc.w	r3, r5, r3
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002896:	4629      	mov	r1, r5
 8002898:	028b      	lsls	r3, r1, #10
 800289a:	4621      	mov	r1, r4
 800289c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a0:	4621      	mov	r1, r4
 80028a2:	028a      	lsls	r2, r1, #10
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028aa:	2200      	movs	r2, #0
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	61fa      	str	r2, [r7, #28]
 80028b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b4:	f7fd fcc8 	bl	8000248 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4613      	mov	r3, r2
 80028be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	3301      	adds	r3, #1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028da:	e002      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3750      	adds	r7, #80	@ 0x50
 80028e8:	46bd      	mov	sp, r7
 80028ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	00f42400 	.word	0x00f42400
 80028f8:	007a1200 	.word	0x007a1200

080028fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002900:	4b03      	ldr	r3, [pc, #12]	@ (8002910 <HAL_RCC_GetHCLKFreq+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000000 	.word	0x20000000

08002914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002918:	f7ff fff0 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0a9b      	lsrs	r3, r3, #10
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4903      	ldr	r1, [pc, #12]	@ (8002938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800
 8002938:	08004edc 	.word	0x08004edc

0800293c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002940:	f7ff ffdc 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b05      	ldr	r3, [pc, #20]	@ (800295c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	0b5b      	lsrs	r3, r3, #13
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4903      	ldr	r1, [pc, #12]	@ (8002960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	08004edc 	.word	0x08004edc

08002964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d012      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800298c:	4b69      	ldr	r3, [pc, #420]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a68      	ldr	r2, [pc, #416]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002992:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002996:	6093      	str	r3, [r2, #8]
 8002998:	4b66      	ldr	r3, [pc, #408]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a0:	4964      	ldr	r1, [pc, #400]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029ae:	2301      	movs	r3, #1
 80029b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d017      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029be:	4b5d      	ldr	r3, [pc, #372]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029cc:	4959      	ldr	r1, [pc, #356]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029dc:	d101      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80029de:	2301      	movs	r3, #1
 80029e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80029ea:	2301      	movs	r3, #1
 80029ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d017      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a00:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	494a      	ldr	r1, [pc, #296]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a18:	d101      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a36:	2301      	movs	r3, #1
 8002a38:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 808b 	beq.w	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a48:	4b3a      	ldr	r3, [pc, #232]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	4a39      	ldr	r2, [pc, #228]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a54:	4b37      	ldr	r3, [pc, #220]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a60:	4b35      	ldr	r3, [pc, #212]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a34      	ldr	r2, [pc, #208]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fa24 	bl	8000eb8 <HAL_GetTick>
 8002a70:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a74:	f7fe fa20 	bl	8000eb8 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	@ 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e38f      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a86:	4b2c      	ldr	r3, [pc, #176]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a92:	4b28      	ldr	r3, [pc, #160]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a9a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d035      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d02e      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ab0:	4b20      	ldr	r3, [pc, #128]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ab8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aba:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	4a1d      	ldr	r2, [pc, #116]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aca:	4a1a      	ldr	r2, [pc, #104]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ad2:	4a18      	ldr	r2, [pc, #96]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ad8:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d114      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe f9e8 	bl	8000eb8 <HAL_GetTick>
 8002ae8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7fe f9e4 	bl	8000eb8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e351      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	4b0c      	ldr	r3, [pc, #48]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0ee      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b1a:	d111      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b28:	4b04      	ldr	r3, [pc, #16]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b2a:	400b      	ands	r3, r1
 8002b2c:	4901      	ldr	r1, [pc, #4]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
 8002b32:	e00b      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	0ffffcff 	.word	0x0ffffcff
 8002b40:	4bac      	ldr	r3, [pc, #688]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4aab      	ldr	r2, [pc, #684]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b46:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b4a:	6093      	str	r3, [r2, #8]
 8002b4c:	4ba9      	ldr	r3, [pc, #676]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b58:	49a6      	ldr	r1, [pc, #664]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d010      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b6a:	4ba2      	ldr	r3, [pc, #648]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b70:	4aa0      	ldr	r2, [pc, #640]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b7a:	4b9e      	ldr	r3, [pc, #632]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b84:	499b      	ldr	r1, [pc, #620]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b98:	4b96      	ldr	r3, [pc, #600]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ba6:	4993      	ldr	r1, [pc, #588]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bba:	4b8e      	ldr	r3, [pc, #568]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bc8:	498a      	ldr	r1, [pc, #552]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bdc:	4b85      	ldr	r3, [pc, #532]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bea:	4982      	ldr	r1, [pc, #520]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bfe:	4b7d      	ldr	r3, [pc, #500]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c04:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0c:	4979      	ldr	r1, [pc, #484]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c20:	4b74      	ldr	r3, [pc, #464]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c26:	f023 0203 	bic.w	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	4971      	ldr	r1, [pc, #452]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c42:	4b6c      	ldr	r3, [pc, #432]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c48:	f023 020c 	bic.w	r2, r3, #12
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c50:	4968      	ldr	r1, [pc, #416]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c64:	4b63      	ldr	r3, [pc, #396]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c72:	4960      	ldr	r1, [pc, #384]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c86:	4b5b      	ldr	r3, [pc, #364]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c94:	4957      	ldr	r1, [pc, #348]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ca8:	4b52      	ldr	r3, [pc, #328]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb6:	494f      	ldr	r1, [pc, #316]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002cca:	4b4a      	ldr	r3, [pc, #296]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd8:	4946      	ldr	r1, [pc, #280]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002cec:	4b41      	ldr	r3, [pc, #260]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfa:	493e      	ldr	r1, [pc, #248]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d0e:	4b39      	ldr	r3, [pc, #228]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1c:	4935      	ldr	r1, [pc, #212]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d30:	4b30      	ldr	r3, [pc, #192]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d36:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d3e:	492d      	ldr	r1, [pc, #180]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d011      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d52:	4b28      	ldr	r3, [pc, #160]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d58:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d60:	4924      	ldr	r1, [pc, #144]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d70:	d101      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d72:	2301      	movs	r3, #1
 8002d74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d92:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d98:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da0:	4914      	ldr	r1, [pc, #80]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00b      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002db4:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dc4:	490b      	ldr	r1, [pc, #44]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00f      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002dd8:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dde:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002de8:	4902      	ldr	r1, [pc, #8]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002df0:	e002      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e04:	4b8a      	ldr	r3, [pc, #552]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e0a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e14:	4986      	ldr	r1, [pc, #536]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00b      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e28:	4b81      	ldr	r3, [pc, #516]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e2e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e38:	497d      	ldr	r1, [pc, #500]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d006      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80d6 	beq.w	8003000 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e54:	4b76      	ldr	r3, [pc, #472]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a75      	ldr	r2, [pc, #468]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e60:	f7fe f82a 	bl	8000eb8 <HAL_GetTick>
 8002e64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e68:	f7fe f826 	bl	8000eb8 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	@ 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e195      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d021      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d11d      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e9a:	4b65      	ldr	r3, [pc, #404]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ea8:	4b61      	ldr	r3, [pc, #388]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eae:	0e1b      	lsrs	r3, r3, #24
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	019a      	lsls	r2, r3, #6
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	071b      	lsls	r3, r3, #28
 8002ece:	4958      	ldr	r1, [pc, #352]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d02e      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f00:	d129      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f02:	4b4b      	ldr	r3, [pc, #300]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f10:	4b47      	ldr	r3, [pc, #284]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f16:	0f1b      	lsrs	r3, r3, #28
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	019a      	lsls	r2, r3, #6
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	071b      	lsls	r3, r3, #28
 8002f36:	493e      	ldr	r1, [pc, #248]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f44:	f023 021f 	bic.w	r2, r3, #31
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	4938      	ldr	r1, [pc, #224]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01d      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f62:	4b33      	ldr	r3, [pc, #204]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f68:	0e1b      	lsrs	r3, r3, #24
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f70:	4b2f      	ldr	r3, [pc, #188]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f76:	0f1b      	lsrs	r3, r3, #28
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	019a      	lsls	r2, r3, #6
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	041b      	lsls	r3, r3, #16
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	061b      	lsls	r3, r3, #24
 8002f90:	431a      	orrs	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	071b      	lsls	r3, r3, #28
 8002f96:	4926      	ldr	r1, [pc, #152]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d011      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	019a      	lsls	r2, r3, #6
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	041b      	lsls	r3, r3, #16
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	061b      	lsls	r3, r3, #24
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	071b      	lsls	r3, r3, #28
 8002fc6:	491a      	ldr	r1, [pc, #104]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fce:	4b18      	ldr	r3, [pc, #96]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a17      	ldr	r2, [pc, #92]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fda:	f7fd ff6d 	bl	8000eb8 <HAL_GetTick>
 8002fde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fe2:	f7fd ff69 	bl	8000eb8 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b64      	cmp	r3, #100	@ 0x64
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0d8      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b01      	cmp	r3, #1
 8003004:	f040 80ce 	bne.w	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003008:	4b09      	ldr	r3, [pc, #36]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a08      	ldr	r2, [pc, #32]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003014:	f7fd ff50 	bl	8000eb8 <HAL_GetTick>
 8003018:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800301a:	e00b      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800301c:	f7fd ff4c 	bl	8000eb8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	@ 0x64
 8003028:	d904      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e0bb      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003034:	4b5e      	ldr	r3, [pc, #376]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800303c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003040:	d0ec      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02e      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d12a      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800306a:	4b51      	ldr	r3, [pc, #324]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003078:	4b4d      	ldr	r3, [pc, #308]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	0f1b      	lsrs	r3, r3, #28
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	019a      	lsls	r2, r3, #6
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	041b      	lsls	r3, r3, #16
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	061b      	lsls	r3, r3, #24
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	071b      	lsls	r3, r3, #28
 800309e:	4944      	ldr	r1, [pc, #272]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030a6:	4b42      	ldr	r3, [pc, #264]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030ac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	3b01      	subs	r3, #1
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	493d      	ldr	r1, [pc, #244]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d022      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030d4:	d11d      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030d6:	4b36      	ldr	r3, [pc, #216]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030dc:	0e1b      	lsrs	r3, r3, #24
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030e4:	4b32      	ldr	r3, [pc, #200]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ea:	0f1b      	lsrs	r3, r3, #28
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	019a      	lsls	r2, r3, #6
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	431a      	orrs	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	061b      	lsls	r3, r3, #24
 8003104:	431a      	orrs	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	071b      	lsls	r3, r3, #28
 800310a:	4929      	ldr	r1, [pc, #164]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d028      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800311e:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003124:	0e1b      	lsrs	r3, r3, #24
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800312c:	4b20      	ldr	r3, [pc, #128]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003132:	0c1b      	lsrs	r3, r3, #16
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	019a      	lsls	r2, r3, #6
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	431a      	orrs	r2, r3
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	061b      	lsls	r3, r3, #24
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	071b      	lsls	r3, r3, #28
 8003152:	4917      	ldr	r1, [pc, #92]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800315a:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800315c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003160:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003168:	4911      	ldr	r1, [pc, #68]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003170:	4b0f      	ldr	r3, [pc, #60]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0e      	ldr	r2, [pc, #56]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800317a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317c:	f7fd fe9c 	bl	8000eb8 <HAL_GetTick>
 8003180:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003184:	f7fd fe98 	bl	8000eb8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	@ 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e007      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800319e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031a2:	d1ef      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800

080031b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e040      	b.n	8003248 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fcc6 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2224      	movs	r2, #36	@ 0x24
 80031e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fe6c 	bl	8003ed8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fc05 	bl	8003a10 <UART_SetConfig>
 8003206:	4603      	mov	r3, r0
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e01b      	b.n	8003248 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800321e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800322e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 feeb 	bl	800401c <UART_CheckIdleState>
 8003246:	4603      	mov	r3, r0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	@ 0x28
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003264:	2b20      	cmp	r3, #32
 8003266:	d177      	bne.n	8003358 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_UART_Transmit+0x24>
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e070      	b.n	800335a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2221      	movs	r2, #33	@ 0x21
 8003284:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003286:	f7fd fe17 	bl	8000eb8 <HAL_GetTick>
 800328a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	88fa      	ldrh	r2, [r7, #6]
 8003290:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	88fa      	ldrh	r2, [r7, #6]
 8003298:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032a4:	d108      	bne.n	80032b8 <HAL_UART_Transmit+0x68>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d104      	bne.n	80032b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	e003      	b.n	80032c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032c0:	e02f      	b.n	8003322 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2180      	movs	r1, #128	@ 0x80
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 ff4d 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d004      	beq.n	80032e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e03b      	b.n	800335a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	3302      	adds	r3, #2
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	e007      	b.n	8003310 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3301      	adds	r3, #1
 800330e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1c9      	bne.n	80032c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2200      	movs	r2, #0
 8003336:	2140      	movs	r1, #64	@ 0x40
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 ff17 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d004      	beq.n	800334e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e005      	b.n	800335a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e000      	b.n	800335a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b08a      	sub	sp, #40	@ 0x28
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	4613      	mov	r3, r2
 800336e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003376:	2b20      	cmp	r3, #32
 8003378:	d132      	bne.n	80033e0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <HAL_UART_Receive_IT+0x24>
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e02b      	b.n	80033e2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d018      	beq.n	80033d0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	e853 3f00 	ldrex	r3, [r3]
 80033aa:	613b      	str	r3, [r7, #16]
   return(result);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	69f9      	ldr	r1, [r7, #28]
 80033c2:	6a3a      	ldr	r2, [r7, #32]
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e6      	bne.n	800339e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	461a      	mov	r2, r3
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 ff36 	bl	8004248 <UART_Start_Receive_IT>
 80033dc:	4603      	mov	r3, r0
 80033de:	e000      	b.n	80033e2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
  }
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3728      	adds	r7, #40	@ 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b0ba      	sub	sp, #232	@ 0xe8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003412:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003416:	f640 030f 	movw	r3, #2063	@ 0x80f
 800341a:	4013      	ands	r3, r2
 800341c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d115      	bne.n	8003454 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00f      	beq.n	8003454 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 82ac 	beq.w	80039a2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
      }
      return;
 8003452:	e2a6      	b.n	80039a2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8117 	beq.w	800368c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800345e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800346a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800346e:	4b85      	ldr	r3, [pc, #532]	@ (8003684 <HAL_UART_IRQHandler+0x298>)
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 810a 	beq.w	800368c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d011      	beq.n	80034a8 <HAL_UART_IRQHandler+0xbc>
 8003484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00b      	beq.n	80034a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2201      	movs	r2, #1
 8003496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d011      	beq.n	80034d8 <HAL_UART_IRQHandler+0xec>
 80034b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00b      	beq.n	80034d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2202      	movs	r2, #2
 80034c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ce:	f043 0204 	orr.w	r2, r3, #4
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d011      	beq.n	8003508 <HAL_UART_IRQHandler+0x11c>
 80034e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00b      	beq.n	8003508 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2204      	movs	r2, #4
 80034f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034fe:	f043 0202 	orr.w	r2, r3, #2
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d017      	beq.n	8003544 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003524:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00b      	beq.n	8003544 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2208      	movs	r2, #8
 8003532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800353a:	f043 0208 	orr.w	r2, r3, #8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <HAL_UART_IRQHandler+0x18a>
 8003550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003554:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00c      	beq.n	8003576 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003564:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 8212 	beq.w	80039a6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00d      	beq.n	80035aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800358e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035be:	2b40      	cmp	r3, #64	@ 0x40
 80035c0:	d005      	beq.n	80035ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d04f      	beq.n	800366e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 ff00 	bl	80043d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035de:	2b40      	cmp	r3, #64	@ 0x40
 80035e0:	d141      	bne.n	8003666 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3308      	adds	r3, #8
 80035e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003600:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3308      	adds	r3, #8
 800360a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800360e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003612:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800361a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1d9      	bne.n	80035e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003632:	2b00      	cmp	r3, #0
 8003634:	d013      	beq.n	800365e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800363a:	4a13      	ldr	r2, [pc, #76]	@ (8003688 <HAL_UART_IRQHandler+0x29c>)
 800363c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd fde9 	bl	800121a <HAL_DMA_Abort_IT>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d017      	beq.n	800367e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003658:	4610      	mov	r0, r2
 800365a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	e00f      	b.n	800367e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f9b6 	bl	80039d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	e00b      	b.n	800367e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f9b2 	bl	80039d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366c:	e007      	b.n	800367e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f9ae 	bl	80039d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800367c:	e193      	b.n	80039a6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367e:	bf00      	nop
    return;
 8003680:	e191      	b.n	80039a6 <HAL_UART_IRQHandler+0x5ba>
 8003682:	bf00      	nop
 8003684:	04000120 	.word	0x04000120
 8003688:	0800449d 	.word	0x0800449d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003690:	2b01      	cmp	r3, #1
 8003692:	f040 814c 	bne.w	800392e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8145 	beq.w	800392e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 813e 	beq.w	800392e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2210      	movs	r2, #16
 80036b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c4:	2b40      	cmp	r3, #64	@ 0x40
 80036c6:	f040 80b6 	bne.w	8003836 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 8165 	beq.w	80039aa <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036ea:	429a      	cmp	r2, r3
 80036ec:	f080 815d 	bcs.w	80039aa <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003704:	f000 8086 	beq.w	8003814 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800371c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003732:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003736:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800373e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800374a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1da      	bne.n	8003708 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3308      	adds	r3, #8
 8003758:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003762:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3308      	adds	r3, #8
 8003772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003776:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800377a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800377e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003788:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e1      	bne.n	8003752 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3308      	adds	r3, #8
 8003794:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800379e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3308      	adds	r3, #8
 80037ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80037b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80037b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037ba:	e841 2300 	strex	r3, r2, [r1]
 80037be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80037c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1e3      	bne.n	800378e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e4:	f023 0310 	bic.w	r3, r3, #16
 80037e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e4      	bne.n	80037d4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd fc93 	bl	800113a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003826:	b29b      	uxth	r3, r3
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	b29b      	uxth	r3, r3
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8d8 	bl	80039e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003834:	e0b9      	b.n	80039aa <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003842:	b29b      	uxth	r3, r3
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80ab 	beq.w	80039ae <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80a6 	beq.w	80039ae <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003876:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003884:	647b      	str	r3, [r7, #68]	@ 0x44
 8003886:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800388a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e4      	bne.n	8003862 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3308      	adds	r3, #8
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	623b      	str	r3, [r7, #32]
   return(result);
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3308      	adds	r3, #8
 80038b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80038be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e3      	bne.n	8003898 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f023 0310 	bic.w	r3, r3, #16
 80038f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	69b9      	ldr	r1, [r7, #24]
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	617b      	str	r3, [r7, #20]
   return(result);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e4      	bne.n	80038e4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003924:	4619      	mov	r1, r3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f85c 	bl	80039e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800392c:	e03f      	b.n	80039ae <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800392e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00e      	beq.n	8003958 <HAL_UART_IRQHandler+0x56c>
 800393a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800393e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800394e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f853 	bl	80039fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003956:	e02d      	b.n	80039b4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800395c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00e      	beq.n	8003982 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01c      	beq.n	80039b2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4798      	blx	r3
    }
    return;
 8003980:	e017      	b.n	80039b2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d012      	beq.n	80039b4 <HAL_UART_IRQHandler+0x5c8>
 800398e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00c      	beq.n	80039b4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fd94 	bl	80044c8 <UART_EndTransmit_IT>
    return;
 80039a0:	e008      	b.n	80039b4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80039a2:	bf00      	nop
 80039a4:	e006      	b.n	80039b4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80039a6:	bf00      	nop
 80039a8:	e004      	b.n	80039b4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80039b2:	bf00      	nop
  }

}
 80039b4:	37e8      	adds	r7, #232	@ 0xe8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop

080039bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4ba6      	ldr	r3, [pc, #664]	@ (8003cd4 <UART_SetConfig+0x2c4>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	6979      	ldr	r1, [r7, #20]
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a94      	ldr	r2, [pc, #592]	@ (8003cd8 <UART_SetConfig+0x2c8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d120      	bne.n	8003ace <UART_SetConfig+0xbe>
 8003a8c:	4b93      	ldr	r3, [pc, #588]	@ (8003cdc <UART_SetConfig+0x2cc>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d816      	bhi.n	8003ac8 <UART_SetConfig+0xb8>
 8003a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa0 <UART_SetConfig+0x90>)
 8003a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa0:	08003ab1 	.word	0x08003ab1
 8003aa4:	08003abd 	.word	0x08003abd
 8003aa8:	08003ab7 	.word	0x08003ab7
 8003aac:	08003ac3 	.word	0x08003ac3
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e150      	b.n	8003d58 <UART_SetConfig+0x348>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e14d      	b.n	8003d58 <UART_SetConfig+0x348>
 8003abc:	2304      	movs	r3, #4
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e14a      	b.n	8003d58 <UART_SetConfig+0x348>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e147      	b.n	8003d58 <UART_SetConfig+0x348>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e144      	b.n	8003d58 <UART_SetConfig+0x348>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a83      	ldr	r2, [pc, #524]	@ (8003ce0 <UART_SetConfig+0x2d0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d132      	bne.n	8003b3e <UART_SetConfig+0x12e>
 8003ad8:	4b80      	ldr	r3, [pc, #512]	@ (8003cdc <UART_SetConfig+0x2cc>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b0c      	cmp	r3, #12
 8003ae4:	d828      	bhi.n	8003b38 <UART_SetConfig+0x128>
 8003ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8003aec <UART_SetConfig+0xdc>)
 8003ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aec:	08003b21 	.word	0x08003b21
 8003af0:	08003b39 	.word	0x08003b39
 8003af4:	08003b39 	.word	0x08003b39
 8003af8:	08003b39 	.word	0x08003b39
 8003afc:	08003b2d 	.word	0x08003b2d
 8003b00:	08003b39 	.word	0x08003b39
 8003b04:	08003b39 	.word	0x08003b39
 8003b08:	08003b39 	.word	0x08003b39
 8003b0c:	08003b27 	.word	0x08003b27
 8003b10:	08003b39 	.word	0x08003b39
 8003b14:	08003b39 	.word	0x08003b39
 8003b18:	08003b39 	.word	0x08003b39
 8003b1c:	08003b33 	.word	0x08003b33
 8003b20:	2300      	movs	r3, #0
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e118      	b.n	8003d58 <UART_SetConfig+0x348>
 8003b26:	2302      	movs	r3, #2
 8003b28:	77fb      	strb	r3, [r7, #31]
 8003b2a:	e115      	b.n	8003d58 <UART_SetConfig+0x348>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e112      	b.n	8003d58 <UART_SetConfig+0x348>
 8003b32:	2308      	movs	r3, #8
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	e10f      	b.n	8003d58 <UART_SetConfig+0x348>
 8003b38:	2310      	movs	r3, #16
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e10c      	b.n	8003d58 <UART_SetConfig+0x348>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a68      	ldr	r2, [pc, #416]	@ (8003ce4 <UART_SetConfig+0x2d4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d120      	bne.n	8003b8a <UART_SetConfig+0x17a>
 8003b48:	4b64      	ldr	r3, [pc, #400]	@ (8003cdc <UART_SetConfig+0x2cc>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b52:	2b30      	cmp	r3, #48	@ 0x30
 8003b54:	d013      	beq.n	8003b7e <UART_SetConfig+0x16e>
 8003b56:	2b30      	cmp	r3, #48	@ 0x30
 8003b58:	d814      	bhi.n	8003b84 <UART_SetConfig+0x174>
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d009      	beq.n	8003b72 <UART_SetConfig+0x162>
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d810      	bhi.n	8003b84 <UART_SetConfig+0x174>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <UART_SetConfig+0x15c>
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d006      	beq.n	8003b78 <UART_SetConfig+0x168>
 8003b6a:	e00b      	b.n	8003b84 <UART_SetConfig+0x174>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	e0f2      	b.n	8003d58 <UART_SetConfig+0x348>
 8003b72:	2302      	movs	r3, #2
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e0ef      	b.n	8003d58 <UART_SetConfig+0x348>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e0ec      	b.n	8003d58 <UART_SetConfig+0x348>
 8003b7e:	2308      	movs	r3, #8
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e0e9      	b.n	8003d58 <UART_SetConfig+0x348>
 8003b84:	2310      	movs	r3, #16
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e0e6      	b.n	8003d58 <UART_SetConfig+0x348>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a56      	ldr	r2, [pc, #344]	@ (8003ce8 <UART_SetConfig+0x2d8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d120      	bne.n	8003bd6 <UART_SetConfig+0x1c6>
 8003b94:	4b51      	ldr	r3, [pc, #324]	@ (8003cdc <UART_SetConfig+0x2cc>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ba0:	d013      	beq.n	8003bca <UART_SetConfig+0x1ba>
 8003ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ba4:	d814      	bhi.n	8003bd0 <UART_SetConfig+0x1c0>
 8003ba6:	2b80      	cmp	r3, #128	@ 0x80
 8003ba8:	d009      	beq.n	8003bbe <UART_SetConfig+0x1ae>
 8003baa:	2b80      	cmp	r3, #128	@ 0x80
 8003bac:	d810      	bhi.n	8003bd0 <UART_SetConfig+0x1c0>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <UART_SetConfig+0x1a8>
 8003bb2:	2b40      	cmp	r3, #64	@ 0x40
 8003bb4:	d006      	beq.n	8003bc4 <UART_SetConfig+0x1b4>
 8003bb6:	e00b      	b.n	8003bd0 <UART_SetConfig+0x1c0>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e0cc      	b.n	8003d58 <UART_SetConfig+0x348>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e0c9      	b.n	8003d58 <UART_SetConfig+0x348>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e0c6      	b.n	8003d58 <UART_SetConfig+0x348>
 8003bca:	2308      	movs	r3, #8
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e0c3      	b.n	8003d58 <UART_SetConfig+0x348>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e0c0      	b.n	8003d58 <UART_SetConfig+0x348>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a44      	ldr	r2, [pc, #272]	@ (8003cec <UART_SetConfig+0x2dc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d125      	bne.n	8003c2c <UART_SetConfig+0x21c>
 8003be0:	4b3e      	ldr	r3, [pc, #248]	@ (8003cdc <UART_SetConfig+0x2cc>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bee:	d017      	beq.n	8003c20 <UART_SetConfig+0x210>
 8003bf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bf4:	d817      	bhi.n	8003c26 <UART_SetConfig+0x216>
 8003bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bfa:	d00b      	beq.n	8003c14 <UART_SetConfig+0x204>
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c00:	d811      	bhi.n	8003c26 <UART_SetConfig+0x216>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <UART_SetConfig+0x1fe>
 8003c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c0a:	d006      	beq.n	8003c1a <UART_SetConfig+0x20a>
 8003c0c:	e00b      	b.n	8003c26 <UART_SetConfig+0x216>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	77fb      	strb	r3, [r7, #31]
 8003c12:	e0a1      	b.n	8003d58 <UART_SetConfig+0x348>
 8003c14:	2302      	movs	r3, #2
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e09e      	b.n	8003d58 <UART_SetConfig+0x348>
 8003c1a:	2304      	movs	r3, #4
 8003c1c:	77fb      	strb	r3, [r7, #31]
 8003c1e:	e09b      	b.n	8003d58 <UART_SetConfig+0x348>
 8003c20:	2308      	movs	r3, #8
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	e098      	b.n	8003d58 <UART_SetConfig+0x348>
 8003c26:	2310      	movs	r3, #16
 8003c28:	77fb      	strb	r3, [r7, #31]
 8003c2a:	e095      	b.n	8003d58 <UART_SetConfig+0x348>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf0 <UART_SetConfig+0x2e0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d125      	bne.n	8003c82 <UART_SetConfig+0x272>
 8003c36:	4b29      	ldr	r3, [pc, #164]	@ (8003cdc <UART_SetConfig+0x2cc>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c44:	d017      	beq.n	8003c76 <UART_SetConfig+0x266>
 8003c46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c4a:	d817      	bhi.n	8003c7c <UART_SetConfig+0x26c>
 8003c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c50:	d00b      	beq.n	8003c6a <UART_SetConfig+0x25a>
 8003c52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c56:	d811      	bhi.n	8003c7c <UART_SetConfig+0x26c>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <UART_SetConfig+0x254>
 8003c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c60:	d006      	beq.n	8003c70 <UART_SetConfig+0x260>
 8003c62:	e00b      	b.n	8003c7c <UART_SetConfig+0x26c>
 8003c64:	2301      	movs	r3, #1
 8003c66:	77fb      	strb	r3, [r7, #31]
 8003c68:	e076      	b.n	8003d58 <UART_SetConfig+0x348>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	77fb      	strb	r3, [r7, #31]
 8003c6e:	e073      	b.n	8003d58 <UART_SetConfig+0x348>
 8003c70:	2304      	movs	r3, #4
 8003c72:	77fb      	strb	r3, [r7, #31]
 8003c74:	e070      	b.n	8003d58 <UART_SetConfig+0x348>
 8003c76:	2308      	movs	r3, #8
 8003c78:	77fb      	strb	r3, [r7, #31]
 8003c7a:	e06d      	b.n	8003d58 <UART_SetConfig+0x348>
 8003c7c:	2310      	movs	r3, #16
 8003c7e:	77fb      	strb	r3, [r7, #31]
 8003c80:	e06a      	b.n	8003d58 <UART_SetConfig+0x348>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf4 <UART_SetConfig+0x2e4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d138      	bne.n	8003cfe <UART_SetConfig+0x2ee>
 8003c8c:	4b13      	ldr	r3, [pc, #76]	@ (8003cdc <UART_SetConfig+0x2cc>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003c96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c9a:	d017      	beq.n	8003ccc <UART_SetConfig+0x2bc>
 8003c9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ca0:	d82a      	bhi.n	8003cf8 <UART_SetConfig+0x2e8>
 8003ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ca6:	d00b      	beq.n	8003cc0 <UART_SetConfig+0x2b0>
 8003ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cac:	d824      	bhi.n	8003cf8 <UART_SetConfig+0x2e8>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <UART_SetConfig+0x2aa>
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb6:	d006      	beq.n	8003cc6 <UART_SetConfig+0x2b6>
 8003cb8:	e01e      	b.n	8003cf8 <UART_SetConfig+0x2e8>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	77fb      	strb	r3, [r7, #31]
 8003cbe:	e04b      	b.n	8003d58 <UART_SetConfig+0x348>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	e048      	b.n	8003d58 <UART_SetConfig+0x348>
 8003cc6:	2304      	movs	r3, #4
 8003cc8:	77fb      	strb	r3, [r7, #31]
 8003cca:	e045      	b.n	8003d58 <UART_SetConfig+0x348>
 8003ccc:	2308      	movs	r3, #8
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e042      	b.n	8003d58 <UART_SetConfig+0x348>
 8003cd2:	bf00      	nop
 8003cd4:	efff69f3 	.word	0xefff69f3
 8003cd8:	40011000 	.word	0x40011000
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40004400 	.word	0x40004400
 8003ce4:	40004800 	.word	0x40004800
 8003ce8:	40004c00 	.word	0x40004c00
 8003cec:	40005000 	.word	0x40005000
 8003cf0:	40011400 	.word	0x40011400
 8003cf4:	40007800 	.word	0x40007800
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e02c      	b.n	8003d58 <UART_SetConfig+0x348>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a72      	ldr	r2, [pc, #456]	@ (8003ecc <UART_SetConfig+0x4bc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d125      	bne.n	8003d54 <UART_SetConfig+0x344>
 8003d08:	4b71      	ldr	r3, [pc, #452]	@ (8003ed0 <UART_SetConfig+0x4c0>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003d12:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d16:	d017      	beq.n	8003d48 <UART_SetConfig+0x338>
 8003d18:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d1c:	d817      	bhi.n	8003d4e <UART_SetConfig+0x33e>
 8003d1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d22:	d00b      	beq.n	8003d3c <UART_SetConfig+0x32c>
 8003d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d28:	d811      	bhi.n	8003d4e <UART_SetConfig+0x33e>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <UART_SetConfig+0x326>
 8003d2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d32:	d006      	beq.n	8003d42 <UART_SetConfig+0x332>
 8003d34:	e00b      	b.n	8003d4e <UART_SetConfig+0x33e>
 8003d36:	2300      	movs	r3, #0
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e00d      	b.n	8003d58 <UART_SetConfig+0x348>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e00a      	b.n	8003d58 <UART_SetConfig+0x348>
 8003d42:	2304      	movs	r3, #4
 8003d44:	77fb      	strb	r3, [r7, #31]
 8003d46:	e007      	b.n	8003d58 <UART_SetConfig+0x348>
 8003d48:	2308      	movs	r3, #8
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e004      	b.n	8003d58 <UART_SetConfig+0x348>
 8003d4e:	2310      	movs	r3, #16
 8003d50:	77fb      	strb	r3, [r7, #31]
 8003d52:	e001      	b.n	8003d58 <UART_SetConfig+0x348>
 8003d54:	2310      	movs	r3, #16
 8003d56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d60:	d15b      	bne.n	8003e1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003d62:	7ffb      	ldrb	r3, [r7, #31]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d828      	bhi.n	8003dba <UART_SetConfig+0x3aa>
 8003d68:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <UART_SetConfig+0x360>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d95 	.word	0x08003d95
 8003d74:	08003d9d 	.word	0x08003d9d
 8003d78:	08003da5 	.word	0x08003da5
 8003d7c:	08003dbb 	.word	0x08003dbb
 8003d80:	08003dab 	.word	0x08003dab
 8003d84:	08003dbb 	.word	0x08003dbb
 8003d88:	08003dbb 	.word	0x08003dbb
 8003d8c:	08003dbb 	.word	0x08003dbb
 8003d90:	08003db3 	.word	0x08003db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d94:	f7fe fdbe 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8003d98:	61b8      	str	r0, [r7, #24]
        break;
 8003d9a:	e013      	b.n	8003dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d9c:	f7fe fdce 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 8003da0:	61b8      	str	r0, [r7, #24]
        break;
 8003da2:	e00f      	b.n	8003dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed4 <UART_SetConfig+0x4c4>)
 8003da6:	61bb      	str	r3, [r7, #24]
        break;
 8003da8:	e00c      	b.n	8003dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003daa:	f7fe fca1 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8003dae:	61b8      	str	r0, [r7, #24]
        break;
 8003db0:	e008      	b.n	8003dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003db6:	61bb      	str	r3, [r7, #24]
        break;
 8003db8:	e004      	b.n	8003dc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	77bb      	strb	r3, [r7, #30]
        break;
 8003dc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d074      	beq.n	8003eb4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	005a      	lsls	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	441a      	add	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b0f      	cmp	r3, #15
 8003de4:	d916      	bls.n	8003e14 <UART_SetConfig+0x404>
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dec:	d212      	bcs.n	8003e14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f023 030f 	bic.w	r3, r3, #15
 8003df6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	89fb      	ldrh	r3, [r7, #14]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	89fa      	ldrh	r2, [r7, #14]
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	e04f      	b.n	8003eb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	77bb      	strb	r3, [r7, #30]
 8003e18:	e04c      	b.n	8003eb4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e1a:	7ffb      	ldrb	r3, [r7, #31]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d828      	bhi.n	8003e72 <UART_SetConfig+0x462>
 8003e20:	a201      	add	r2, pc, #4	@ (adr r2, 8003e28 <UART_SetConfig+0x418>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e4d 	.word	0x08003e4d
 8003e2c:	08003e55 	.word	0x08003e55
 8003e30:	08003e5d 	.word	0x08003e5d
 8003e34:	08003e73 	.word	0x08003e73
 8003e38:	08003e63 	.word	0x08003e63
 8003e3c:	08003e73 	.word	0x08003e73
 8003e40:	08003e73 	.word	0x08003e73
 8003e44:	08003e73 	.word	0x08003e73
 8003e48:	08003e6b 	.word	0x08003e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e4c:	f7fe fd62 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8003e50:	61b8      	str	r0, [r7, #24]
        break;
 8003e52:	e013      	b.n	8003e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e54:	f7fe fd72 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 8003e58:	61b8      	str	r0, [r7, #24]
        break;
 8003e5a:	e00f      	b.n	8003e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed4 <UART_SetConfig+0x4c4>)
 8003e5e:	61bb      	str	r3, [r7, #24]
        break;
 8003e60:	e00c      	b.n	8003e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e62:	f7fe fc45 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8003e66:	61b8      	str	r0, [r7, #24]
        break;
 8003e68:	e008      	b.n	8003e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e6e:	61bb      	str	r3, [r7, #24]
        break;
 8003e70:	e004      	b.n	8003e7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	77bb      	strb	r3, [r7, #30]
        break;
 8003e7a:	bf00      	nop
    }

    if (pclk != 0U)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d018      	beq.n	8003eb4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	085a      	lsrs	r2, r3, #1
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	441a      	add	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b0f      	cmp	r3, #15
 8003e9a:	d909      	bls.n	8003eb0 <UART_SetConfig+0x4a0>
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea2:	d205      	bcs.n	8003eb0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	e001      	b.n	8003eb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ec0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40007c00 	.word	0x40007c00
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	00f42400 	.word	0x00f42400

08003ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01a      	beq.n	8003fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fd6:	d10a      	bne.n	8003fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  }
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b098      	sub	sp, #96	@ 0x60
 8004020:	af02      	add	r7, sp, #8
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800402c:	f7fc ff44 	bl	8000eb8 <HAL_GetTick>
 8004030:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b08      	cmp	r3, #8
 800403e:	d12e      	bne.n	800409e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004040:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004048:	2200      	movs	r2, #0
 800404a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f88c 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d021      	beq.n	800409e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800406e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004078:	647b      	str	r3, [r7, #68]	@ 0x44
 800407a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800407e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e6      	bne.n	800405a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e062      	b.n	8004164 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d149      	bne.n	8004140 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b4:	2200      	movs	r2, #0
 80040b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f856 	bl	800416c <UART_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d03c      	beq.n	8004140 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	623b      	str	r3, [r7, #32]
   return(result);
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e6      	bne.n	80040c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3308      	adds	r3, #8
 80040fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	60fb      	str	r3, [r7, #12]
   return(result);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004118:	61fa      	str	r2, [r7, #28]
 800411a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	69b9      	ldr	r1, [r7, #24]
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	617b      	str	r3, [r7, #20]
   return(result);
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e011      	b.n	8004164 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3758      	adds	r7, #88	@ 0x58
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	603b      	str	r3, [r7, #0]
 8004178:	4613      	mov	r3, r2
 800417a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417c:	e04f      	b.n	800421e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d04b      	beq.n	800421e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004186:	f7fc fe97 	bl	8000eb8 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	429a      	cmp	r2, r3
 8004194:	d302      	bcc.n	800419c <UART_WaitOnFlagUntilTimeout+0x30>
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e04e      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d037      	beq.n	800421e <UART_WaitOnFlagUntilTimeout+0xb2>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b80      	cmp	r3, #128	@ 0x80
 80041b2:	d034      	beq.n	800421e <UART_WaitOnFlagUntilTimeout+0xb2>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b40      	cmp	r3, #64	@ 0x40
 80041b8:	d031      	beq.n	800421e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d110      	bne.n	80041ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2208      	movs	r2, #8
 80041ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f8ff 	bl	80043d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2208      	movs	r2, #8
 80041da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e029      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f8:	d111      	bne.n	800421e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f8e5 	bl	80043d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e00f      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4013      	ands	r3, r2
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	429a      	cmp	r2, r3
 800422c:	bf0c      	ite	eq
 800422e:	2301      	moveq	r3, #1
 8004230:	2300      	movne	r3, #0
 8004232:	b2db      	uxtb	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	429a      	cmp	r2, r3
 800423a:	d0a0      	beq.n	800417e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004248:	b480      	push	{r7}
 800424a:	b097      	sub	sp, #92	@ 0x5c
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427a:	d10e      	bne.n	800429a <UART_Start_Receive_IT+0x52>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <UART_Start_Receive_IT+0x48>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800428a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800428e:	e02d      	b.n	80042ec <UART_Start_Receive_IT+0xa4>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	22ff      	movs	r2, #255	@ 0xff
 8004294:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004298:	e028      	b.n	80042ec <UART_Start_Receive_IT+0xa4>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10d      	bne.n	80042be <UART_Start_Receive_IT+0x76>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d104      	bne.n	80042b4 <UART_Start_Receive_IT+0x6c>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	22ff      	movs	r2, #255	@ 0xff
 80042ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042b2:	e01b      	b.n	80042ec <UART_Start_Receive_IT+0xa4>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	227f      	movs	r2, #127	@ 0x7f
 80042b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042bc:	e016      	b.n	80042ec <UART_Start_Receive_IT+0xa4>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042c6:	d10d      	bne.n	80042e4 <UART_Start_Receive_IT+0x9c>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <UART_Start_Receive_IT+0x92>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	227f      	movs	r2, #127	@ 0x7f
 80042d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042d8:	e008      	b.n	80042ec <UART_Start_Receive_IT+0xa4>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	223f      	movs	r2, #63	@ 0x3f
 80042de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042e2:	e003      	b.n	80042ec <UART_Start_Receive_IT+0xa4>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2222      	movs	r2, #34	@ 0x22
 80042f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3308      	adds	r3, #8
 8004302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800430c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	657b      	str	r3, [r7, #84]	@ 0x54
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3308      	adds	r3, #8
 800431a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800431c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800431e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800432a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e5      	bne.n	80042fc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004338:	d107      	bne.n	800434a <UART_Start_Receive_IT+0x102>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a21      	ldr	r2, [pc, #132]	@ (80043cc <UART_Start_Receive_IT+0x184>)
 8004346:	669a      	str	r2, [r3, #104]	@ 0x68
 8004348:	e002      	b.n	8004350 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4a20      	ldr	r2, [pc, #128]	@ (80043d0 <UART_Start_Receive_IT+0x188>)
 800434e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d019      	beq.n	800438c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800436c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004376:	637b      	str	r3, [r7, #52]	@ 0x34
 8004378:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800437c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e6      	bne.n	8004358 <UART_Start_Receive_IT+0x110>
 800438a:	e018      	b.n	80043be <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	613b      	str	r3, [r7, #16]
   return(result);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f043 0320 	orr.w	r3, r3, #32
 80043a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	69f9      	ldr	r1, [r7, #28]
 80043b0:	6a3a      	ldr	r2, [r7, #32]
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e6      	bne.n	800438c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	375c      	adds	r7, #92	@ 0x5c
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	080046c5 	.word	0x080046c5
 80043d0:	0800451d 	.word	0x0800451d

080043d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b095      	sub	sp, #84	@ 0x54
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80043fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004400:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e6      	bne.n	80043dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3308      	adds	r3, #8
 8004414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	61fb      	str	r3, [r7, #28]
   return(result);
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3308      	adds	r3, #8
 800442c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800442e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e5      	bne.n	800440e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004446:	2b01      	cmp	r3, #1
 8004448:	d118      	bne.n	800447c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	60bb      	str	r3, [r7, #8]
   return(result);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f023 0310 	bic.w	r3, r3, #16
 800445e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6979      	ldr	r1, [r7, #20]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	613b      	str	r3, [r7, #16]
   return(result);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004490:	bf00      	nop
 8004492:	3754      	adds	r7, #84	@ 0x54
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff fa88 	bl	80039d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e4:	61fb      	str	r3, [r7, #28]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	61bb      	str	r3, [r7, #24]
 80044f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6979      	ldr	r1, [r7, #20]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	613b      	str	r3, [r7, #16]
   return(result);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e6      	bne.n	80044d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff fa54 	bl	80039bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004514:	bf00      	nop
 8004516:	3720      	adds	r7, #32
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b09c      	sub	sp, #112	@ 0x70
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800452a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004534:	2b22      	cmp	r3, #34	@ 0x22
 8004536:	f040 80b9 	bne.w	80046ac <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004540:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004544:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004548:	b2d9      	uxtb	r1, r3
 800454a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800454e:	b2da      	uxtb	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004554:	400a      	ands	r2, r1
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	f040 809c 	bne.w	80046bc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004598:	66bb      	str	r3, [r7, #104]	@ 0x68
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e6      	bne.n	8004584 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3308      	adds	r3, #8
 80045bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3308      	adds	r3, #8
 80045d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80045d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80045d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e5      	bne.n	80045b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d018      	beq.n	800463e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	623b      	str	r3, [r7, #32]
   return(result);
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004620:	663b      	str	r3, [r7, #96]	@ 0x60
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800462a:	633b      	str	r3, [r7, #48]	@ 0x30
 800462c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e6      	bne.n	800460c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004642:	2b01      	cmp	r3, #1
 8004644:	d12e      	bne.n	80046a4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	60fb      	str	r3, [r7, #12]
   return(result);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f023 0310 	bic.w	r3, r3, #16
 8004660:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	69b9      	ldr	r1, [r7, #24]
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	617b      	str	r3, [r7, #20]
   return(result);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e6      	bne.n	800464c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b10      	cmp	r3, #16
 800468a:	d103      	bne.n	8004694 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2210      	movs	r2, #16
 8004692:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800469a:	4619      	mov	r1, r3
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff f9a1 	bl	80039e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046a2:	e00b      	b.n	80046bc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7fb ff65 	bl	8000574 <HAL_UART_RxCpltCallback>
}
 80046aa:	e007      	b.n	80046bc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0208 	orr.w	r2, r2, #8
 80046ba:	619a      	str	r2, [r3, #24]
}
 80046bc:	bf00      	nop
 80046be:	3770      	adds	r7, #112	@ 0x70
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b09c      	sub	sp, #112	@ 0x70
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80046d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046dc:	2b22      	cmp	r3, #34	@ 0x22
 80046de:	f040 80b9 	bne.w	8004854 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80046f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80046f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80046fa:	4013      	ands	r3, r2
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004700:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004706:	1c9a      	adds	r2, r3, #2
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	f040 809c 	bne.w	8004864 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800473a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800473c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004740:	667b      	str	r3, [r7, #100]	@ 0x64
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800474a:	657b      	str	r3, [r7, #84]	@ 0x54
 800474c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004750:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e6      	bne.n	800472c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3308      	adds	r3, #8
 8004764:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800476e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	663b      	str	r3, [r7, #96]	@ 0x60
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3308      	adds	r3, #8
 800477c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800477e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004784:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800478c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e5      	bne.n	800475e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d018      	beq.n	80047e6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047d4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e6      	bne.n	80047b4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d12e      	bne.n	800484c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	60bb      	str	r3, [r7, #8]
   return(result);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 0310 	bic.w	r3, r3, #16
 8004808:	65bb      	str	r3, [r7, #88]	@ 0x58
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6979      	ldr	r1, [r7, #20]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	613b      	str	r3, [r7, #16]
   return(result);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e6      	bne.n	80047f4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b10      	cmp	r3, #16
 8004832:	d103      	bne.n	800483c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2210      	movs	r2, #16
 800483a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff f8cd 	bl	80039e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800484a:	e00b      	b.n	8004864 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7fb fe91 	bl	8000574 <HAL_UART_RxCpltCallback>
}
 8004852:	e007      	b.n	8004864 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0208 	orr.w	r2, r2, #8
 8004862:	619a      	str	r2, [r3, #24]
}
 8004864:	bf00      	nop
 8004866:	3770      	adds	r7, #112	@ 0x70
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800486c:	b084      	sub	sp, #16
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	f107 001c 	add.w	r0, r7, #28
 800487a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800487e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004882:	2b01      	cmp	r3, #1
 8004884:	d121      	bne.n	80048ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	4b21      	ldr	r3, [pc, #132]	@ (800491c <USB_CoreInit+0xb0>)
 8004898:	4013      	ands	r3, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d105      	bne.n	80048be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa92 	bl	8004de8 <USB_CoreReset>
 80048c4:	4603      	mov	r3, r0
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	e010      	b.n	80048ec <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fa86 	bl	8004de8 <USB_CoreReset>
 80048dc:	4603      	mov	r3, r0
 80048de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80048ec:	7fbb      	ldrb	r3, [r7, #30]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d10b      	bne.n	800490a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f043 0206 	orr.w	r2, r3, #6
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f043 0220 	orr.w	r2, r3, #32
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004916:	b004      	add	sp, #16
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	ffbdffbf 	.word	0xffbdffbf

08004920 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f023 0201 	bic.w	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	460b      	mov	r3, r1
 800494c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d115      	bne.n	8004990 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004970:	200a      	movs	r0, #10
 8004972:	f7fc faad 	bl	8000ed0 <HAL_Delay>
      ms += 10U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	330a      	adds	r3, #10
 800497a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fa25 	bl	8004dcc <USB_GetMode>
 8004982:	4603      	mov	r3, r0
 8004984:	2b01      	cmp	r3, #1
 8004986:	d01e      	beq.n	80049c6 <USB_SetCurrentMode+0x84>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2bc7      	cmp	r3, #199	@ 0xc7
 800498c:	d9f0      	bls.n	8004970 <USB_SetCurrentMode+0x2e>
 800498e:	e01a      	b.n	80049c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d115      	bne.n	80049c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049a2:	200a      	movs	r0, #10
 80049a4:	f7fc fa94 	bl	8000ed0 <HAL_Delay>
      ms += 10U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	330a      	adds	r3, #10
 80049ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa0c 	bl	8004dcc <USB_GetMode>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <USB_SetCurrentMode+0x84>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80049be:	d9f0      	bls.n	80049a2 <USB_SetCurrentMode+0x60>
 80049c0:	e001      	b.n	80049c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e005      	b.n	80049d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2bc8      	cmp	r3, #200	@ 0xc8
 80049ca:	d101      	bne.n	80049d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049dc:	b084      	sub	sp, #16
 80049de:	b580      	push	{r7, lr}
 80049e0:	b086      	sub	sp, #24
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80049ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	e009      	b.n	8004a10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	3340      	adds	r3, #64	@ 0x40
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	2200      	movs	r2, #0
 8004a08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b0e      	cmp	r3, #14
 8004a14:	d9f2      	bls.n	80049fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d11c      	bne.n	8004a58 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a2c:	f043 0302 	orr.w	r3, r3, #2
 8004a30:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a36:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e005      	b.n	8004a64 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a70:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d10d      	bne.n	8004a94 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d104      	bne.n	8004a8a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a80:	2100      	movs	r1, #0
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f968 	bl	8004d58 <USB_SetDevSpeed>
 8004a88:	e008      	b.n	8004a9c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f963 	bl	8004d58 <USB_SetDevSpeed>
 8004a92:	e003      	b.n	8004a9c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a94:	2103      	movs	r1, #3
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f95e 	bl	8004d58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a9c:	2110      	movs	r1, #16
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8fa 	bl	8004c98 <USB_FlushTxFifo>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f924 	bl	8004cfc <USB_FlushRxFifo>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004adc:	461a      	mov	r2, r3
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	e043      	b.n	8004b70 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004afa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004afe:	d118      	bne.n	8004b32 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b12:	461a      	mov	r2, r3
 8004b14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	e013      	b.n	8004b44 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	e008      	b.n	8004b44 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3e:	461a      	mov	r2, r3
 8004b40:	2300      	movs	r3, #0
 8004b42:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b62:	461a      	mov	r2, r3
 8004b64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b74:	461a      	mov	r2, r3
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d3b5      	bcc.n	8004ae8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	e043      	b.n	8004c0a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b98:	d118      	bne.n	8004bcc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bac:	461a      	mov	r2, r3
 8004bae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	e013      	b.n	8004bde <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e008      	b.n	8004bde <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd8:	461a      	mov	r2, r3
 8004bda:	2300      	movs	r3, #0
 8004bdc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bea:	461a      	mov	r2, r3
 8004bec:	2300      	movs	r3, #0
 8004bee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	3301      	adds	r3, #1
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c0e:	461a      	mov	r2, r3
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d3b5      	bcc.n	8004b82 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c28:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004c36:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f043 0210 	orr.w	r2, r3, #16
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699a      	ldr	r2, [r3, #24]
 8004c50:	4b0f      	ldr	r3, [pc, #60]	@ (8004c90 <USB_DevInit+0x2b4>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f043 0208 	orr.w	r2, r3, #8
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d105      	bne.n	8004c80 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699a      	ldr	r2, [r3, #24]
 8004c78:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <USB_DevInit+0x2b8>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c8c:	b004      	add	sp, #16
 8004c8e:	4770      	bx	lr
 8004c90:	803c3800 	.word	0x803c3800
 8004c94:	40000004 	.word	0x40000004

08004c98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cb2:	d901      	bls.n	8004cb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e01b      	b.n	8004cf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	daf2      	bge.n	8004ca6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	019b      	lsls	r3, r3, #6
 8004cc8:	f043 0220 	orr.w	r2, r3, #32
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cdc:	d901      	bls.n	8004ce2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e006      	b.n	8004cf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d0f0      	beq.n	8004cd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d14:	d901      	bls.n	8004d1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e018      	b.n	8004d4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	daf2      	bge.n	8004d08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2210      	movs	r2, #16
 8004d2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d38:	d901      	bls.n	8004d3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e006      	b.n	8004d4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2b10      	cmp	r3, #16
 8004d48:	d0f0      	beq.n	8004d2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	68f9      	ldr	r1, [r7, #12]
 8004d74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004da4:	f023 0303 	bic.w	r3, r3, #3
 8004da8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004db8:	f043 0302 	orr.w	r3, r3, #2
 8004dbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e00:	d901      	bls.n	8004e06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e01b      	b.n	8004e3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	daf2      	bge.n	8004df4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f043 0201 	orr.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3301      	adds	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e2a:	d901      	bls.n	8004e30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e006      	b.n	8004e3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d0f0      	beq.n	8004e1e <USB_CoreReset+0x36>

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <memset>:
 8004e4a:	4402      	add	r2, r0
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d100      	bne.n	8004e54 <memset+0xa>
 8004e52:	4770      	bx	lr
 8004e54:	f803 1b01 	strb.w	r1, [r3], #1
 8004e58:	e7f9      	b.n	8004e4e <memset+0x4>
	...

08004e5c <__libc_init_array>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e94 <__libc_init_array+0x38>)
 8004e60:	4c0d      	ldr	r4, [pc, #52]	@ (8004e98 <__libc_init_array+0x3c>)
 8004e62:	1b64      	subs	r4, r4, r5
 8004e64:	10a4      	asrs	r4, r4, #2
 8004e66:	2600      	movs	r6, #0
 8004e68:	42a6      	cmp	r6, r4
 8004e6a:	d109      	bne.n	8004e80 <__libc_init_array+0x24>
 8004e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e9c <__libc_init_array+0x40>)
 8004e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8004ea0 <__libc_init_array+0x44>)
 8004e70:	f000 f818 	bl	8004ea4 <_init>
 8004e74:	1b64      	subs	r4, r4, r5
 8004e76:	10a4      	asrs	r4, r4, #2
 8004e78:	2600      	movs	r6, #0
 8004e7a:	42a6      	cmp	r6, r4
 8004e7c:	d105      	bne.n	8004e8a <__libc_init_array+0x2e>
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e84:	4798      	blx	r3
 8004e86:	3601      	adds	r6, #1
 8004e88:	e7ee      	b.n	8004e68 <__libc_init_array+0xc>
 8004e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8e:	4798      	blx	r3
 8004e90:	3601      	adds	r6, #1
 8004e92:	e7f2      	b.n	8004e7a <__libc_init_array+0x1e>
 8004e94:	08004eec 	.word	0x08004eec
 8004e98:	08004eec 	.word	0x08004eec
 8004e9c:	08004eec 	.word	0x08004eec
 8004ea0:	08004ef0 	.word	0x08004ef0

08004ea4 <_init>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	bf00      	nop
 8004ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eaa:	bc08      	pop	{r3}
 8004eac:	469e      	mov	lr, r3
 8004eae:	4770      	bx	lr

08004eb0 <_fini>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	bf00      	nop
 8004eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb6:	bc08      	pop	{r3}
 8004eb8:	469e      	mov	lr, r3
 8004eba:	4770      	bx	lr
